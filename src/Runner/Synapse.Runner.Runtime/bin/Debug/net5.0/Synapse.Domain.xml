<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Synapse.Domain</name>
    </assembly>
    <members>
        <member name="T:Synapse.Domain.CustomResourceAggregate`2">
            <summary>
            Represents the base class for all <see cref="T:Synapse.Domain.IAggregateRoot"/> <see cref="T:Neuroglia.K8s.ICustomResource"/>s
            </summary>
            <typeparam name="TSpec"></typeparam>
            <typeparam name="TStatus"></typeparam>
        </member>
        <member name="M:Synapse.Domain.CustomResourceAggregate`2.#ctor(Neuroglia.K8s.ICustomResourceDefinition)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.CustomResourceAggregate`2"/>
            </summary>
            <param name="definition">The <see cref="T:Synapse.Domain.CustomResourceAggregate`2"/>'s <see cref="T:Neuroglia.K8s.ICustomResourceDefinition"/></param>
        </member>
        <member name="P:Synapse.Domain.CustomResourceAggregate`2.Id">
            <summary>
            Gets the <see cref="T:Synapse.Domain.CustomResourceAggregate`2"/>'s id
            </summary>
        </member>
        <member name="P:Synapse.Domain.CustomResourceAggregate`2.Version">
            <summary>
            Gets the <see cref="T:Synapse.Domain.CustomResourceAggregate`2"/>'s version
            </summary>
        </member>
        <member name="P:Synapse.Domain.CustomResourceAggregate`2.PendingEvents">
            <summary>
            Gets the <see cref="T:Synapse.Domain.CustomResourceAggregate`2"/>'s pending <see cref="T:Synapse.Domain.IDomainEvent"/>s
            </summary>
        </member>
        <member name="P:Synapse.Domain.CustomResourceAggregate`2.Patch">
            <summary>
            Gets the <see cref="T:Synapse.Domain.CustomResourceAggregate`2"/>'s pending <see cref="T:Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument"/>
            </summary>
        </member>
        <member name="P:Synapse.Domain.CustomResourceAggregate`2.StatusPatch">
            <summary>
            Gets the <see cref="T:Synapse.Domain.CustomResourceAggregate`2"/>'s pending status <see cref="T:Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument"/>
            </summary>
        </member>
        <member name="P:Synapse.Domain.CustomResourceAggregate`2.HasPatch">
            <summary>
            Gets a boolean indicating whether or not the <see cref="T:Synapse.Domain.CustomResourceAggregate`2"/> has a pending <see cref="T:Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument"/>
            </summary>
        </member>
        <member name="P:Synapse.Domain.CustomResourceAggregate`2.HasStatusPatch">
            <summary>
            Gets a boolean indicating whether or not the <see cref="T:Synapse.Domain.CustomResourceAggregate`2"/> has a pending status <see cref="T:Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.CustomResourceAggregate`2.GetPatch">
            <summary>
            Gets the <see cref="T:Synapse.Domain.CustomResourceAggregate`2"/>'s pending <see cref="T:Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument"/>
            </summary>
            <returns>The pending <see cref="T:Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument"/>, if any</returns>
        </member>
        <member name="M:Synapse.Domain.CustomResourceAggregate`2.GetStatusPatch">
            <summary>
            Gets the <see cref="T:Synapse.Domain.CustomResourceAggregate`2"/>'s pending status <see cref="T:Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument"/>
            </summary>
            <returns>The pending status <see cref="T:Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument"/>, if any</returns>
        </member>
        <member name="M:Synapse.Domain.CustomResourceAggregate`2.RegisterEvent``1(``0)">
            <summary>
            Registers the specified pending <see cref="T:Synapse.Domain.IDomainEvent"/>
            </summary>
            <typeparam name="TEvent">The type of <see cref="T:Synapse.Domain.IDomainEvent"/> to register</typeparam>
            <param name="e">The <see cref="T:Synapse.Domain.IDomainEvent"/> to register</param>
            <returns>The registered pending <see cref="T:Synapse.Domain.IDomainEvent"/></returns>
        </member>
        <member name="M:Synapse.Domain.CustomResourceAggregate`2.ClearPendingEvents">
            <summary>
            Clears pending <see cref="T:Synapse.Domain.IDomainEvent"/>s
            </summary>
        </member>
        <member name="M:Synapse.Domain.CustomResourceAggregate`2.ReplayEvents(Synapse.Domain.IDomainEvent[])">
            <summary>
            Replays the specified <see cref="T:Synapse.Domain.IDomainEvent"/>s
            </summary>
            <param name="events">An array containing the <see cref="T:Synapse.Domain.IDomainEvent"/>s to replay</param>
        </member>
        <member name="M:Synapse.Domain.CustomResourceAggregate`2.CreatePatch">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument"/>
            </summary>
            <returns>A new <see cref="T:Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument"/></returns>
        </member>
        <member name="T:Synapse.Domain.DomainArgumentException">
            <summary>
            Represents an argument-related <see cref="T:Synapse.Domain.DomainException"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.DomainArgumentException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.DomainArgumentException"/>
            </summary>
            <param name="message">The exception message</param>
            <param name="argumentName">The argument name</param>
        </member>
        <member name="M:Synapse.Domain.DomainArgumentException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.DomainArgumentException"/>
            </summary>
            <param name="message">The exception message</param>
            <param name="argumentName">The argument name</param>
            <param name="innerException">The inner exception, if any</param>
        </member>
        <member name="P:Synapse.Domain.DomainArgumentException.ArgumentName">
            <summary>
            Gets the name of the argument at the origin of the exception
            </summary>
        </member>
        <member name="T:Synapse.Domain.DomainEvent`1">
            <summary>
            Represents the base class for all <see cref="T:Synapse.Domain.IDomainEvent"/>s
            </summary>
            <typeparam name="TAggregate">The type of <see cref="T:Synapse.Domain.IAggregateRoot"/> the <see cref="T:Synapse.Domain.DomainEvent`1"/> applies to</typeparam>
        </member>
        <member name="M:Synapse.Domain.DomainEvent`1.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.DomainEvent`1"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.DomainEvent`1.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.DomainEvent`1"/>
            </summary>
            <param name="aggregateId">The id of the <see cref="T:Synapse.Domain.IAggregateRoot"/> the <see cref="T:Synapse.Domain.DomainEvent`1"/> applies to</param>
        </member>
        <member name="P:Synapse.Domain.DomainEvent`1.AggregateId">
            <inheritdoc/>
        </member>
        <member name="P:Synapse.Domain.DomainEvent`1.CreatedAt">
            <inheritdoc/>
        </member>
        <member name="T:Synapse.Domain.DomainException">
            <summary>
            Represents a domain-related <see cref="T:System.Exception"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.DomainException.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.DomainException"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.DomainException.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.DomainException"/>
            </summary>
            <param name="message">The <see cref="T:System.Exception"/> message</param>
        </member>
        <member name="M:Synapse.Domain.DomainException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.DomainException"/>
            </summary>
            <param name="message">The <see cref="T:System.Exception"/> message</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/></param>
        </member>
        <member name="M:Synapse.Domain.DomainException.ArgumentCannotBeADateInTheFuture(System.String)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainArgumentException"/> thrown when an argument is a date in the future
            </summary>
            <param name="argumentName">The name of the argument</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainArgumentException"/> thrown when an argument is a date in the future</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.ArgumentNull(System.String)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainArgumentException"/> for a null argument
            </summary>
            <param name="argumentName">The argument's name</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainArgumentException"/> for a null argument</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.ArgumentNullOrWhitespace(System.String)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainArgumentException"/> for a null or whitespace argument
            </summary>
            <param name="argumentName">The argument's name</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainArgumentException"/> for a null or whitespace argument</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.ArgumentIsInvalidAddress(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an invalid address argument
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="value">The invalid address</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an invalid address argument</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.ArgumentIsInvalidEmail(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an invalid email argument
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="value">The invalid email</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an invalid email argument</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.ArgumentIsInvalidIso3166CountryCode(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an invalid two-letter ISO 3166 country code argument
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="value">The invalid ISO 3166 country code</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an invalid ISO 6391 language code argument</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.ArgumentIsInvalidIso6391LanguageCode(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an invalid ISO 6391 language code argument
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="value">The invalid ISO 6391 language code</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an invalid ISO 6391 language code argument</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.ArgumentIsInvalidIso4217CurrencyCode(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an invalid ISO 4217 currency code argument
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="value">The invalid ISO 4217 currency code</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an invalid ISO 4217 currency code argument</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.ArgumentIsInvalidPhoneNumber(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an invalid phone number argument
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="value">The invalid address</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an invalid phone number argument</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.ArgumentIsInvalidPhoneNumberPrefix(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an invalid phone number prefix argument
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="value">The invalid phone number prefix</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an invalid phone number prefix argument</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.ArgumentIsInvalidTimeZoneId(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an invalid time zone id argument
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="value">The invalid time zone id</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an invalid time zone id argument</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.ArgumentIsInvalidUri(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an invalid uri argument
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="value">The invalid uri</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an invalid uri argument</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.ArgumentIsUnsupportedValue(System.String,System.Object,System.Object[])">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainException"/> thrown when an unsupported value has been supplied for the specified argument
            </summary>
            <param name="argumentName">The name of the argument that has an unsupported value</param>
            <param name="value">The unsupported value</param>
            <param name="supportedValues">An array containing the supported values</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainException"/> thrown when an unsupported value has been supplied for the specified argument</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.ArgumentMustBeHigherOrLowerThan(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainArgumentException"/> thrown when an argument must be higher or lower than a specific value
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="quantity">The quantity the argument must be higher or lower than</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainArgumentException"/> thrown when an argument must be higher or lower than a specific value</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.ArgumentMustBeHigherOrLowerThan(System.String,System.Double)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainArgumentException"/> thrown when an argument must be higher or lower than a specific value
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="quantity">The quantity the argument must be higher or lower than</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainArgumentException"/> thrown when an argument must be higher or lower than a specific value</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.ArgumentMustBeHigherOrLowerThan(System.String,System.Decimal)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainArgumentException"/> thrown when an argument must be higher or lower than a specific value
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="quantity">The quantity the argument must be higher or lower than</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainArgumentException"/> thrown when an argument must be higher or lower than a specific value</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.ArgumentMustBeLowerOrHigherThan(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an argument that must be lower or higher than the specified quantity
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="quantity">The quantity the argument must be lower or higher than</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an argument that must be lower or higher than the specified quantity</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.ArgumentMustBeHigherThan(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an argument that must be higher than the specified quantity
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="quantity">The quantity the argument must be higher than</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an argument that must be higher than the specified quantity</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.ArgumentMustBeHigherThan(System.String,System.Double)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an argument that must be higher than the specified quantity
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="quantity">The quantity the argument must be higher than</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an argument that must be higher than the specified quantity</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.ArgumentMustBeHigherThan(System.String,System.Decimal)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an argument that must be higher than the specified quantity
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="quantity">The quantity the argument must be higher than</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an argument that must be higher than the specified quantity</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.ArgumentMustBeHigherOrEqualTo(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an argument that must be higher or equal to the specified quantity
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="quantity">The quantity the argument must be higher or equal to</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an argument that must be higher or equal to the specified quantity</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.ArgumentMustBeHigherOrEqualTo(System.String,System.Double)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an argument that must be higher or equal to the specified quantity
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="quantity">The quantity the argument must be higher or equal to</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an argument that must be higher or equal to the specified quantity</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.ArgumentMustBeHigherOrEqualTo(System.String,System.Decimal)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an argument that must be higher or equal to the specified quantity
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="quantity">The quantity the argument must be higher or equal to</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an argument that must be higher or equal to the specified quantity</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.ArgumentMustBeLowerOrEqualTo(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an argument that must be lower or equal to the specified quantity
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="quantity">The quantity the argument must be lower or equal to</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an argument that must be lower or equal to the specified quantity</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.ArgumentMustBeLowerOrEqualTo(System.String,System.Double)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an argument that must be lower or equal to the specified quantity
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="quantity">The quantity the argument must be lower or equal to</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an argument that must be lower or equal to the specified quantity</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.ArgumentMustBeLowerOrEqualTo(System.String,System.Decimal)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an argument that must be lower or equal to the specified quantity
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="quantity">The quantity the argument must be lower or equal to</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an argument that must be lower or equal to the specified quantity</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.ArgumentMustBeEarlierThan(System.String,System.TimeSpan)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an argument that must be lower than the specified time
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="time">The time the argument must be lower than</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an argument that must be lower than the specified time</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.ArgumentMustBeLaterThan(System.String,System.TimeSpan)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an argument that must be higher than the specified time
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="time">The time the argument must be higher than</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an argument that must be higher than the specified time</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.ArgumentMustBeLaterThan(System.String,System.DateTime)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an argument that must be higher than the specified date
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="date">The date the argument must be higher than</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an argument that must be higher than the specified date</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.ArgumentMustHaveMinimumLengthOf(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an argument that doesn't have the minimum required length
            </summary>
            <param name="argumentName">The name of the argument that does not have the minimum required length</param>
            <param name="length">The minimum required length</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an argument that doesn't have the minimum required length</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.ArgumentMustHaveMaximumLengthOf(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an argument has a length higher than the maximum authorized length
            </summary>
            <param name="argumentName">The name of the argument has a length higher than the maximum authorized length</param>
            <param name="length">The minimum required length</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an argument has a length higher than the maximum authorized length</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.ArgumentMustBeComprisedBetweenIncluding(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an argument that must be comprised between the specified values
            </summary>
            <param name="argumentName">The argument's name</param>
            <param name="min">The minimum value</param>
            <param name="max">The maximum value</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainArgumentException"/> for an argument that must be comprised between the specified values</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.ArgumentMustBeNumeric(System.String)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainArgumentException"/> for a non-numeric argument
            </summary>
            <param name="argumentName">The argument's name</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainArgumentException"/> for a non-numeric argument</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.DeletionNotSupported(System.Type)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainException"/> thrown when deletion of the specified entity type is not supported
            </summary>
            <param name="entityType">The type of entity for which deletion is not supported</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainException"/> thrown when deletion of the specified entity type is not supported</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.EntityAlreadyExists(System.Type,System.Object,System.String)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainException"/> fired whenever an entity of the specified type already exists
            </summary>
            <param name="entityType">The type of entity that already exists</param>
            <param name="key">The key of the entity that already exists</param>
            <param name="keyProperty">The name of the entity's key property</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainException"/> fired whenever an entity of the specified type already exists</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.EntityAlreadyExists(System.String,System.Object,System.String)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainException"/> fired whenever an entity of the specified type already exists
            </summary>
            <param name="entityTypeName">The name of the type of entity that already exists</param>
            <param name="key">The key of the entity that already exists</param>
            <param name="keyProperty">The name of the entity's key property</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainException"/> fired whenever an entity of the specified type already exists</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.EntityAlreadyExists(System.Type,System.String[])">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainException"/> fired whenever an entity of the specified type already exists
            </summary>
            <param name="entityType">The type of entity that already exists</param>
            <param name="properties">An array containing the names of the properties of the entity that already exists</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainException"/> fired whenever an entity of the specified type already exists</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.EntityAlreadyExists(System.String,System.String[])">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainException"/> fired whenever an entity of the specified type already exists
            </summary>
            <param name="entityTypeName">The name of the type of entity that already exists</param>
            <param name="properties">An array containing the names of the properties of the entity that already exists</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainException"/> fired whenever an entity of the specified type already exists</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.FilteringNotAllowed(System.Type)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainException"/> thrown when filtering is not allowed for the specified entity type
            </summary>
            <param name="entityType">The entity type for which filtering is not allow</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainException"/></returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.InvalidCast(System.Type,System.Type)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainException"/> thrown when an invalid cast occured
            </summary>
            <param name="from">The type from which the cast occured</param>
            <param name="to">The type to which the cast occured</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainException"/></returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.MissingProperty(System.Type,System.String)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainException"/> thrown when a property cannot be found on a type
            </summary>
            <param name="type">The type that is missing the specified property</param>
            <param name="property">The property that is missing from the specified type</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainException"/></returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.NotSupported(System.Type,System.Object)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainException"/> thrown when an unsupported value has been supplied for the specified type
            </summary>
            <param name="type">The type for which an unsupported value has been supplied</param>
            <param name="value">The unsupported value</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainException"/> thrown when an unsupported value has been supplied for the specified type</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.NotSupported(System.String,System.Object)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainException"/> thrown when an unsupported value has been supplied for the specified type
            </summary>
            <param name="typeName">The name of the type for which an unsupported value has been supplied</param>
            <param name="value">The unsupported value</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainException"/> thrown when an unsupported value has been supplied for the specified type</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.NullReference(System.Type,System.Object,System.String)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainNullReferenceException"/> thrown when an entity of the specified type has not been found
            </summary>
            <param name="entityType">The type of the entity that could not be found</param>
            <param name="key">The key of the entity that could not be found</param>
            <param name="keyProperty">The name of the key property</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainException"/> thrown when an entity of the specified type has not been found</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.NullReference(System.String,System.Object,System.String)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainNullReferenceException"/> thrown when an entity of the specified type has not been found
            </summary>
            <param name="entityTypeName">The name of the type of the entity that could not be found</param>
            <param name="key">The key of the entity that could not be found</param>
            <param name="keyProperty">The name of the key property</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainException"/> thrown when an entity of the specified type has not been found</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.NullReference(System.Type,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainNullReferenceException"/> thrown when an entity of the specified type has not been found
            </summary>
            <param name="entityType">The type of the entity that could not be found</param>
            <param name="keyValues">An array containing the name/value pairs of the entity's keys</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainException"/> thrown when an entity of the specified type has not been found</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.NullReference(System.String,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainNullReferenceException"/> thrown when an entity of the specified type has not been found
            </summary>
            <param name="entityTypeName">The name of the type of the entity that could not be found</param>
            <param name="keyValues">An array containing the name/value pairs of the entity's keys</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainException"/> thrown when an entity of the specified type has not been found</returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.UnexpectedState(System.Type,System.Object,System.Object,System.String)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainException"/> thrown when an entity is in an unexpected state
            </summary>
            <param name="entityType">The type of entity that is in an unexpected state</param>
            <param name="key">The key of the entity that is in an unexpected state</param>
            <param name="state">The entity's state</param>
            <param name="keyProperty">The name of the entity's key property. Defaults to 'id'</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainException"/></returns>
        </member>
        <member name="M:Synapse.Domain.DomainException.UnexpectedValue(System.Type,System.Object,System.Object,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.DomainException"/> thrown when an entity has an unexpected value
            </summary>
            <param name="entityType">The type of entity that has an unexpected value</param>
            <param name="key">The key of the entity that is in an unexpected state</param>
            <param name="value">The entity's value</param>
            <param name="valueProperty">The name of the entity's property that has an unexpected value</param>
            <param name="keyProperty">The name of the entity's key property. Defaults to 'id'</param>
            <returns>A new <see cref="T:Synapse.Domain.DomainException"/></returns>
        </member>
        <member name="T:Synapse.Domain.DomainNullReferenceException">
            <summary>
            Represents a <see cref="T:Synapse.Domain.DomainException"/> thrown when the application failed to resolve a reference to an object
            </summary>
        </member>
        <member name="M:Synapse.Domain.DomainNullReferenceException.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.DomainNullReferenceException"/>
            </summary>
            <param name="message">The <see cref="T:System.Exception"/> message</param>
        </member>
        <member name="M:Synapse.Domain.DomainNullReferenceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.DomainNullReferenceException"/>
            </summary>
            <param name="message">The <see cref="T:System.Exception"/> message</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/></param>
        </member>
        <member name="T:Synapse.Domain.DomainValidationException">
            <summary>
            Represents a <see cref="T:Synapse.Domain.DomainException"/> thrown whenever the validation of an entity has failed
            </summary>
        </member>
        <member name="M:Synapse.Domain.DomainValidationException.#ctor(Synapse.Domain.Models.V1Error[])">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.DomainValidationException"/>
            </summary>
            <param name="errors">An array containing the <see cref="T:Synapse.Domain.Models.V1Error"/>s that describe the validation failures</param>
        </member>
        <member name="P:Synapse.Domain.DomainValidationException.ValidationErrors">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> containing the <see cref="T:Synapse.Domain.Models.V1Error"/>s that describe the validation failures
            </summary>
        </member>
        <member name="T:Synapse.Domain.Events.Triggers.V1TriggerCorrelationContextCreatedDomainEvent">
            <summary>
            Represents the <see cref="T:Synapse.Domain.IDomainEvent"/> fired whenever a new <see cref="T:Synapse.Domain.Models.V1CorrelationContext"/> for an existing <see cref="T:Synapse.Domain.Models.V1Trigger"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.Triggers.V1TriggerCorrelationContextCreatedDomainEvent.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.Triggers.V1TriggerCorrelationContextCreatedDomainEvent"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.Triggers.V1TriggerCorrelationContextCreatedDomainEvent.#ctor(System.String,Synapse.Domain.Models.V1CorrelationContext)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.Triggers.V1TriggerCorrelationContextCreatedDomainEvent"/>
            </summary>
            <param name="triggerId">The id of the <see cref="T:Synapse.Domain.Models.V1Trigger"/> the specified <see cref="T:Synapse.Domain.Models.V1CorrelationContext"/> has been created for</param>
            <param name="correlationContext">The <see cref="T:Synapse.Domain.Models.V1Trigger"/>'s newly created <see cref="T:Synapse.Domain.Models.V1CorrelationContext"/></param>
        </member>
        <member name="P:Synapse.Domain.Events.Triggers.V1TriggerCorrelationContextCreatedDomainEvent.CorrelationContext">
            <summary>
            Gets the <see cref="T:Synapse.Domain.Models.V1Trigger"/>'s newly created <see cref="T:Synapse.Domain.Models.V1CorrelationContext"/>
            </summary>
        </member>
        <member name="T:Synapse.Domain.Events.Triggers.V1TriggerCorrelationContextReleasedDomainEvent">
            <summary>
            Represents the <see cref="T:Synapse.Domain.IDomainEvent"/> fired whenever a <see cref="T:Synapse.Domain.Models.V1CorrelationContext"/> has been released by a <see cref="T:Synapse.Domain.Models.V1Trigger"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.Triggers.V1TriggerCorrelationContextReleasedDomainEvent.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.Triggers.V1TriggerCorrelationContextReleasedDomainEvent"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.Triggers.V1TriggerCorrelationContextReleasedDomainEvent.#ctor(System.String,System.Guid)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.Triggers.V1TriggerCorrelationContextReleasedDomainEvent"/>
            </summary>
            <param name="triggerId">The id of the <see cref="T:Synapse.Domain.Models.V1Trigger"/> that has released the specified <see cref="T:Synapse.Domain.Models.V1CorrelationContext"/></param>
            <param name="correlationContextId">The id of the <see cref="T:Synapse.Domain.Models.V1CorrelationContext"/> that has been released by the <see cref="T:Synapse.Domain.Models.V1Trigger"/></param>
        </member>
        <member name="P:Synapse.Domain.Events.Triggers.V1TriggerCorrelationContextReleasedDomainEvent.CorrelationContextId">
            <summary>
            Gets the id of the <see cref="T:Synapse.Domain.Models.V1CorrelationContext"/> that has been released by the <see cref="T:Synapse.Domain.Models.V1Trigger"/>
            </summary>
        </member>
        <member name="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceCloudEventCorrelatedDomainEvent">
            <summary>
            Represents the <see cref="T:Synapse.Domain.IDomainEvent"/> fired whenever an existing <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> has successfully correlated an incoming <see cref="T:CloudNative.CloudEvents.CloudEvent"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceCloudEventCorrelatedDomainEvent.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceCloudEventCorrelatedDomainEvent"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceCloudEventCorrelatedDomainEvent.#ctor(System.String,Synapse.Domain.Models.V1CloudEvent,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceCloudEventCorrelatedDomainEvent"/>
            </summary>
            <param name="workflowId">The id of the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> has correlated an incoming <see cref="T:CloudNative.CloudEvents.CloudEvent"/></param>
            <param name="e">The <see cref="T:Synapse.Domain.Models.V1CloudEvent"/> that has been correlated by the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/></param>
            <param name="contextAttributes">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the context attributes used to correlate the specified <see cref="T:CloudNative.CloudEvents.CloudEvent"/></param>
        </member>
        <member name="P:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceCloudEventCorrelatedDomainEvent.CloudEvent">
            <summary>
            Gets the <see cref="T:Synapse.Domain.Models.V1CloudEvent"/> that has been correlated by the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>
            </summary>
        </member>
        <member name="P:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceCloudEventCorrelatedDomainEvent.ContextAttributes">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the context attributes used to correlate the specified <see cref="T:CloudNative.CloudEvents.CloudEvent"/>
            </summary>
        </member>
        <member name="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceCreatedDomainEvent">
            <summary>
            Represents the <see cref="T:Synapse.Domain.IDomainEvent"/> fired whenever a new <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> has been created
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceCreatedDomainEvent.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceCreatedDomainEvent"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceCreatedDomainEvent.#ctor(System.String,System.String,System.Version,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceCreatedDomainEvent"/>
            </summary>
            <param name="id">The id of the newly created <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/></param>
            <param name="definitionId">The id of the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s <see cref="T:ServerlessWorkflow.Sdk.Models.WorkflowDefinition"/></param>
            <param name="definitionVersion">The version of the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s <see cref="T:ServerlessWorkflow.Sdk.Models.WorkflowDefinition"/></param>
            <param name="input">The newly created <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s input data</param>
        </member>
        <member name="P:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceCreatedDomainEvent.DefinitionId">
            <summary>
            Gets the id of the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s <see cref="T:ServerlessWorkflow.Sdk.Models.WorkflowDefinition"/>
            </summary>
        </member>
        <member name="P:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceCreatedDomainEvent.DefinitionVersion">
            <summary>
            Gets the version of the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s <see cref="T:ServerlessWorkflow.Sdk.Models.WorkflowDefinition"/>
            </summary>
        </member>
        <member name="P:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceCreatedDomainEvent.Input">
            <summary>
            Gets the newly created <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s input data
            </summary>
        </member>
        <member name="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceDeletedDomainEvent">
            <summary>
            Represents the <see cref="T:Synapse.Domain.IDomainEvent"/> fired whenever an existing <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> has been deleted
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceDeletedDomainEvent.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceDeletedDomainEvent"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceDeletedDomainEvent.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceDeletedDomainEvent"/>
            </summary>
            <param name="workflowId">The id of the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> that has been deleted</param>
        </member>
        <member name="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceDeployedDomainEvent">
            <summary>
            Represents the <see cref="T:Synapse.Domain.IDomainEvent"/> fired whenever an existing <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> has been deployed
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceDeployedDomainEvent.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceDeployedDomainEvent"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceDeployedDomainEvent.#ctor(System.String,k8s.Models.V1ObjectReference)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceDeployedDomainEvent"/>
            </summary>
            <param name="workflowId">The id of the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> has been deployed</param>
            <param name="pod">The <see cref="T:k8s.Models.V1ObjectReference"/> of the pod the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> has been deployed to</param>
        </member>
        <member name="P:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceDeployedDomainEvent.Pod">
            <summary>
            Gets the <see cref="T:k8s.Models.V1ObjectReference"/> of the pod the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> has been deployed to
            </summary>
        </member>
        <member name="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceExecutedDomainEvent">
            <summary>
            Represents the <see cref="T:Synapse.Domain.IDomainEvent"/> fired whenever an existing <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> has been executed
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceExecutedDomainEvent.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceExecutedDomainEvent"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceExecutedDomainEvent.#ctor(System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceExecutedDomainEvent"/>
            </summary>
            <param name="workflowId">The id of the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> that has been executed</param>
            <param name="output">The <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s output</param>
        </member>
        <member name="P:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceExecutedDomainEvent.Output">
            <summary>
            Gets the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s output
            </summary>
        </member>
        <member name="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceFaultedDomainEvent">
            <summary>
            Represents the <see cref="T:Synapse.Domain.IDomainEvent"/> fired whenever an existing <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> has faulted
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceFaultedDomainEvent.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceFaultedDomainEvent"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceFaultedDomainEvent.#ctor(System.String,System.Collections.Generic.IEnumerable{Synapse.Domain.Models.V1Error})">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceFaultedDomainEvent"/>
            </summary>
            <param name="workflowId">The id of the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> that has faulted</param>
            <param name="errors">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the <see cref="T:Synapse.Domain.Models.V1Error"/>s that have occured during the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s execution</param>
        </member>
        <member name="P:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceFaultedDomainEvent.Errors">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the <see cref="T:Synapse.Domain.Models.V1Error"/>s that have occured during the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s execution
            </summary>
        </member>
        <member name="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceInitializingDomainEvent">
            <summary>
            Represents the <see cref="T:Synapse.Domain.IDomainEvent"/> fired whenever an existing <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> is being initialized
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceInitializingDomainEvent.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceInitializingDomainEvent"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceInitializingDomainEvent.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceInitializingDomainEvent"/>
            </summary>
            <param name="workflowId">The id of the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> that is being initialized</param>
        </member>
        <member name="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceResumedDomainEvent">
            <summary>
            Represents the <see cref="T:Synapse.Domain.IDomainEvent"/> fired whenever an existing <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s execution has been resumed
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceResumedDomainEvent.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceResumedDomainEvent"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceResumedDomainEvent.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceResumedDomainEvent"/>
            </summary>
            <param name="workflowId">The id of the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> that has been resumed</param>
        </member>
        <member name="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceStartedDomainEvent">
            <summary>
            Represents the <see cref="T:Synapse.Domain.IDomainEvent"/> fired whenever an existing <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> starts
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceStartedDomainEvent.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceStartedDomainEvent"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceStartedDomainEvent.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceStartedDomainEvent"/>
            </summary>
            <param name="workflowId">The id of the newly created <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/></param>
        </member>
        <member name="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceSuspendedDomainEvent">
            <summary>
            Represents the <see cref="T:Synapse.Domain.IDomainEvent"/> fired whenever an existing <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> has been suspended
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceSuspendedDomainEvent.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceSuspendedDomainEvent"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceSuspendedDomainEvent.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceSuspendedDomainEvent"/>
            </summary>
            <param name="workflowId">The id of the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> that has been executed</param>
        </member>
        <member name="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceTerminatedDomainEvent">
            <summary>
            Represents the <see cref="T:Synapse.Domain.IDomainEvent"/> fired whenever an existing <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> has been terminated
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceTerminatedDomainEvent.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceTerminatedDomainEvent"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceTerminatedDomainEvent.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceTerminatedDomainEvent"/>
            </summary>
            <param name="workflowId">The id of the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> that has been terminated</param>
        </member>
        <member name="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceTimedOutDomainEvent">
            <summary>
            Represents the <see cref="T:Synapse.Domain.IDomainEvent"/> fired whenever an existing <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> has timed out
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceTimedOutDomainEvent.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceTimedOutDomainEvent"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceTimedOutDomainEvent.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceTimedOutDomainEvent"/>
            </summary>
            <param name="workflowId">The id of the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> that has timed out</param>
        </member>
        <member name="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceTransitionedDomainEvent">
            <summary>
            Represents the <see cref="T:Synapse.Domain.IDomainEvent"/> fired whenever an existing <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> has transitioned to a new <see cref="T:ServerlessWorkflow.Sdk.Models.StateDefinition"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceTransitionedDomainEvent.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceTransitionedDomainEvent"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceTransitionedDomainEvent.#ctor(System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceTransitionedDomainEvent"/>
            </summary>
            <param name="workflowId">The id of the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> that has transitioned to a new <see cref="T:ServerlessWorkflow.Sdk.Models.StateDefinition"/></param>
            <param name="stateName">The new <see cref="T:ServerlessWorkflow.Sdk.Models.StateDefinition"/> the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> has transitioned to</param>
        </member>
        <member name="P:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceTransitionedDomainEvent.StateName">
            <summary>
            Gets the new <see cref="T:ServerlessWorkflow.Sdk.Models.StateDefinition"/> the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> has transitioned to
            </summary>
        </member>
        <member name="T:Synapse.Domain.Events.Workflows.V1WorkflowProcessingFaulted">
            <summary>
            Represents the <see cref="T:Synapse.Domain.IDomainEvent"/> fired whenever the processing of a <see cref="T:Synapse.Domain.Models.V1Workflow"/> has faulted
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.Workflows.V1WorkflowProcessingFaulted.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.Workflows.V1WorkflowProcessingStarted"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.Workflows.V1WorkflowProcessingFaulted.#ctor(System.String,System.Collections.Generic.IEnumerable{Synapse.Domain.Models.V1Error})">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.Workflows.V1WorkflowProcessingFaulted"/>
            </summary>
            <param name="id">The id of the <see cref="T:Synapse.Domain.Models.V1Workflow"/> which's processing has faulted</param>
            <param name="errors">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the <see cref="T:Synapse.Domain.Models.V1Error"/>s that have occured during the processing of the <see cref="T:Synapse.Domain.Models.V1Workflow"/></param>
        </member>
        <member name="P:Synapse.Domain.Events.Workflows.V1WorkflowProcessingFaulted.Errors">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the <see cref="T:Synapse.Domain.Models.V1Error"/>s that have occured during the processing of the <see cref="T:Synapse.Domain.Models.V1Workflow"/>
            </summary>
        </member>
        <member name="T:Synapse.Domain.Events.Workflows.V1WorkflowProcessingStarted">
            <summary>
            Represents the <see cref="T:Synapse.Domain.IDomainEvent"/> fired whenever the processing of a <see cref="T:Synapse.Domain.Models.V1Workflow"/> has started
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.Workflows.V1WorkflowProcessingStarted.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.Workflows.V1WorkflowProcessingStarted"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.Workflows.V1WorkflowProcessingStarted.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.Workflows.V1WorkflowProcessingStarted"/>
            </summary>
            <param name="id">The id of the <see cref="T:Synapse.Domain.Models.V1Workflow"/> being processed</param>
        </member>
        <member name="T:Synapse.Domain.Events.Workflows.V1WorkflowValidationCompleted">
            <summary>
            Represents the <see cref="T:Synapse.Domain.IDomainEvent"/> fired whenever the validation of a <see cref="T:Synapse.Domain.Models.V1Workflow"/> has been completed
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.Workflows.V1WorkflowValidationCompleted.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.Workflows.V1WorkflowValidationCompleted"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Events.Workflows.V1WorkflowValidationCompleted.#ctor(System.String,System.Boolean,System.Collections.Generic.IEnumerable{Synapse.Domain.Models.V1Error})">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Events.Workflows.V1WorkflowValidationCompleted"/>
            </summary>
            <param name="id">The id of the <see cref="T:Synapse.Domain.Models.V1Workflow"/> which's validation has been completed</param>
            <param name="isValid">A boolean indicating whether or not the <see cref="T:Synapse.Domain.Models.V1Workflow"/> is valid</param>
            <param name="validationErrors">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the <see cref="T:Synapse.Domain.Models.V1Workflow"/> validation <see cref="T:Synapse.Domain.Models.V1Error"/>s</param>
        </member>
        <member name="P:Synapse.Domain.Events.Workflows.V1WorkflowValidationCompleted.IsValid">
            <summary>
            Gets a boolean indicating whether or not the <see cref="T:Synapse.Domain.Models.V1Workflow"/> is valid
            </summary>
        </member>
        <member name="P:Synapse.Domain.Events.Workflows.V1WorkflowValidationCompleted.ValidationErrors">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the <see cref="T:Synapse.Domain.Models.V1Workflow"/> validation <see cref="T:Synapse.Domain.Models.V1Error"/>s
            </summary>
        </member>
        <member name="T:Synapse.Domain.IAggregateRoot">
            <summary>
            Defines the fundamentals of an aggregate root
            </summary>
        </member>
        <member name="P:Synapse.Domain.IAggregateRoot.Id">
            <summary>
            Gets the <see cref="T:Synapse.Domain.IAggregateRoot"/>'s id
            </summary>
        </member>
        <member name="P:Synapse.Domain.IAggregateRoot.Version">
            <summary>
            Gets the <see cref="T:Synapse.Domain.IAggregateRoot"/>'s version
            </summary>
        </member>
        <member name="P:Synapse.Domain.IAggregateRoot.PendingEvents">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> containing the <see cref="T:Synapse.Domain.IAggregateRoot"/>'s pending <see cref="T:Synapse.Domain.IDomainEvent"/>
            </summary>
        </member>
        <member name="P:Synapse.Domain.IAggregateRoot.HasPatch">
            <summary>
            Gets a boolean indicating whether or not the <see cref="T:Synapse.Domain.IAggregateRoot"/> has a patch pending
            </summary>
        </member>
        <member name="P:Synapse.Domain.IAggregateRoot.HasStatusPatch">
            <summary>
            Gets a boolean indicating whether or not the <see cref="T:Synapse.Domain.IAggregateRoot"/> has a status patch pending
            </summary>
        </member>
        <member name="M:Synapse.Domain.IAggregateRoot.GetPatch">
            <summary>
            Gets the <see cref="T:Synapse.Domain.IAggregateRoot"/>'s patch
            </summary>
            <returns>The <see cref="T:Synapse.Domain.IAggregateRoot"/>'s patch</returns>
        </member>
        <member name="M:Synapse.Domain.IAggregateRoot.GetStatusPatch">
            <summary>
            Gets the <see cref="T:Synapse.Domain.IAggregateRoot"/>'s status patch
            </summary>
            <returns>The <see cref="T:Synapse.Domain.IAggregateRoot"/>'s status patch</returns>
        </member>
        <member name="M:Synapse.Domain.IAggregateRoot.ReplayEvents(Synapse.Domain.IDomainEvent[])">
            <summary>
            Replays the specified <see cref="T:Synapse.Domain.IDomainEvent"/>s
            </summary>
            <param name="events">An array containing the <see cref="T:Synapse.Domain.IDomainEvent"/>s to replay</param>
        </member>
        <member name="M:Synapse.Domain.IAggregateRoot.ClearPendingEvents">
            <summary>
            Clears pending <see cref="T:Synapse.Domain.IDomainEvent"/>s
            </summary>
        </member>
        <member name="T:Synapse.Domain.IDomainEvent">
            <summary>
            Defines the fundamentals of a domain event
            </summary>
        </member>
        <member name="P:Synapse.Domain.IDomainEvent.AggregateId">
            <summary>
            Gets the id of the <see cref="T:Synapse.Domain.IAggregateRoot"/> the <see cref="T:Synapse.Domain.IDomainEvent"/> applies to
            </summary>
        </member>
        <member name="P:Synapse.Domain.IDomainEvent.AggregateType">
            <summary>
            Gets the type of the <see cref="T:Synapse.Domain.IAggregateRoot"/> the <see cref="T:Synapse.Domain.IDomainEvent"/> applies to
            </summary>
        </member>
        <member name="P:Synapse.Domain.IDomainEvent.CreatedAt">
            <summary>
            Gets the date and time at which the <see cref="T:Synapse.Domain.IDomainEvent"/> has been created
            </summary>
        </member>
        <member name="T:Synapse.Domain.IDomainEvent`1">
            <summary>
            Defines the fundamentals of a domain event
            </summary>
            <typeparam name="TAggregate">The type of <see cref="T:Synapse.Domain.IAggregateRoot"/> the <see cref="T:Synapse.Domain.IDomainEvent`1"/> applies to</typeparam>
        </member>
        <member name="T:Synapse.Domain.Models.V1Error">
            <summary>
            Describes an error
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1Error.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Models.V1Error"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1Error.#ctor(System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Models.V1Error"/>
            </summary>
            <param name="code">The error's code</param>
            <param name="message">The error's message</param>
        </member>
        <member name="P:Synapse.Domain.Models.V1Error.Code">
            <summary>
            Gets the error's code
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1Error.Message">
            <summary>
            Gets the error's message
            </summary>
        </member>
        <member name="T:Synapse.Domain.Models.V1CloudEvent">
            <summary>
            Represents a wrapper for an encoded <see cref="T:CloudNative.CloudEvents.CloudEvent"/>
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1CloudEvent.Id">
            <summary>
            Gets the wrapped <see cref="T:CloudNative.CloudEvents.CloudEvent"/>'s id
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1CloudEvent.Type">
            <summary>
            Gets the wrapped <see cref="T:CloudNative.CloudEvents.CloudEvent"/>'s type
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1CloudEvent.Source">
            <summary>
            Gets the wrapped <see cref="T:CloudNative.CloudEvents.CloudEvent"/>'s source
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1CloudEvent.Attributes">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IDictionary`2"/> representing the wrapped <see cref="T:CloudNative.CloudEvents.CloudEvent"/>'s attributes
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1CloudEvent.TryGetAttribute(System.String,System.String@)">
            <summary>
            Attempts to retrieve the specified attribute
            </summary>
            <param name="key">The key of the attribute to retrieve</param>
            <param name="value">The attribute's value, if any</param>
            <returns>A boolean indicating whether or not the specified attribute could be retrieved</returns>
        </member>
        <member name="M:Synapse.Domain.Models.V1CloudEvent.Matches(ServerlessWorkflow.Sdk.Models.EventDefinition)">
            <summary>
            Determines whether or not the <see cref="T:Synapse.Domain.Models.V1CloudEvent"/> matches the specified <see cref="T:ServerlessWorkflow.Sdk.Models.EventDefinition"/>
            </summary>
            <param name="eventDefinition">The <see cref="T:ServerlessWorkflow.Sdk.Models.EventDefinition"/> to match</param>
            <returns>A boolean indicating whether or not the <see cref="T:Synapse.Domain.Models.V1CloudEvent"/> matches the specified <see cref="T:ServerlessWorkflow.Sdk.Models.EventDefinition"/></returns>
        </member>
        <member name="M:Synapse.Domain.Models.V1CloudEvent.ToCloudEvent(CloudNative.CloudEvents.ICloudEventFormatter)">
            <summary>
            Converts the <see cref="T:Synapse.Domain.Models.V1CloudEvent"/> into a new <see cref="T:CloudNative.CloudEvents.CloudEvent"/>
            </summary>
            <param name="formatter">The service used to format the <see cref="T:CloudNative.CloudEvents.CloudEvent"/></param>
            <returns>A new <see cref="T:CloudNative.CloudEvents.CloudEvent"/></returns>
        </member>
        <member name="M:Synapse.Domain.Models.V1CloudEvent.CreateFor(CloudNative.CloudEvents.CloudEvent,CloudNative.CloudEvents.ICloudEventFormatter)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.Models.V1CloudEvent"/> for the specified <see cref="T:CloudNative.CloudEvents.CloudEvent"/>
            </summary>
            <param name="e">The <see cref="T:CloudNative.CloudEvents.CloudEvent"/> to create a new <see cref="T:Synapse.Domain.Models.V1CloudEvent"/> for</param>
            <param name="formatter">The service used to encode the specified <see cref="T:CloudNative.CloudEvents.CloudEvent"/></param>
            <returns>A new <see cref="T:Synapse.Domain.Models.V1CloudEvent"/></returns>
        </member>
        <member name="T:Synapse.Domain.Models.V1CorrelationContext">
            <summary>
            Represents the context of a <see cref="T:CloudNative.CloudEvents.CloudEvent"/> correlation
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1CorrelationContext.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Models.V1CorrelationContext"/>
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1CorrelationContext.Id">
            <summary>
            Gets the <see cref="T:Synapse.Domain.Models.V1CorrelationContext"/>'s id
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1CorrelationContext.ContextAttributes">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IDictionary`2"/> containing the correlation context attribute mappings
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1CorrelationContext.BootstrapEvents">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IList`1"/> containing the <see cref="T:Synapse.Domain.Models.V1CorrelationContext"/> boostrap <see cref="T:Synapse.Domain.Models.V1CloudEvent"/>s
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1CorrelationContext.CorrelatesTo(CloudNative.CloudEvents.CloudEvent)">
            <summary>
            Determines whether or not the specified <see cref="T:CloudNative.CloudEvents.CloudEvent"/> correlates to the <see cref="T:Synapse.Domain.Models.V1CorrelationContext"/>
            </summary>
            <param name="e">The <see cref="T:CloudNative.CloudEvents.CloudEvent"/> to correlate</param>
            <returns>A boolean indicating whether or not the specified <see cref="T:CloudNative.CloudEvents.CloudEvent"/> correlates to the <see cref="T:Synapse.Domain.Models.V1CorrelationContext"/></returns>
        </member>
        <member name="M:Synapse.Domain.Models.V1CorrelationContext.Correlate(Synapse.Domain.Models.V1CloudEvent,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Correlates the specified <see cref="T:Synapse.Domain.Models.V1CloudEvent"/>
            </summary>
            <param name="e">The <see cref="T:Synapse.Domain.Models.V1CloudEvent"/> to correlate</param>
            <param name="contextAttributes">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the context attributes used to correlate the specified <see cref="T:Synapse.Domain.Models.V1CloudEvent"/></param>
            <param name="isBootstrapEvent">Determines whether or not the specified <see cref="T:CloudNative.CloudEvents.CloudEvent"/> is a boostrap event and should be persisted. Defaults to false</param>
        </member>
        <member name="M:Synapse.Domain.Models.V1CorrelationContext.CorrelateBoostrapEvent(CloudNative.CloudEvents.CloudEvent,System.Collections.Generic.IEnumerable{System.String},CloudNative.CloudEvents.ICloudEventFormatter)">
            <summary>
            Correlates the specified <see cref="T:CloudNative.CloudEvents.CloudEvent"/>
            </summary>
            <param name="e">The <see cref="T:CloudNative.CloudEvents.CloudEvent"/> to correlate</param>
            <param name="contextAttributes">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the context attributes used to correlate the specified <see cref="T:CloudNative.CloudEvents.CloudEvent"/></param>
            <param name="formatter">The service used to encode the specified <see cref="T:CloudNative.CloudEvents.CloudEvent"/></param>
        </member>
        <member name="M:Synapse.Domain.Models.V1CorrelationContext.CreateFor(CloudNative.CloudEvents.CloudEvent,System.Collections.Generic.IEnumerable{System.String},CloudNative.CloudEvents.ICloudEventFormatter)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.Models.V1CorrelationContext"/> for the specified bootstrap <see cref="T:CloudNative.CloudEvents.CloudEvent"/>
            </summary>
            <param name="e">The <see cref="T:CloudNative.CloudEvents.CloudEvent"/> that has bootstrapped the <see cref="T:Synapse.Domain.Models.V1CorrelationContext"/></param>
            <param name="contextAttributes">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the context attributes used to correlate <see cref="T:CloudNative.CloudEvents.CloudEvent"/>s</param>
            <param name="formatter">The service used to encode the specified <see cref="T:CloudNative.CloudEvents.CloudEvent"/></param>
            <returns>A new <see cref="T:Synapse.Domain.Models.V1CorrelationContext"/></returns>
        </member>
        <member name="T:Synapse.Domain.Models.V1EventFilter">
            <summary>
            Represents an object used to filter <see cref="T:CloudNative.CloudEvents.CloudEvent"/>s
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1EventFilter.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Models.V1EventFilter"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1EventFilter.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Models.V1EventFilter"/>
            </summary>
            <param name="contextAttributes">An <see cref="T:System.Collections.Generic.IDictionary`2"/> containing the context attributes to filter <see cref="T:CloudNative.CloudEvents.CloudEvent"/>s by</param>
        </member>
        <member name="P:Synapse.Domain.Models.V1EventFilter.ContextAttributes">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IDictionary`2"/> containing the context attributes to filter <see cref="T:CloudNative.CloudEvents.CloudEvent"/>s by
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1EventFilter.Correlations">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IDictionary`2"/> containing the attributes key/value to use when correlating an incoming <see cref="T:CloudNative.CloudEvents.CloudEvent"/> to the <see cref="T:Synapse.Domain.Models.V1Trigger"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1EventFilter.Filters(CloudNative.CloudEvents.CloudEvent)">
            <summary>
            Determines whether or not the <see cref="T:Synapse.Domain.Models.V1EventFilter"/> filters the specified <see cref="T:CloudNative.CloudEvents.CloudEvent"/>
            </summary>
            <param name="e">The <see cref="T:CloudNative.CloudEvents.CloudEvent"/> to filter</param>
            <returns>A boolean indicating whether or not the <see cref="T:Synapse.Domain.Models.V1EventFilter"/> filters the specified <see cref="T:CloudNative.CloudEvents.CloudEvent"/></returns>
        </member>
        <member name="M:Synapse.Domain.Models.V1EventFilter.Filters(Synapse.Domain.Models.V1CloudEvent)">
            <summary>
            Determines whether or not the <see cref="T:Synapse.Domain.Models.V1EventFilter"/> filters the specified <see cref="T:Synapse.Domain.Models.V1CloudEvent"/>
            </summary>
            <param name="e">The <see cref="T:Synapse.Domain.Models.V1CloudEvent"/> to filter</param>
            <returns>A boolean indicating whether or not the <see cref="T:Synapse.Domain.Models.V1EventFilter"/> filters the specified <see cref="T:Synapse.Domain.Models.V1CloudEvent"/></returns>
        </member>
        <member name="T:Synapse.Domain.Models.V1Trigger">
            <summary>
            Represents an instance of a <see cref="T:Synapse.Domain.Models.V1TriggerDefinition"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1Trigger.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Models.V1Trigger"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1Trigger.#ctor(Synapse.Domain.Models.V1TriggerSpec)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Models.V1Trigger"/>
            </summary>
            <param name="spec">The <see cref="T:Synapse.Domain.Models.V1Trigger"/>'s <see cref="T:Synapse.Domain.Models.V1TriggerSpec"/></param>
        </member>
        <member name="P:Synapse.Domain.Models.V1Trigger.Patch">
            <inheritdoc/>
        </member>
        <member name="P:Synapse.Domain.Models.V1Trigger.StatusPatch">
            <inheritdoc/>
        </member>
        <member name="M:Synapse.Domain.Models.V1Trigger.Initialize">
            <summary>
            Initializes the <see cref="T:Synapse.Domain.Models.V1Trigger"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1Trigger.TriggeredBy(CloudNative.CloudEvents.CloudEvent)">
            <summary>
            Determines whether or not the specified <see cref="T:CloudNative.CloudEvents.CloudEvent"/> matches one of the <see cref="T:Synapse.Domain.Models.V1Trigger"/>'s conditions
            </summary>
            <param name="e">The <see cref="T:CloudNative.CloudEvents.CloudEvent"/> to check</param>
            <returns>A boolean indicating whether or not the specified <see cref="T:CloudNative.CloudEvents.CloudEvent"/> matches one of the <see cref="T:Synapse.Domain.Models.V1Trigger"/>'s conditions</returns>
        </member>
        <member name="M:Synapse.Domain.Models.V1Trigger.TryFireIn(Synapse.Domain.Models.V1CorrelationContext)">
            <summary>
            Attempts to fire the <see cref="T:Synapse.Domain.Models.V1Trigger"/> in the specified <see cref="T:Synapse.Domain.Models.V1CorrelationContext"/>
            </summary>
            <param name="context">The <see cref="T:Synapse.Domain.Models.V1CorrelationContext"/> to attempt firing the <see cref="T:Synapse.Domain.Models.V1Trigger"/> in</param>
            <returns>A boolean indicating whether or not the <see cref="T:Synapse.Domain.Models.V1Trigger"/> fired in the specified <see cref="T:Synapse.Domain.Models.V1CorrelationContext"/></returns>
        </member>
        <member name="M:Synapse.Domain.Models.V1Trigger.GetMatchingConditionFor(CloudNative.CloudEvents.CloudEvent)">
            <summary>
            Gets the first matching <see cref="T:Synapse.Domain.Models.V1TriggerCondition"/> for the specified <see cref="T:CloudNative.CloudEvents.CloudEvent"/>
            </summary>
            <param name="e">The <see cref="T:CloudNative.CloudEvents.CloudEvent"/> to get the <see cref="T:Synapse.Domain.Models.V1TriggerCondition"/> for</param>
            <returns>The first matching <see cref="T:Synapse.Domain.Models.V1TriggerCondition"/> for the specified <see cref="T:CloudNative.CloudEvents.CloudEvent"/>, if any</returns>
        </member>
        <member name="M:Synapse.Domain.Models.V1Trigger.CreateCorrelationContextFor(CloudNative.CloudEvents.CloudEvent,System.Collections.Generic.IEnumerable{System.String},CloudNative.CloudEvents.ICloudEventFormatter)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.Models.V1CorrelationContext"/> for the specified <see cref="T:CloudNative.CloudEvents.CloudEvent"/>
            </summary>
            <param name="e">The <see cref="T:CloudNative.CloudEvents.CloudEvent"/> to create a new <see cref="T:Synapse.Domain.Models.V1CorrelationContext"/> for</param>
            <param name="contextAttributes">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the keys of the context attributes to use during correlation</param>
            <param name="formatter">The service used to encode the specified <see cref="T:CloudNative.CloudEvents.CloudEvent"/></param>
            <returns>A new <see cref="T:Synapse.Domain.Models.V1CorrelationContext"/></returns>
        </member>
        <member name="M:Synapse.Domain.Models.V1Trigger.Correlate(CloudNative.CloudEvents.CloudEvent,System.Collections.Generic.IEnumerable{System.String},CloudNative.CloudEvents.ICloudEventFormatter)">
            <summary>
            Correlates the specified <see cref="T:CloudNative.CloudEvents.CloudEvent"/>
            </summary>
            <param name="e">The <see cref="T:CloudNative.CloudEvents.CloudEvent"/> to correlate</param>
            <param name="contextAttributes">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the context attributes used to correlate the specified <see cref="T:CloudNative.CloudEvents.CloudEvent"/></param>
            <param name="formatter">The <see cref="T:CloudNative.CloudEvents.ICloudEventFormatter"/> used to encode the specified <see cref="T:CloudNative.CloudEvents.CloudEvent"/></param>
        </member>
        <member name="M:Synapse.Domain.Models.V1Trigger.ReleaseContext(Synapse.Domain.Models.V1CorrelationContext)">
            <summary>
            Releases the specified <see cref="T:Synapse.Domain.Models.V1CorrelationContext"/>
            </summary>
            <param name="context">The <see cref="T:Synapse.Domain.Models.V1CorrelationContext"/> to release</param>
        </member>
        <member name="M:Synapse.Domain.Models.V1Trigger.On(Synapse.Domain.Events.Triggers.V1TriggerCorrelationContextCreatedDomainEvent)">
            <summary>
            Handles the specified <see cref="T:Synapse.Domain.Events.Triggers.V1TriggerCorrelationContextCreatedDomainEvent"/>
            </summary>
            <param name="e">The <see cref="T:Synapse.Domain.Events.Triggers.V1TriggerCorrelationContextCreatedDomainEvent"/> to handle</param>
        </member>
        <member name="M:Synapse.Domain.Models.V1Trigger.On(Synapse.Domain.Events.Triggers.V1TriggerCorrelationContextReleasedDomainEvent)">
            <summary>
            Handles the specified <see cref="T:Synapse.Domain.Events.Triggers.V1TriggerCorrelationContextReleasedDomainEvent"/>
            </summary>
            <param name="e">The <see cref="T:Synapse.Domain.Events.Triggers.V1TriggerCorrelationContextReleasedDomainEvent"/> to handle</param>
        </member>
        <member name="T:Synapse.Domain.Models.V1TriggerCondition">
            <summary>
            Represents the object used to configure a <see cref="T:Synapse.Domain.Models.V1Trigger"/> condition
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1TriggerCondition.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Models.V1TriggerCondition"/>
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1TriggerCondition.Filters">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IList`1"/> containing the <see cref="T:Synapse.Domain.Models.V1EventFilter"/> used to configure the filtering of <see cref="T:CloudNative.CloudEvents.CloudEvent"/>s that can fire the <see cref="T:Synapse.Domain.Models.V1Trigger"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1TriggerCondition.Matches(CloudNative.CloudEvents.CloudEvent)">
            <summary>
            Determines whether or not the <see cref="T:Synapse.Domain.Models.V1TriggerCondition"/> matches the specified <see cref="T:CloudNative.CloudEvents.CloudEvent"/>
            </summary>
            <param name="e">The <see cref="T:CloudNative.CloudEvents.CloudEvent"/> to match</param>
            <returns>A boolean indicating whether or not the <see cref="T:Synapse.Domain.Models.V1TriggerCondition"/> matches the specified <see cref="T:CloudNative.CloudEvents.CloudEvent"/></returns>
        </member>
        <member name="M:Synapse.Domain.Models.V1TriggerCondition.Matches(Synapse.Domain.Models.V1CorrelationContext)">
            <summary>
            Determines whether or not the <see cref="T:Synapse.Domain.Models.V1TriggerCondition"/> matches the specified <see cref="T:Synapse.Domain.Models.V1CorrelationContext"/>
            </summary>
            <param name="context">The <see cref="T:Synapse.Domain.Models.V1CorrelationContext"/> to match</param>
            <returns>A boolean indicating whether or not the <see cref="T:Synapse.Domain.Models.V1TriggerCondition"/> matches the specified <see cref="T:Synapse.Domain.Models.V1CorrelationContext"/></returns>
        </member>
        <member name="M:Synapse.Domain.Models.V1TriggerCondition.GetMatchingFilterFor(CloudNative.CloudEvents.CloudEvent)">
            <summary>
            Gets the matching <see cref="T:Synapse.Domain.Models.V1EventFilter"/> for the specified <see cref="T:CloudNative.CloudEvents.CloudEvent"/>
            </summary>
            <param name="e">The <see cref="T:CloudNative.CloudEvents.CloudEvent"/> to get the matching <see cref="T:Synapse.Domain.Models.V1EventFilter"/> for</param>
            <returns>The matching <see cref="T:Synapse.Domain.Models.V1EventFilter"/> for the specified <see cref="T:CloudNative.CloudEvents.CloudEvent"/>, if any</returns>
        </member>
        <member name="T:Synapse.Domain.Models.V1TriggerDefinition">
            <summary>
            Represents a <see cref="T:Neuroglia.K8s.CustomResourceDefinition"/> used to represent an event trigger
            </summary>
        </member>
        <member name="F:Synapse.Domain.Models.V1TriggerDefinition.KIND">
            <summary>
            Gets the <see cref="T:Synapse.Domain.Models.V1TriggerDefinition"/>'s kind
            </summary>
        </member>
        <member name="F:Synapse.Domain.Models.V1TriggerDefinition.PLURAL">
            <summary>
            Gets the <see cref="T:Synapse.Domain.Models.V1TriggerDefinition"/>'s plural
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1TriggerDefinition.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Models.V1TriggerDefinition"/>
            </summary>
        </member>
        <member name="T:Synapse.Domain.Models.V1TriggerOutcome">
            <summary>
            Represents the object used to configure the outcome of a <see cref="T:Synapse.Domain.Models.V1Trigger"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1TriggerOutcome.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Models.V1TriggerOutcome"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1TriggerOutcome.#ctor(Synapse.V1TriggerOutcomeType,Synapse.Domain.Models.V1WorkflowReference)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Models.V1TriggerOutcome"/>
            </summary>
            <param name="type">The <see cref="T:Synapse.Domain.Models.V1TriggerOutcome"/>'s type</param>
            <param name="workflow">A reference to the <see cref="T:Synapse.Domain.Models.V1Workflow"/> to run or resume</param>
        </member>
        <member name="M:Synapse.Domain.Models.V1TriggerOutcome.#ctor(Synapse.V1TriggerOutcomeType,Synapse.Domain.Models.V1WorkflowReference,System.String)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Models.V1TriggerOutcome"/>
            </summary>
            <param name="type">The <see cref="T:Synapse.Domain.Models.V1TriggerOutcome"/>'s type</param>
            <param name="workflow">A reference to the <see cref="T:Synapse.Domain.Models.V1Workflow"/> to run or resume</param>
            <param name="workflowInstance">The name of the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> to run or resume</param>
        </member>
        <member name="P:Synapse.Domain.Models.V1TriggerOutcome.Type">
            <summary>
            Gets the <see cref="T:Synapse.Domain.Models.V1TriggerOutcome"/>'s type
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1TriggerOutcome.Workflow">
            <summary>
            Gets a reference to the <see cref="T:Synapse.Domain.Models.V1Workflow"/> to run or resume
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1TriggerOutcome.WorkflowInstance">
            <summary>
            Gets the name of the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> to run or resume
            </summary>
        </member>
        <member name="T:Synapse.Domain.Models.V1TriggerSpec">
            <summary>
            Represents the spec of a <see cref="T:Synapse.Domain.Models.V1Trigger"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1TriggerSpec.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Models.V1TriggerSpec"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1TriggerSpec.#ctor(Synapse.V1TriggerCorrelationMode,Synapse.V1TriggerConditionType,Synapse.Domain.Models.V1TriggerOutcome)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Models.V1TriggerSpec"/>
            </summary>
            <param name="correlationMode">The <see cref="T:Synapse.Domain.Models.V1Trigger"/>'s correlation mode</param>
            <param name="conditionType">The <see cref="T:Synapse.Domain.Models.V1Trigger"/>'s condition type</param>
            <param name="outcome">The <see cref="T:Synapse.Domain.Models.V1TriggerOutcome"/> used to configure the <see cref="T:Synapse.Domain.Models.V1Trigger"/>'s outcome</param>
        </member>
        <member name="M:Synapse.Domain.Models.V1TriggerSpec.#ctor(Synapse.V1TriggerCorrelationMode,Synapse.V1TriggerConditionType,Synapse.Domain.Models.V1TriggerOutcome,Synapse.Domain.Models.V1TriggerCondition[])">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Models.V1TriggerSpec"/>
            </summary>
            <param name="correlationMode">The <see cref="T:Synapse.Domain.Models.V1Trigger"/>'s correlation mode</param>
            <param name="conditionType">The <see cref="T:Synapse.Domain.Models.V1Trigger"/>'s condition type</param>
            <param name="outcome">The <see cref="T:Synapse.Domain.Models.V1TriggerOutcome"/> used to configure the <see cref="T:Synapse.Domain.Models.V1Trigger"/>'s outcome</param>
            <param name="conditions">An array containing the <see cref="T:Synapse.Domain.Models.V1Trigger"/>'s <see cref="T:Synapse.Domain.Models.V1TriggerCondition"/>s</param>
        </member>
        <member name="P:Synapse.Domain.Models.V1TriggerSpec.CorrelationMode">
            <summary>
            Gets the <see cref="T:Synapse.Domain.Models.V1Trigger"/>'s correlation mode
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1TriggerSpec.ConditionType">
            <summary>
            Gets the <see cref="T:Synapse.Domain.Models.V1Trigger"/>'s condition type
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1TriggerSpec.Conditions">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IList`1"/> containing the <see cref="T:Synapse.Domain.Models.V1Trigger"/>'s conditions
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1TriggerSpec.Outcome">
            <summary>
            Gets the <see cref="T:Synapse.Domain.Models.V1TriggerOutcome"/> used to configure the <see cref="T:Synapse.Domain.Models.V1Trigger"/>'s outcome
            </summary>
        </member>
        <member name="T:Synapse.Domain.Models.V1TriggerStatus">
            <summary>
            Represents the status of a <see cref="T:Synapse.Domain.Models.V1Trigger"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1TriggerStatus.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Models.V1TriggerStatus"/>
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1TriggerStatus.CorrelationContexts">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IList`1"/> containing the <see cref="T:Synapse.Domain.Models.V1Trigger"/>'s <see cref="T:Synapse.Domain.Models.V1CorrelationContext"/>s
            </summary>
        </member>
        <member name="T:Synapse.Domain.Models.V1WorkflowActivity">
            <summary>
            Represents a <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> activity
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowActivity.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowActivity.#ctor(Synapse.V1WorkflowActivityType,Synapse.Domain.Models.V1WorkflowInstance,Newtonsoft.Json.Linq.JToken,Synapse.Domain.Models.V1WorkflowActivity)">
            <summary>
             Initializes a new <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>
            </summary>
            <param name="type">The <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>'s type</param>
            <param name="workflowInstance">The <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> belongs to</param>
            <param name="data">The <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>'s data</param>
            <param name="parent">The <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>'s parent, if any</param>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowActivity.#ctor(Synapse.V1WorkflowActivityType,Synapse.Domain.Models.V1WorkflowInstance,Newtonsoft.Json.Linq.JToken,Synapse.Domain.Models.V1WorkflowActivityMetadata,Synapse.Domain.Models.V1WorkflowActivity)">
            <summary>
             Initializes a new <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>
            </summary>
            <param name="type">The <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>'s type</param>
            <param name="workflowInstance">The <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> belongs to</param>
            <param name="data">The <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>'s data</param>
            <param name="metadata">The <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>'s metadata</param>
            <param name="parent">The <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>'s parent, if any</param>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowActivity.Id">
            <summary>
            Gets the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>'s id
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowActivity.Type">
            <summary>
            Gets the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>'s type
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowActivity.Status">
            <summary>
            Gets the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>'s status
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowActivity.WorkflowInstance">
            <summary>
            Gets the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>'s instance name
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowActivity.ParentId">
            <summary>
            Gets the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>'s parent id, if any
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowActivity.CreatedAt">
            <summary>
            Gets the date and time the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> has been created at
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowActivity.InitializedAt">
            <summary>
            Gets the date and time the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> has been initialized at
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowActivity.StartedAt">
            <summary>
            Gets the date and time the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> has been started at
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowActivity.ExecutedAt">
            <summary>
            Gets the date and time the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> has been executed at
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowActivity.Data">
            <summary>
            Gets the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>'s data
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowActivity.Metadata">
            <summary>
            Gets the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>'s metadata
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowActivity.Result">
            <summary>
            Gets the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>'s result
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowActivity.Interruptions">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> containing the <see cref="T:Synapse.Domain.Models.V1ExecutionInterruption"/>s that have occured during the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>'s execution
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowActivity.Errors">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> containing the <see cref="T:Synapse.Domain.Models.V1Error"/>s that have occured during the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>'s execution
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowActivity.IsActive">
            <summary>
            Gets a boolean indicating whether or not the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> is active
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowActivity.Patch">
            <summary>
            Gets the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>'s <see cref="T:Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowActivity.GetPatch">
            <summary>
            Gets the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>'s <see cref="T:Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument"/>
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowActivity.HasPatch">
            <summary>
            Gets a boolean indicating whether or not the the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> has a patch pending
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowActivity.Initialize">
            <summary>
            Initializes the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowActivity.Process">
            <summary>
            Processes the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowActivity.Suspend">
            <summary>
            Suspends the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowActivity.Resume">
            <summary>
            Resumes the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowActivity.Fault(System.Exception)">
            <summary>
            Faults the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> that has been thrown during the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>'s execution</param>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowActivity.Terminate">
            <summary>
            Terminates the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowActivity.TimeOut">
            <summary>
            Times out the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowActivity.UpdateData(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Updates the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>'s data
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowActivity.SetResult(Synapse.Domain.Models.V1WorkflowExecutionResult)">
            <summary>
            Sets the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>'s execution result
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowActivity.State(Synapse.Domain.Models.V1WorkflowInstance,ServerlessWorkflow.Sdk.Models.StateDefinition,Newtonsoft.Json.Linq.JToken,Synapse.Domain.Models.V1WorkflowActivity)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> for the specified <see cref="T:ServerlessWorkflow.Sdk.Models.StateDefinition"/>
            </summary>
            <param name="workflowInstance">The <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> that owns the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> to create</param>
            <param name="state">The <see cref="T:ServerlessWorkflow.Sdk.Models.StateDefinition"/> to create the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> for</param>
            <param name="input">The input data</param>
            <param name="parent">The parent <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>, if any</param>
            <returns>A new <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/></returns>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowActivity.Transition(Synapse.Domain.Models.V1WorkflowInstance,ServerlessWorkflow.Sdk.Models.StateDefinition,Newtonsoft.Json.Linq.JToken,Synapse.Domain.Models.V1WorkflowActivity)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> that execute a transition from the specified state
            </summary>
            <param name="workflowInstance">The <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> that owns the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> to create</param>
            <param name="state">The <see cref="T:ServerlessWorkflow.Sdk.Models.StateDefinition"/> to transition from</param>
            <param name="input">The input data</param>
            <param name="parent">The parent <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>, if any</param>
            <returns>A new <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/></returns>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowActivity.Transition(Synapse.Domain.Models.V1WorkflowInstance,ServerlessWorkflow.Sdk.Models.SwitchStateDefinition,System.String,Newtonsoft.Json.Linq.JToken,Synapse.Domain.Models.V1WorkflowActivity)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> that execute a transition from the specified <see cref="T:ServerlessWorkflow.Sdk.Models.SwitchStateDefinition"/>'s condition
            </summary>
            <param name="workflowInstance">The <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> that owns the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> to create</param>
            <param name="state">The <see cref="T:ServerlessWorkflow.Sdk.Models.SwitchStateDefinition"/> to transition from</param>
            <param name="caseName">The name of the <see cref="T:ServerlessWorkflow.Sdk.Models.SwitchCaseDefinition"/> to process the <see cref="T:ServerlessWorkflow.Sdk.Models.TransitionDefinition"/> for</param>
            <param name="input">The input data</param>
            <param name="parent">The parent <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>, if any</param>
            <returns>A new <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/></returns>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowActivity.End(Synapse.Domain.Models.V1WorkflowInstance,ServerlessWorkflow.Sdk.Models.StateDefinition,Newtonsoft.Json.Linq.JToken,Synapse.Domain.Models.V1WorkflowActivity)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> for the specified <see cref="T:ServerlessWorkflow.Sdk.Models.EndDefinition"/>
            </summary>
            <param name="workflowInstance">The <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> that owns the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> to create</param>
            <param name="state">The <see cref="T:ServerlessWorkflow.Sdk.Models.StateDefinition"/> that owns the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> to create</param>
            <param name="input">The input data</param>
            <param name="parent">The parent <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>, if any</param>
            <returns>A new <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/></returns>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowActivity.End(Synapse.Domain.Models.V1WorkflowInstance,ServerlessWorkflow.Sdk.Models.SwitchStateDefinition,System.String,Newtonsoft.Json.Linq.JToken,Synapse.Domain.Models.V1WorkflowActivity)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> for the specified <see cref="T:ServerlessWorkflow.Sdk.Models.EndDefinition"/>
            </summary>
            <param name="workflowInstance">The <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> that owns the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> to create</param>
            <param name="state">The <see cref="T:ServerlessWorkflow.Sdk.Models.StateDefinition"/> that owns the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> to create</param>
            <param name="caseName">The name of the <see cref="T:ServerlessWorkflow.Sdk.Models.SwitchCaseDefinition"/> to process the <see cref="T:ServerlessWorkflow.Sdk.Models.EndDefinition"/> for</param>
            <param name="input">The input data</param>
            <param name="parent">The parent <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>, if any</param>
            <returns>A new <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/></returns>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowActivity.Action(Synapse.Domain.Models.V1WorkflowInstance,ServerlessWorkflow.Sdk.Models.StateDefinition,ServerlessWorkflow.Sdk.Models.ActionDefinition,Newtonsoft.Json.Linq.JToken,Synapse.Domain.Models.V1WorkflowActivity)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> for the specified <see cref="T:ServerlessWorkflow.Sdk.Models.ActionDefinition"/>
            </summary>
            <param name="workflowInstance">The <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> that owns the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> to create</param>
            <param name="state">The <see cref="T:ServerlessWorkflow.Sdk.Models.StateDefinition"/> that owns the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> to create</param>
            <param name="action">The <see cref="T:ServerlessWorkflow.Sdk.Models.ActionDefinition"/> to create the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> for</param>
            <param name="input">The input data</param>
            <param name="parent">The parent <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/></param>
            <returns>A new <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/></returns>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowActivity.Action(Synapse.Domain.Models.V1WorkflowInstance,ServerlessWorkflow.Sdk.Models.EventStateDefinition,ServerlessWorkflow.Sdk.Models.EventStateTriggerDefinition,ServerlessWorkflow.Sdk.Models.ActionDefinition,Newtonsoft.Json.Linq.JToken,Synapse.Domain.Models.V1WorkflowActivity)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> for the specified <see cref="T:ServerlessWorkflow.Sdk.Models.ActionDefinition"/>
            </summary>
            <param name="workflowInstance">The <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> that owns the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> to create</param>
            <param name="state">The <see cref="T:ServerlessWorkflow.Sdk.Models.EventStateDefinition"/> that owns the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> to create</param>
            <param name="trigger">The <see cref="T:ServerlessWorkflow.Sdk.Models.EventStateTriggerDefinition"/> the <see cref="T:ServerlessWorkflow.Sdk.Models.ActionDefinition"/> to process belongs to</param>
            <param name="action">The <see cref="T:ServerlessWorkflow.Sdk.Models.ActionDefinition"/> to create the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> for</param>
            <param name="input">The input data</param>
            <param name="parent">The parent <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/></param>
            <returns>A new <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/></returns>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowActivity.EventStateTrigger(Synapse.Domain.Models.V1WorkflowInstance,ServerlessWorkflow.Sdk.Models.EventStateDefinition,ServerlessWorkflow.Sdk.Models.EventStateTriggerDefinition,Newtonsoft.Json.Linq.JToken,Synapse.Domain.Models.V1WorkflowActivity)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> for the specified <see cref="T:ServerlessWorkflow.Sdk.Models.EventStateTriggerDefinition"/>
            </summary>
            <param name="workflowInstance">The <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> that owns the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> to create</param>
            <param name="state">The <see cref="T:ServerlessWorkflow.Sdk.Models.EventStateDefinition"/> the <see cref="T:ServerlessWorkflow.Sdk.Models.EventStateTriggerDefinition"/> to process belongs to</param>
            <param name="trigger">The <see cref="T:ServerlessWorkflow.Sdk.Models.EventStateTriggerDefinition"/> to create the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> for</param>
            <param name="input">The input data</param>
            <param name="parent">The parent <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/></param>
            <returns>A new <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/></returns>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowActivity.ConsumeEvent(Synapse.Domain.Models.V1WorkflowInstance,ServerlessWorkflow.Sdk.Models.StateDefinition,System.String,Newtonsoft.Json.Linq.JToken,Synapse.Domain.Models.V1WorkflowActivity)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> for the specified <see cref="T:ServerlessWorkflow.Sdk.Models.EventDefinition"/> to consume
            </summary>
            <param name="workflowInstance">The <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> that owns the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> to create</param>
            <param name="state">The <see cref="T:ServerlessWorkflow.Sdk.Models.StateDefinition"/> the <see cref="T:ServerlessWorkflow.Sdk.Models.EventDefinition"/> to process belongs to</param>
            <param name="eventRef">The reference of the <see cref="T:ServerlessWorkflow.Sdk.Models.EventDefinition"/> to consume</param>
            <param name="input">The input data</param>
            <param name="parent">The parent <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/></param>
            <returns>A new <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/></returns>
        </member>
        <member name="T:Synapse.Domain.Models.V1WorkflowExecutionResult">
            <summary>
            Represents the result of a <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>'s execution
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowExecutionResult.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Models.V1WorkflowExecutionResult"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowExecutionResult.#ctor(Synapse.V1WorkflowExecutionResultType)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Models.V1WorkflowExecutionResult"/>
            </summary>
            <param name="type">The <see cref="T:Synapse.Domain.Models.V1WorkflowExecutionResult"/>'s type</param>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowExecutionResult.#ctor(Synapse.V1WorkflowExecutionResultType,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Models.V1WorkflowExecutionResult"/>
            </summary>
            <param name="type">The <see cref="T:Synapse.Domain.Models.V1WorkflowExecutionResult"/>'s type</param>
            <param name="output">The <see cref="T:Synapse.Domain.Models.V1WorkflowExecutionResult"/>'s output</param>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowExecutionResult.Type">
            <summary>
            Gets the <see cref="T:Synapse.Domain.Models.V1WorkflowExecutionResult"/>'s type
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowExecutionResult.Output">
            <summary>
            Gets the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>'s output
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowExecutionResult.Next(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.Models.V1WorkflowExecutionResult"/> of type <see cref="F:Synapse.V1WorkflowExecutionResultType.Next"/>
            </summary>
            <param name="output">The data to output</param>
            <returns>A new <see cref="T:Synapse.Domain.Models.V1WorkflowExecutionResult"/></returns>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowExecutionResult.End(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.Models.V1WorkflowExecutionResult"/> of type <see cref="F:Synapse.V1WorkflowExecutionResultType.End"/>
            </summary>
            <param name="output">The data to output</param>
            <returns>A new <see cref="T:Synapse.Domain.Models.V1WorkflowExecutionResult"/></returns>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowExecutionResult.Terminate">
            <summary>
            Creates a new <see cref="T:Synapse.Domain.Models.V1WorkflowExecutionResult"/> of type <see cref="F:Synapse.V1WorkflowExecutionResultType.Terminate"/>
            </summary>
            <returns>A new <see cref="T:Synapse.Domain.Models.V1WorkflowExecutionResult"/></returns>
        </member>
        <member name="T:Synapse.Domain.Models.V1ExecutionInterruption">
            <summary>
            Represents the suspension of a workflow instance's execution
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1ExecutionInterruption.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Models.V1ExecutionInterruption"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1ExecutionInterruption.#ctor(System.DateTimeOffset)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Models.V1ExecutionInterruption"/>
            </summary>
            <param name="interruptedAt">The UTC date and time at which the execution has been suspended</param>
        </member>
        <member name="P:Synapse.Domain.Models.V1ExecutionInterruption.SuspendedAt">
            <summary>
            Gets the UTC date and time at which the execution has been suspended
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1ExecutionInterruption.ResumedAt">
            <summary>
            Gets the UTC date and time at which the execution has been resumed
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1ExecutionInterruption.HasBeenResumed">
            <summary>
            Gets a boolean indicating whether or not the execution has been resumed
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1ExecutionInterruption.Resume(System.DateTimeOffset)">
            <summary>
            Resumes the workflow execution
            </summary>
            <param name="resumedAt">The UTC date and time at which the execution has been resumed</param>
        </member>
        <member name="T:Synapse.Domain.Models.V1WorkflowInstance">
            <summary>
            Represents an instance of a <see cref="T:Synapse.Domain.Models.V1WorkflowDefinition"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstance.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstance.#ctor(Synapse.Domain.Models.V1WorkflowInstanceSpec)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>
            </summary>
            <param name="spec">The <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s spec</param>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowInstance.Patch">
            <inheritdoc/>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowInstance.StatusPatch">
            <inheritdoc/>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstance.Initialize">
            <summary>
            Initializes the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstance.SetVersion(System.String)">
            <summary>
            Sets the version of the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s <see cref="T:ServerlessWorkflow.Sdk.Models.WorkflowDefinition"/>
            </summary>
            <param name="version">The version of the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s <see cref="T:ServerlessWorkflow.Sdk.Models.WorkflowDefinition"/></param>
            <returns>A boolean indicating whether or not the operation was successfull</returns>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstance.Label">
            <summary>
            Labels the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>
            </summary>
            <returns>A boolean indicating whether or not the operation was successfull</returns>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstance.Deploy(System.String)">
            <summary>
            Deploys the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>
            </summary>
            <param name="podName">The name of the <see cref="T:k8s.Models.V1Pod"/> to deploy the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> to</param>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstance.Start">
            <summary>
            Starts the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstance.Suspend">
            <summary>
            Suspends the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s execution
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstance.Execute">
            <summary>
            Executes the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstance.Correlate(Synapse.Domain.Models.V1CloudEvent,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Correlates the specified <see cref="T:CloudNative.CloudEvents.CloudEvent"/>
            </summary>
            <param name="e">The <see cref="T:Synapse.Domain.Models.V1CloudEvent"/> to correlate</param>
            <param name="contextAttributes">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the context attributes used to correlate the specified <see cref="T:Synapse.Domain.Models.V1CloudEvent"/></param>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstance.ConsumeBootstrapEvent(Synapse.Domain.Models.V1CloudEvent)">
            <summary>
            Consumes the specified <see cref="T:Synapse.Domain.Models.V1CloudEvent"/>
            </summary>
            <param name="e">The <see cref="T:Synapse.Domain.Models.V1CloudEvent"/> to consume</param>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstance.AddActivity(Synapse.Domain.Models.V1WorkflowActivity)">
            <summary>
            Adds the specified <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> to the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s activity log
            </summary>
            <param name="activity">The <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> to add</param>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstance.InitializeActivity(Synapse.Domain.Models.V1WorkflowActivity)">
            <summary>
            Initializes the specified <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>
            </summary>
            <param name="activity">The <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> to initialize</param>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstance.ProcessActivity(Synapse.Domain.Models.V1WorkflowActivity)">
            <summary>
            Processes the specified <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>
            </summary>
            <param name="activity">The <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> to process</param>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstance.SuspendActivity(Synapse.Domain.Models.V1WorkflowActivity)">
            <summary>
            Suspends the specified <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>
            </summary>
            <param name="activity">The <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> to suspend</param>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstance.FaultActivity(Synapse.Domain.Models.V1WorkflowActivity,System.Exception)">
            <summary>
            Faults the specified <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>
            </summary>
            <param name="activity">The <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> that has faulted</param>
            <param name="ex">The <see cref="T:System.Exception"/> that has occured during the specified <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>'s processing</param>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstance.TerminateActivity(Synapse.Domain.Models.V1WorkflowActivity)">
            <summary>
            Terminates the specified <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>
            </summary>
            <param name="activity">The <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> to terminate</param>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstance.UpdateActivityData(Synapse.Domain.Models.V1WorkflowActivity,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Updates the data of the specified <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>
            </summary>
            <param name="activity">The <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> to update the data of</param>
            <param name="data">The updated <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> data</param>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstance.SetActivityResult(Synapse.Domain.Models.V1WorkflowActivity,Synapse.Domain.Models.V1WorkflowExecutionResult)">
            <summary>
            Set the specified <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>'s <see cref="T:Synapse.Domain.Models.V1WorkflowExecutionResult"/>
            </summary>
            <param name="activity">The <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> to set the <see cref="T:Synapse.Domain.Models.V1WorkflowExecutionResult"/> for</param>
            <param name="result">The specified <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>'s <see cref="T:Synapse.Domain.Models.V1WorkflowExecutionResult"/></param>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstance.UpdateActivity(Synapse.Domain.Models.V1WorkflowActivity)">
            <summary>
            Updates the specified <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>
            </summary>
            <param name="activity">The <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> to update</param>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstance.TransitionTo(ServerlessWorkflow.Sdk.Models.StateDefinition)">
            <summary>
            Operates a transition to the specified <see cref="T:ServerlessWorkflow.Sdk.Models.StateDefinition"/>
            </summary>
            <param name="state">The <see cref="T:ServerlessWorkflow.Sdk.Models.StateDefinition"/> to transition to</param>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstance.Fault(System.Exception)">
            <summary>
            Faults the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> that has occured during the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s execution</param>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstance.TimeOut">
            <summary>
            Times out the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s execution
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstance.Terminate">
            <summary>
            Terminates the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s execution
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstance.SetOutput(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Sets the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s output
            </summary>
            <param name="output">The <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s output</param>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstance.On(Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceInitializingDomainEvent)">
            <summary>
            Handles the specified <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceInitializingDomainEvent"/>
            </summary>
            <param name="e">The <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceInitializingDomainEvent"/> to handle</param>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstance.On(Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceDeployedDomainEvent)">
            <summary>
            Handles the specified <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceDeployedDomainEvent"/>
            </summary>
            <param name="e">The <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceDeployedDomainEvent"/> to handle</param>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstance.On(Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceStartedDomainEvent)">
            <summary>
            Handles the specified <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceStartedDomainEvent"/>
            </summary>
            <param name="e">The <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceStartedDomainEvent"/> to handle</param>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstance.On(Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceSuspendedDomainEvent)">
            <summary>
            Handles the specified <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceSuspendedDomainEvent"/>
            </summary>
            <param name="e">The <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceSuspendedDomainEvent"/> to handle</param>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstance.On(Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceResumedDomainEvent)">
            <summary>
            Handles the specified <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceResumedDomainEvent"/>
            </summary>
            <param name="e">The <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceResumedDomainEvent"/> to handle</param>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstance.On(Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceCloudEventCorrelatedDomainEvent)">
            <summary>
            Handles the specified <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceCloudEventCorrelatedDomainEvent"/>
            </summary>
            <param name="e">The <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceCloudEventCorrelatedDomainEvent"/> to handle</param>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstance.On(Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceFaultedDomainEvent)">
            <summary>
            Handles the specified <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceFaultedDomainEvent"/>
            </summary>
            <param name="e">The <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceFaultedDomainEvent"/> to handle</param>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstance.On(Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceExecutedDomainEvent)">
            <summary>
            Handles the specified <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceExecutedDomainEvent"/>
            </summary>
            <param name="e">The <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceExecutedDomainEvent"/> to handle</param>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstance.On(Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceTimedOutDomainEvent)">
            <summary>
            Handles the specified <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceTimedOutDomainEvent"/>
            </summary>
            <param name="e">The <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceTimedOutDomainEvent"/> to handle</param>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstance.On(Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceTerminatedDomainEvent)">
            <summary>
            Handles the specified <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceTerminatedDomainEvent"/>
            </summary>
            <param name="e">The <see cref="T:Synapse.Domain.Events.WorkflowInstances.V1WorkflowInstanceTerminatedDomainEvent"/> to handle</param>
        </member>
        <member name="T:Synapse.Domain.Models.V1WorkflowInstanceDefinition">
            <summary>
            Represents a <see cref="T:Neuroglia.K8s.CustomResourceDefinition"/> used to execute the instance of a <see cref="T:ServerlessWorkflow.Sdk.Models.WorkflowDefinition"/>
            </summary>
        </member>
        <member name="F:Synapse.Domain.Models.V1WorkflowInstanceDefinition.KIND">
            <summary>
            Gets the <see cref="T:Synapse.Domain.Models.V1WorkflowInstanceDefinition"/>'s kind
            </summary>
        </member>
        <member name="F:Synapse.Domain.Models.V1WorkflowInstanceDefinition.PLURAL">
            <summary>
            Gets the <see cref="T:Synapse.Domain.Models.V1WorkflowInstanceDefinition"/>'s plural
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstanceDefinition.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Models.V1WorkflowInstanceDefinition"/>
            </summary>
        </member>
        <member name="T:Synapse.Domain.Models.V1WorkflowInstanceSpec">
            <summary>
            Represents a <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> spec
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstanceSpec.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Models.V1WorkflowInstanceSpec"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstanceSpec.#ctor(Synapse.Domain.Models.V1WorkflowReference,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Models.V1WorkflowInstanceSpec"/>
            </summary>
            <param name="definition">A <see cref="T:Synapse.Domain.Models.V1WorkflowReference"/> to the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s <see cref="T:Synapse.Domain.Models.V1Workflow"/></param>
            <param name="input">The <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s input data</param>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowInstanceSpec.#ctor(Synapse.Domain.Models.V1WorkflowReference,Newtonsoft.Json.Linq.JObject,Synapse.Domain.Models.V1CorrelationContext)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Models.V1WorkflowInstanceSpec"/>
            </summary>
            <param name="definition">A <see cref="T:Synapse.Domain.Models.V1WorkflowReference"/> to the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s <see cref="T:Synapse.Domain.Models.V1Workflow"/></param>
            <param name="input">The <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s input data</param>
            <param name="correlationContext">The <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s <see cref="T:Synapse.Domain.Models.V1CorrelationContext"/></param>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowInstanceSpec.Definition">
            <summary>
            Gets a <see cref="T:Synapse.Domain.Models.V1WorkflowReference"/> to the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s <see cref="T:Synapse.Domain.Models.V1Workflow"/>
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowInstanceSpec.Input">
            <summary>
            Gets the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s input data
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowInstanceSpec.CorrelationContext">
            <summary>
            Gets the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s <see cref="T:Synapse.Domain.Models.V1CorrelationContext"/>
            </summary>
        </member>
        <member name="T:Synapse.Domain.Models.V1WorkflowInstanceStatus">
            <summary>
            Represents the status of a <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowInstanceStatus.Type">
            <summary>
            Gets the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s status type
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowInstanceStatus.InitializedAt">
            <summary>
            Gets the date and time at which the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> has been initialized
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowInstanceStatus.DeployedAt">
            <summary>
            Gets the date and time at which the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> has been deployed
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowInstanceStatus.StartedAt">
            <summary>
            Gets the date and time at which the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> has started
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowInstanceStatus.ExecutedAt">
            <summary>
            Gets the date and time at which the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/> has been executed
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowInstanceStatus.Pod">
            <summary>
            Gets the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s pod <see cref="T:k8s.Models.V1ObjectReference"/>
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowInstanceStatus.CorrelationContext">
            <summary>
            Gets <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s <see cref="T:Synapse.Domain.Models.V1CorrelationContext"/>
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowInstanceStatus.Interruptions">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> containing the <see cref="T:Synapse.Domain.Models.V1ExecutionInterruption"/>s that have occured during the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s execution
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowInstanceStatus.ActivityLog">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> containing the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> instances that have occured during the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s execution
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowInstanceStatus.Errors">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> containing the <see cref="T:Synapse.Domain.Models.V1Error"/>s that have occured during the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s execution
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowInstanceStatus.Output">
            <summary>
            Gets the <see cref="T:Synapse.Domain.Models.V1WorkflowInstance"/>'s output
            </summary>
        </member>
        <member name="T:Synapse.Domain.Models.V1WorkflowActivityMetadata">
            <summary>
            Represents the metadata of a <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowActivityMetadata.State">
            <summary>
            Gets/sets the name of the <see cref="T:ServerlessWorkflow.Sdk.Models.StateDefinition"/> the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> processes/belongs to
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowActivityMetadata.Action">
            <summary>
            Gets/sets the name of the <see cref="T:ServerlessWorkflow.Sdk.Models.ActionDefinition"/> the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> processes
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowActivityMetadata.Case">
            <summary>
            Gets/sets the name of the <see cref="T:ServerlessWorkflow.Sdk.Models.SwitchCaseDefinition"/> the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> processes
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowActivityMetadata.TriggerId">
            <summary>
            Gets/sets the id of the <see cref="T:ServerlessWorkflow.Sdk.Models.EventStateTriggerDefinition"/> the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> processes
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowActivityMetadata.Event">
            <summary>
            Gets/sets the name of the <see cref="T:ServerlessWorkflow.Sdk.Models.EventDefinition"/> the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> processes
            </summary>
        </member>
        <member name="T:Synapse.Domain.Models.V1Workflow">
            <summary>
            Represents an instance of a <see cref="T:Synapse.Domain.Models.V1WorkflowDefinition"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1Workflow.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Models.V1Workflow"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1Workflow.#ctor(Synapse.Domain.Models.V1WorkflowSpec)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Models.V1Workflow"/>
            </summary>
            <param name="spec">The <see cref="T:Synapse.Domain.Models.V1Workflow"/>'s spec</param>
        </member>
        <member name="P:Synapse.Domain.Models.V1Workflow.Patch">
            <inheritdoc/>
        </member>
        <member name="P:Synapse.Domain.Models.V1Workflow.StatusPatch">
            <inheritdoc/>
        </member>
        <member name="M:Synapse.Domain.Models.V1Workflow.StartProcessing">
            <summary>
            Starts processing the <see cref="T:Synapse.Domain.Models.V1Workflow"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1Workflow.Label">
            <summary>
            Labels the <see cref="T:Synapse.Domain.Models.V1Workflow"/>
            </summary>
            <returns>A boolean indicating whether or not the operation was successfull</returns>
        </member>
        <member name="M:Synapse.Domain.Models.V1Workflow.SetValidationResult(FluentValidation.Results.ValidationResult)">
            <summary>
            Sets the <see cref="T:Synapse.Domain.Models.V1Workflow"/>'s <see cref="T:FluentValidation.Results.ValidationResult"/>
            </summary>
            <param name="validationResult">The <see cref="T:Synapse.Domain.Models.V1Workflow"/>'s <see cref="T:FluentValidation.Results.ValidationResult"/></param>
        </member>
        <member name="M:Synapse.Domain.Models.V1Workflow.Fault(System.Exception)">
            <summary>
            Faults the <see cref="T:Synapse.Domain.Models.V1Workflow"/>
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> that has occured while processing the <see cref="T:Synapse.Domain.Models.V1Workflow"/></param>
        </member>
        <member name="M:Synapse.Domain.Models.V1Workflow.On(Synapse.Domain.Events.Workflows.V1WorkflowProcessingStarted)">
            <summary>
            Handles the specified <see cref="T:Synapse.Domain.Events.Workflows.V1WorkflowProcessingStarted"/>
            </summary>
            <param name="e">The <see cref="T:Synapse.Domain.Events.Workflows.V1WorkflowProcessingStarted"/> to handle</param>
        </member>
        <member name="M:Synapse.Domain.Models.V1Workflow.On(Synapse.Domain.Events.Workflows.V1WorkflowValidationCompleted)">
            <summary>
            Handles the specified <see cref="T:Synapse.Domain.Events.Workflows.V1WorkflowValidationCompleted"/>
            </summary>
            <param name="e">The <see cref="T:Synapse.Domain.Events.Workflows.V1WorkflowValidationCompleted"/> to handle</param>
        </member>
        <member name="M:Synapse.Domain.Models.V1Workflow.On(Synapse.Domain.Events.Workflows.V1WorkflowProcessingFaulted)">
            <summary>
            Handles the specified <see cref="T:Synapse.Domain.Events.Workflows.V1WorkflowProcessingFaulted"/>
            </summary>
            <param name="e">The <see cref="T:Synapse.Domain.Events.Workflows.V1WorkflowProcessingFaulted"/> to handle</param>
        </member>
        <member name="T:Synapse.Domain.Models.V1WorkflowDefinition">
            <summary>
            Represents a <see cref="T:Neuroglia.K8s.CustomResourceDefinition"/> used to deploy a <see cref="T:ServerlessWorkflow.Sdk.Models.WorkflowDefinition"/>
            </summary>
        </member>
        <member name="F:Synapse.Domain.Models.V1WorkflowDefinition.KIND">
            <summary>
            Gets the <see cref="T:Synapse.Domain.Models.V1WorkflowDefinition"/>'s kind
            </summary>
        </member>
        <member name="F:Synapse.Domain.Models.V1WorkflowDefinition.PLURAL">
            <summary>
            Gets the <see cref="T:Synapse.Domain.Models.V1WorkflowDefinition"/>'s plural
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowDefinition.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Models.V1WorkflowDefinition"/>
            </summary>
        </member>
        <member name="T:Synapse.Domain.Models.V1WorkflowReference">
            <summary>
            Represents a reference to a <see cref="T:ServerlessWorkflow.Sdk.Models.WorkflowDefinition"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowReference.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Models.V1WorkflowReference"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowReference.#ctor(System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Models.V1WorkflowReference"/>
            </summary>
            <param name="id">The id of the <see cref="T:ServerlessWorkflow.Sdk.Models.WorkflowDefinition"/> to reference</param>
            <param name="version">The version of the <see cref="T:ServerlessWorkflow.Sdk.Models.WorkflowDefinition"/> to reference</param>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowReference.Id">
            <summary>
            Gets the id of the <see cref="T:ServerlessWorkflow.Sdk.Models.WorkflowDefinition"/> to reference
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowReference.Version">
            <summary>
            Gets the version of the <see cref="T:ServerlessWorkflow.Sdk.Models.WorkflowDefinition"/> to reference
            </summary>
        </member>
        <member name="T:Synapse.Domain.Models.V1WorkflowSpec">
            <summary>
            Represents a <see cref="T:Synapse.Domain.Models.V1Workflow"/>'s spec
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowSpec.#ctor">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Models.V1WorkflowSpec"/>
            </summary>
        </member>
        <member name="M:Synapse.Domain.Models.V1WorkflowSpec.#ctor(ServerlessWorkflow.Sdk.Models.WorkflowDefinition)">
            <summary>
            Initializes a new <see cref="T:Synapse.Domain.Models.V1WorkflowSpec"/>
            </summary>
            <param name="definition">The <see cref="T:Synapse.Domain.Models.V1Workflow"/>'s <see cref="T:ServerlessWorkflow.Sdk.Models.WorkflowDefinition"/></param>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowSpec.Definition">
            <summary>
            Gets the <see cref="T:Synapse.Domain.Models.V1Workflow"/>'s <see cref="T:ServerlessWorkflow.Sdk.Models.WorkflowDefinition"/>
            </summary>
        </member>
        <member name="T:Synapse.Domain.Models.V1WorkflowStatus">
            <summary>
            Represents the status of a <see cref="T:Synapse.Domain.Models.V1Workflow"/>
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowStatus.Type">
            <summary>
            Gets the <see cref="T:Synapse.Domain.Models.V1Workflow"/>'s status type
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowStatus.Errors">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> containing all the <see cref="T:Synapse.Domain.Models.V1Error"/>s that have occured during the processing of the <see cref="T:Synapse.Domain.Models.V1Workflow"/>
            </summary>
        </member>
        <member name="T:Synapse.Domain.Models.V1WorkflowValidationStatus">
            <summary>
            Represents the object used to describe a <see cref="T:Synapse.Domain.Models.V1Workflow"/>'s validation status
            </summary>
        </member>
        <member name="P:Synapse.Domain.Models.V1WorkflowValidationStatus.State">
            <summary>
            Gets the <see cref="T:Synapse.Domain.Models.V1Workflow"/>'s validation state
            </summary>
        </member>
        <member name="T:Synapse.Domain.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.error_account_invalidcredentials">
            <summary>
              Looks up a localized string similar to Invalid username and/or password.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.error_identity_concurrencyfailure">
            <summary>
              Looks up a localized string similar to Optimistic concurrency failure, object has been modified.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.error_identity_defaulterror">
            <summary>
              Looks up a localized string similar to An unknown failure has occurred.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.error_identity_duplicateemail">
            <summary>
              Looks up a localized string similar to Email &apos;{email}&apos; is already taken.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.error_identity_duplicaterolename">
            <summary>
              Looks up a localized string similar to Role name &apos;{role}&apos; is already taken.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.error_identity_duplicateusername">
            <summary>
              Looks up a localized string similar to User name &apos;{userName}&apos; is already taken.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.error_identity_invalidemail">
            <summary>
              Looks up a localized string similar to Email &apos;{email}&apos; is invalid.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.error_identity_invalidrolename">
            <summary>
              Looks up a localized string similar to Role name &apos;{role}&apos; is invalid.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.error_identity_invalidtoken">
            <summary>
              Looks up a localized string similar to Invalid token.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.error_identity_invalidusername">
            <summary>
              Looks up a localized string similar to User name &apos;{username}&apos; is invalid, it can only contain letters or digits.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.error_identity_loginalreadyassociated">
            <summary>
              Looks up a localized string similar to A user with this login already exists.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.error_identity_passwordmismatch">
            <summary>
              Looks up a localized string similar to Incorrect password.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.error_identity_passwordrequiresdigit">
            <summary>
              Looks up a localized string similar to Passwords must have at least one digit (&apos;0&apos;-&apos;9&apos;).
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.error_identity_passwordrequireslower">
            <summary>
              Looks up a localized string similar to Passwords must have at least one lowercase (&apos;a&apos;-&apos;z&apos;).
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.error_identity_passwordrequiresnonalphanumeric">
            <summary>
              Looks up a localized string similar to Passwords must have at least one non alphanumeric character.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.error_identity_passwordrequiresuniquechars">
            <summary>
              Looks up a localized string similar to Passwords must use at least {amount} different characters.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.error_identity_passwordrequiresupper">
            <summary>
              Looks up a localized string similar to Passwords must have at least one uppercase (&apos;A&apos;-&apos;Z&apos;).
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.error_identity_passwordtooshort">
            <summary>
              Looks up a localized string similar to Passwords must be at least {length} characters.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.error_identity_recoverycoderedemptionfailed">
            <summary>
              Looks up a localized string similar to Recovery code redemption failed.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.error_identity_useralreadyhaspassword">
            <summary>
              Looks up a localized string similar to User already has a password set.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.error_identity_useralreadyinrole">
            <summary>
              Looks up a localized string similar to User already in role &apos;{role}&apos;.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.error_identity_userlockoutnotenabled">
            <summary>
              Looks up a localized string similar to Lockout is not enabled for this user.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.error_identity_usernotinrole">
            <summary>
              Looks up a localized string similar to User is not in role &apos;{role}&apos;.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_activetilloperatorsessionfound">
            <summary>
              Looks up a localized string similar to Failed to start a new operator session on the till with id &apos;{tillId}&apos;: an active operator session already exists.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_activetillsessionfound">
            <summary>
              Looks up a localized string similar to Failed to start a new session on the till with id &apos;{tillId}&apos;: an active session already exists.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_argumentcannotbeadateinthefuture">
            <summary>
              Looks up a localized string similar to The {argument} cannot be a date in the future.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_argumentisinvalidaddress">
            <summary>
              Looks up a localized string similar to The specified {argument} value &apos;{value}&apos; is an invalid address.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_argumentisinvalidcountrycode">
            <summary>
              Looks up a localized string similar to The specified {argument} value &apos;{value}&apos; is not a valid two-letter ISO 3166 country code.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_argumentisinvalidemail">
            <summary>
              Looks up a localized string similar to The specified {argument} value &apos;{value}&apos; is not a valid email address.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_argumentisinvalidiso4217code">
            <summary>
              Looks up a localized string similar to The specified {argument} &apos;{value}&apos; is not a valid ISO 4217 currency code.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_argumentisinvalidiso6391code">
            <summary>
              Looks up a localized string similar to The specified {argument} value &apos;{value}&apos; is not a valid ISO 639-1 language code.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_argumentisinvalidphonenumber">
            <summary>
              Looks up a localized string similar to The specified {argument} value &apos;{value}&apos; is an invalid phone number.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_argumentisinvalidphonenumberprefix">
            <summary>
              Looks up a localized string similar to The specified {argument} &apos;{value}&apos; is not a valid international phone number prefix.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_argumentisinvalidtimezoneid">
            <summary>
              Looks up a localized string similar to The specified {argument} &apos;{value}&apos; is not a valid time zone id.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_argumentisinvaliduri">
            <summary>
              Looks up a localized string similar to The specified {argument} value &apos;{value}&apos; is not a valid uri.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_argumentisunsupportedvalue">
            <summary>
              Looks up a localized string similar to The specified {argument} &apos;{value}&apos; is not supported. Supported values: {values}.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_argumentmustbecomprisedbetweenincluding">
            <summary>
              Looks up a localized string similar to The {argument} argument must be superior or equal to {min} and inferior or equal to {max}.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_argumentmustbeearlierthan">
            <summary>
              Looks up a localized string similar to The {argument} argument must be a time equal to or earlier than &apos;{time}&apos;.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_argumentmustbehigherorequalto">
            <summary>
              Looks up a localized string similar to The {argument} argument must be superior or equal to {quantity}.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_argumentmustbehigherorlowerthan">
            <summary>
              Looks up a localized string similar to The {argument} argument must be higher or lower than {value}.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_argumentmustbehigherthan">
            <summary>
              Looks up a localized string similar to The {argument} argument must be higher than {min}.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_argumentmustbelaterthan">
            <summary>
              Looks up a localized string similar to The {argument} argument must be a time equal to or later than &apos;{time}&apos;.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_argumentmustbelowerorequalto">
            <summary>
              Looks up a localized string similar to The {argument} argument must be lower or equal to {quantity}.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_argumentmustbelowerorhigherthan">
            <summary>
              Looks up a localized string similar to The {argument} argument must be higher or equal to {quantity}.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_argumentmustbenumeric">
            <summary>
              Looks up a localized string similar to The {argument} argument must contain digits only.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_argumentmusthavemaximumlengthof">
            <summary>
              Looks up a localized string similar to The {argument} argument must have a maximum length of {length}.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_argumentmusthaveminimumlengthof">
            <summary>
              Looks up a localized string similar to The {argument} argument must have a minimum length of {length}.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_argumentnull">
            <summary>
              Looks up a localized string similar to The {argument} argument cannot be null.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_argumentnullorwhitespace">
            <summary>
              Looks up a localized string similar to The {argument} argument cannot be null or empty.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_argumentoutofrange">
            <summary>
              Looks up a localized string similar to The specified {argument} value &apos;{value}&apos; is out of range.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_deletionnotsupported">
            <summary>
              Looks up a localized string similar to Deleting entities of type &apos;{type}&apos; is not supported.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_entityalreadyexists">
            <summary>
              Looks up a localized string similar to A {entityType} with the specified {keyProperty} &apos;{key}&apos; already exists.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_entityalreadyexists_many">
            <summary>
              Looks up a localized string similar to A {entityType} with the specified {keyProperties} already exists.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_filteringnotallowed">
            <summary>
              Looks up a localized string similar to Filtering is not allowed for the specified type &apos;{type}&apos;.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_invalidcast">
            <summary>
              Looks up a localized string similar to Failed to cast the type &apos;{from}&apos; to the type &apos;{to}&apos;.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_missingproperty">
            <summary>
              Looks up a localized string similar to Failed to find the property &apos;{property}&apos; in the specified type &apos;{type}&apos;.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_notsupported">
            <summary>
              Looks up a localized string similar to The supplied {type} value &apos;{value}&apos; is not supported.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_nullreference">
            <summary>
              Looks up a localized string similar to Failed to find a &apos;{type}&apos; with the specified {keyProperty} &apos;{key}&apos;.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_nullreference_many">
            <summary>
              Looks up a localized string similar to Failed to find a &apos;{type}&apos; with the specified keys: {keys}.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_unexpectedstate">
            <summary>
              Looks up a localized string similar to The {entityType} with {keyProperty} &apos;{key}&apos; is in an unexpected state &apos;{state}&apos;.
            </summary>
        </member>
        <member name="P:Synapse.Domain.Properties.Resources.exception_domain_unexpectedvalue">
            <summary>
              Looks up a localized string similar to The entity of type &apos;{type}&apos; with {keyProperty} &apos;{id}&apos; has an unexpected &apos;{property}&apos; value &apos;{value}&apos;.
            </summary>
        </member>
        <member name="T:Synapse.ExceptionExtensions">
            <summary>
            Defines extensions for <see cref="T:System.Exception"/>s
            </summary>
        </member>
        <member name="M:Synapse.ExceptionExtensions.ToV1Error(System.Exception)">
            <summary>
            Converts the <see cref="T:System.Exception"/> into a new <see cref="T:Synapse.Domain.Models.V1Error"/>
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> to convert</param>
            <returns>A new <see cref="T:Synapse.Domain.Models.V1Error"/></returns>
        </member>
        <member name="T:Synapse.SynapseCustomResources">
            <summary>
            Exposes Synapse <see cref="T:Neuroglia.K8s.ICustomResourceDefinition"/>s
            </summary>
        </member>
        <member name="F:Synapse.SynapseCustomResources.Workflow">
            <summary>
            Gets Synapse's <see cref="T:Synapse.Domain.Models.V1WorkflowDefinition"/>
            </summary>
        </member>
        <member name="F:Synapse.SynapseCustomResources.WorkflowInstance">
            <summary>
            Gets Synapse's <see cref="T:Synapse.Domain.Models.V1WorkflowInstanceDefinition"/>
            </summary>
        </member>
        <member name="T:Synapse.V1TriggerConditionType">
            <summary>
            Enumerates all supported <see cref="T:Synapse.Domain.Models.V1Trigger"/> condition types
            </summary>
        </member>
        <member name="F:Synapse.V1TriggerConditionType.AnyOf">
            <summary>
            Indicates that the trigger should fire if any of its conditions are met
            </summary>
        </member>
        <member name="F:Synapse.V1TriggerConditionType.AllOf">
            <summary>
            Indicates that the trigger should fire only if all of its conditions are met
            </summary>
        </member>
        <member name="T:Synapse.V1TriggerCorrelationMode">
            <summary>
            Enumerates all supported <see cref="T:Synapse.Domain.Models.V1Trigger"/> correlation modes
            </summary>
        </member>
        <member name="F:Synapse.V1TriggerCorrelationMode.Exclusive">
            <summary>
            Indicates that the trigger is pending activation
            </summary>
        </member>
        <member name="F:Synapse.V1TriggerCorrelationMode.Parallel">
            <summary>
            Indicates that the trigger is pending activation
            </summary>
        </member>
        <member name="T:Synapse.V1TriggerOutcomeType">
            <summary>
            Enumerates all possible types of trigger outcomes 
            </summary>
        </member>
        <member name="F:Synapse.V1TriggerOutcomeType.Run">
            <summary>
            Indicates that the trigger should create and run a new workflow instance
            </summary>
        </member>
        <member name="F:Synapse.V1TriggerOutcomeType.Resume">
            <summary>
            Indicates that the trigger should resume the execution of an existing workflow instance
            </summary>
        </member>
        <member name="T:Synapse.V1WorkflowActivityStatus">
            <summary>
            Enumerates all supported values for a <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> status
            </summary>
        </member>
        <member name="F:Synapse.V1WorkflowActivityStatus.Pending">
            <summary>
            Indicates that the workflow activity is pending execution
            </summary>
        </member>
        <member name="F:Synapse.V1WorkflowActivityStatus.Initializing">
            <summary>
            Indicates that the workflow activity being initialized
            </summary>
        </member>
        <member name="F:Synapse.V1WorkflowActivityStatus.Deployed">
            <summary>
            Indicates that the workflow activity being initialized
            </summary>
        </member>
        <member name="F:Synapse.V1WorkflowActivityStatus.Executing">
            <summary>
            Indicates that the workflow activity is being executed
            </summary>
        </member>
        <member name="F:Synapse.V1WorkflowActivityStatus.Suspended">
            <summary>
            Indicates that the workflow activity's execution has been suspended
            </summary>
        </member>
        <member name="F:Synapse.V1WorkflowActivityStatus.Faulted">
            <summary>
            Indicates that the workflow activity's execution has faulted
            </summary>
        </member>
        <member name="F:Synapse.V1WorkflowActivityStatus.Executed">
            <summary>
            Indicates that the workflow activity has been executed
            </summary>
        </member>
        <member name="F:Synapse.V1WorkflowActivityStatus.Terminated">
            <summary>
            Indicates that the workflow activity has been terminated
            </summary>
        </member>
        <member name="F:Synapse.V1WorkflowActivityStatus.TimedOut">
            <summary>
            Indicates that the workflow activity has timed out
            </summary>
        </member>
        <member name="T:Synapse.V1WorkflowActivityType">
            <summary>
            Enumerates all types of <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>
            </summary>
        </member>
        <member name="F:Synapse.V1WorkflowActivityType.Start">
            <summary>
            Indicates an activity that processes the start of a workflow instance
            </summary>
        </member>
        <member name="F:Synapse.V1WorkflowActivityType.State">
            <summary>
            Indicates an activity that processes a state definition's execution
            </summary>
        </member>
        <member name="F:Synapse.V1WorkflowActivityType.Action">
            <summary>
            Indicates an activity that processes an action's execution
            </summary>
        </member>
        <member name="F:Synapse.V1WorkflowActivityType.ConsumeEvent">
            <summary>
            Indicates an activity that consumes an inbound <see cref="T:CloudNative.CloudEvents.CloudEvent"/>
            </summary>
        </member>
        <member name="F:Synapse.V1WorkflowActivityType.ProduceEvent">
            <summary>
            Indicates an activity that produces an output <see cref="T:CloudNative.CloudEvents.CloudEvent"/>
            </summary>
        </member>
        <member name="F:Synapse.V1WorkflowActivityType.EventStateTrigger">
            <summary>
            Indicates an activity that processes an event trigger
            </summary>
        </member>
        <member name="F:Synapse.V1WorkflowActivityType.Function">
            <summary>
            Indicates an activity that processes a function call
            </summary>
        </member>
        <member name="F:Synapse.V1WorkflowActivityType.Branch">
            <summary>
            Indicates an activity that processes a workflow branch
            </summary>
        </member>
        <member name="F:Synapse.V1WorkflowActivityType.SubFlow">
            <summary>
            Indicates an activity that processes a subflow
            </summary>
        </member>
        <member name="F:Synapse.V1WorkflowActivityType.Transition">
            <summary>
            Indicates an activity that processes a transition from a state to another
            </summary>
        </member>
        <member name="F:Synapse.V1WorkflowActivityType.Iteration">
            <summary>
            Indicates an activity that processes an iteration
            </summary>
        </member>
        <member name="F:Synapse.V1WorkflowActivityType.End">
            <summary>
            Indicates an activity that processes the end of a workflow instance
            </summary>
        </member>
        <member name="F:Synapse.V1WorkflowActivityType.Error">
            <summary>
            Indicates an activity that handles specific domain errors
            </summary>
        </member>
        <member name="T:Synapse.V1WorkflowDefinitionStatus">
            <summary>
            Enumerates all possible values for <see cref="T:Synapse.Domain.Models.V1Workflow"/> statuses
            </summary>
        </member>
        <member name="F:Synapse.V1WorkflowDefinitionStatus.Pending">
            <summary>
            Indicates that the <see cref="T:Synapse.Domain.Models.V1Workflow"/> is pending processing
            </summary>
        </member>
        <member name="F:Synapse.V1WorkflowDefinitionStatus.Processing">
            <summary>
            Indicates that the <see cref="T:Synapse.Domain.Models.V1Workflow"/> is being processed by an operator
            </summary>
        </member>
        <member name="F:Synapse.V1WorkflowDefinitionStatus.Valid">
            <summary>
            Indicates that the <see cref="T:Synapse.Domain.Models.V1Workflow"/> has been processed and is valid
            </summary>
        </member>
        <member name="F:Synapse.V1WorkflowDefinitionStatus.Invalid">
            <summary>
            Indicates that the <see cref="T:Synapse.Domain.Models.V1Workflow"/> has been processed and is invalid
            </summary>
        </member>
        <member name="F:Synapse.V1WorkflowDefinitionStatus.Error">
            <summary>
            Indicates that an error occured during the <see cref="T:Synapse.Domain.Models.V1Workflow"/>'s processing
            </summary>
        </member>
        <member name="T:Synapse.V1WorkflowExecutionResultType">
            <summary>
            Enumerates all possible types of <see cref="T:Synapse.Domain.Models.V1WorkflowExecutionResult"/>
            </summary>
        </member>
        <member name="F:Synapse.V1WorkflowExecutionResultType.Next">
            <summary>
            Indicates that the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> should proceed to the next <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/>
            </summary>
        </member>
        <member name="F:Synapse.V1WorkflowExecutionResultType.End">
            <summary>
            Indicates the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> ends the <see cref="T:Synapse.Domain.Models.V1Workflow"/>'s execution
            </summary>
        </member>
        <member name="F:Synapse.V1WorkflowExecutionResultType.Terminate">
            <summary>
            Indicates that the <see cref="T:Synapse.Domain.Models.V1WorkflowActivity"/> has been terminated
            </summary>
        </member>
    </members>
</doc>
