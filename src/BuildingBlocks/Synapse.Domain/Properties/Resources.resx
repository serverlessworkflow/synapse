<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="error_account_invalidcredentials" xml:space="preserve">
    <value>Invalid username and/or password</value>
  </data>
  <data name="error_identity_concurrencyfailure" xml:space="preserve">
    <value>Optimistic concurrency failure, object has been modified</value>
  </data>
  <data name="error_identity_defaulterror" xml:space="preserve">
    <value>An unknown failure has occurred</value>
  </data>
  <data name="error_identity_duplicateemail" xml:space="preserve">
    <value>Email '{email}' is already taken</value>
  </data>
  <data name="error_identity_duplicaterolename" xml:space="preserve">
    <value>Role name '{role}' is already taken</value>
  </data>
  <data name="error_identity_duplicateusername" xml:space="preserve">
    <value>User name '{userName}' is already taken</value>
  </data>
  <data name="error_identity_invalidemail" xml:space="preserve">
    <value>Email '{email}' is invalid</value>
  </data>
  <data name="error_identity_invalidrolename" xml:space="preserve">
    <value>Role name '{role}' is invalid</value>
  </data>
  <data name="error_identity_invalidtoken" xml:space="preserve">
    <value>Invalid token</value>
  </data>
  <data name="error_identity_invalidusername" xml:space="preserve">
    <value>User name '{username}' is invalid, it can only contain letters or digits</value>
  </data>
  <data name="error_identity_loginalreadyassociated" xml:space="preserve">
    <value>A user with this login already exists</value>
  </data>
  <data name="error_identity_passwordmismatch" xml:space="preserve">
    <value>Incorrect password</value>
  </data>
  <data name="error_identity_passwordrequiresdigit" xml:space="preserve">
    <value>Passwords must have at least one digit ('0'-'9')</value>
  </data>
  <data name="error_identity_passwordrequireslower" xml:space="preserve">
    <value>Passwords must have at least one lowercase ('a'-'z')</value>
  </data>
  <data name="error_identity_passwordrequiresnonalphanumeric" xml:space="preserve">
    <value>Passwords must have at least one non alphanumeric character</value>
  </data>
  <data name="error_identity_passwordrequiresuniquechars" xml:space="preserve">
    <value>Passwords must use at least {amount} different characters</value>
  </data>
  <data name="error_identity_passwordrequiresupper" xml:space="preserve">
    <value>Passwords must have at least one uppercase ('A'-'Z')</value>
  </data>
  <data name="error_identity_passwordtooshort" xml:space="preserve">
    <value>Passwords must be at least {length} characters</value>
  </data>
  <data name="error_identity_recoverycoderedemptionfailed" xml:space="preserve">
    <value>Recovery code redemption failed</value>
  </data>
  <data name="error_identity_useralreadyhaspassword" xml:space="preserve">
    <value>User already has a password set</value>
  </data>
  <data name="error_identity_useralreadyinrole" xml:space="preserve">
    <value>User already in role '{role}'</value>
  </data>
  <data name="error_identity_userlockoutnotenabled" xml:space="preserve">
    <value>Lockout is not enabled for this user</value>
  </data>
  <data name="error_identity_usernotinrole" xml:space="preserve">
    <value>User is not in role '{role}'</value>
  </data>
  <data name="exception_domain_activetilloperatorsessionfound" xml:space="preserve">
    <value>Failed to start a new operator session on the till with id '{tillId}': an active operator session already exists</value>
  </data>
  <data name="exception_domain_activetillsessionfound" xml:space="preserve">
    <value>Failed to start a new session on the till with id '{tillId}': an active session already exists</value>
  </data>
  <data name="exception_domain_argumentcannotbeadateinthefuture" xml:space="preserve">
    <value>The {argument} cannot be a date in the future</value>
  </data>
  <data name="exception_domain_argumentisinvalidaddress" xml:space="preserve">
    <value>The specified {argument} value '{value}' is an invalid address</value>
  </data>
  <data name="exception_domain_argumentisinvalidcountrycode" xml:space="preserve">
    <value>The specified {argument} value '{value}' is not a valid two-letter ISO 3166 country code</value>
  </data>
  <data name="exception_domain_argumentisinvalidemail" xml:space="preserve">
    <value>The specified {argument} value '{value}' is not a valid email address</value>
  </data>
  <data name="exception_domain_argumentisinvalidiso4217code" xml:space="preserve">
    <value>The specified {argument} '{value}' is not a valid ISO 4217 currency code</value>
  </data>
  <data name="exception_domain_argumentisinvalidiso6391code" xml:space="preserve">
    <value>The specified {argument} value '{value}' is not a valid ISO 639-1 language code</value>
  </data>
  <data name="exception_domain_argumentisinvalidphonenumber" xml:space="preserve">
    <value>The specified {argument} value '{value}' is an invalid phone number</value>
  </data>
  <data name="exception_domain_argumentisinvalidphonenumberprefix" xml:space="preserve">
    <value>The specified {argument} '{value}' is not a valid international phone number prefix</value>
  </data>
  <data name="exception_domain_argumentisinvalidtimezoneid" xml:space="preserve">
    <value>The specified {argument} '{value}' is not a valid time zone id</value>
  </data>
  <data name="exception_domain_argumentisinvaliduri" xml:space="preserve">
    <value>The specified {argument} value '{value}' is not a valid uri</value>
  </data>
  <data name="exception_domain_argumentisunsupportedvalue" xml:space="preserve">
    <value>The specified {argument} '{value}' is not supported. Supported values: {values}</value>
  </data>
  <data name="exception_domain_argumentmustbecomprisedbetweenincluding" xml:space="preserve">
    <value>The {argument} argument must be superior or equal to {min} and inferior or equal to {max}</value>
  </data>
  <data name="exception_domain_argumentmustbeearlierthan" xml:space="preserve">
    <value>The {argument} argument must be a time equal to or earlier than '{time}'</value>
  </data>
  <data name="exception_domain_argumentmustbehigherorequalto" xml:space="preserve">
    <value>The {argument} argument must be superior or equal to {quantity}</value>
  </data>
  <data name="exception_domain_argumentmustbehigherorlowerthan" xml:space="preserve">
    <value>The {argument} argument must be higher or lower than {value}</value>
  </data>
  <data name="exception_domain_argumentmustbehigherthan" xml:space="preserve">
    <value>The {argument} argument must be higher than {min}</value>
  </data>
  <data name="exception_domain_argumentmustbelaterthan" xml:space="preserve">
    <value>The {argument} argument must be a time equal to or later than '{time}'</value>
  </data>
  <data name="exception_domain_argumentmustbelowerorequalto" xml:space="preserve">
    <value>The {argument} argument must be lower or equal to {quantity}</value>
  </data>
  <data name="exception_domain_argumentmustbelowerorhigherthan" xml:space="preserve">
    <value>The {argument} argument must be higher or equal to {quantity}</value>
  </data>
  <data name="exception_domain_argumentmustbenumeric" xml:space="preserve">
    <value>The {argument} argument must contain digits only</value>
  </data>
  <data name="exception_domain_argumentmusthavemaximumlengthof" xml:space="preserve">
    <value>The {argument} argument must have a maximum length of {length}</value>
  </data>
  <data name="exception_domain_argumentmusthaveminimumlengthof" xml:space="preserve">
    <value>The {argument} argument must have a minimum length of {length}</value>
  </data>
  <data name="exception_domain_argumentnull" xml:space="preserve">
    <value>The {argument} argument cannot be null</value>
  </data>
  <data name="exception_domain_argumentnullorwhitespace" xml:space="preserve">
    <value>The {argument} argument cannot be null or empty</value>
  </data>
  <data name="exception_domain_argumentoutofrange" xml:space="preserve">
    <value>The specified {argument} value '{value}' is out of range</value>
  </data>
  <data name="exception_domain_deletionnotsupported" xml:space="preserve">
    <value>Deleting entities of type '{type}' is not supported</value>
  </data>
  <data name="exception_domain_entityalreadyexists" xml:space="preserve">
    <value>A {entityType} with the specified {keyProperty} '{key}' already exists</value>
  </data>
  <data name="exception_domain_entityalreadyexists_many" xml:space="preserve">
    <value>A {entityType} with the specified {keyProperties} already exists</value>
  </data>
  <data name="exception_domain_filteringnotallowed" xml:space="preserve">
    <value>Filtering is not allowed for the specified type '{type}'</value>
  </data>
  <data name="exception_domain_invalidcast" xml:space="preserve">
    <value>Failed to cast the type '{from}' to the type '{to}'</value>
  </data>
  <data name="exception_domain_missingproperty" xml:space="preserve">
    <value>Failed to find the property '{property}' in the specified type '{type}'</value>
  </data>
  <data name="exception_domain_notsupported" xml:space="preserve">
    <value>The supplied {type} value '{value}' is not supported</value>
  </data>
  <data name="exception_domain_nullreference" xml:space="preserve">
    <value>Failed to find a '{type}' with the specified {keyProperty} '{key}'</value>
  </data>
  <data name="exception_domain_nullreference_many" xml:space="preserve">
    <value>Failed to find a '{type}' with the specified keys: {keys}</value>
  </data>
  <data name="exception_domain_unexpectedstate" xml:space="preserve">
    <value>The {entityType} with {keyProperty} '{key}' is in an unexpected state '{state}'</value>
  </data>
  <data name="exception_domain_unexpectedvalue" xml:space="preserve">
    <value>The entity of type '{type}' with {keyProperty} '{id}' has an unexpected '{property}' value '{value}'</value>
  </data>
</root>