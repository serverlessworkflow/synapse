﻿@*
    Copyright © 2024-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@
@namespace Synapse.Dashboard.Components
@inject JSInterop jsInterop

<div class="d-flex flex-row justify-content-between align-items-center">
    @Title
    <span><!--@(WorkflowInstances?.Count() ?? 0) items--></span>
    <div class="d-flex">
        @if (Workflows != null && Workflows.Count() > 0)
        {
            <select class="form-select m-2" @onchange="OnSelectWorkflowChangedAsync">
                <option value="">All workflows</option>
                @foreach (var workflowResource in Workflows)
                {
                    <option value="@workflowResource.GetQualifiedName()">@workflowResource.GetQualifiedName()</option>
                }
            </select>
        }
        @if (Namespaces != null && Namespaces.Count() > 0)
        {
            <select class="form-select m-2" @onchange="OnSelectNamespaceChangedAsync">
                <option value="">All namespaces</option>
                @foreach (var namespaceResource in Namespaces)
                {
                    <option value="@namespaceResource.GetName()" selected="@(@namespaceResource.GetName() == @namespace)">@namespaceResource.GetName()</option>
                }
            </select>
        }
        @if (Operators != null && Operators.Count() > 0)
        {
            <select class="form-select m-2" @onchange="OnSelectOperatorChangedAsync">
                <option value="">All operators</option>
                @foreach (var operatorResource in Operators)
                {
                    var name = operatorResource.GetName() + "." + operatorResource.GetNamespace();
                    <option value="@name" selected="@(name == operatorName)">@name</option>
                }
            </select>
        }
        <input type="search" class="form-control rounded my-2 me-2" placeholder="Search" @oninput="OnSearchInputAsync" />
        <div class="dropdown d-flex align-content-center">
            <button class="btn btn-sm" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false" title="" @onclick:stopPropagation="true"><i class="bi bi-three-dots-vertical"></i></button>
            <ul class="dropdown-menu">
                <li><button class="dropdown-item @(selectedInstanceNames.Count() == 0 ? "text-mute" : "")" disabled="@(selectedInstanceNames.Count() == 0)" @onclick="OnSuspendSelectedClickedAsync" @onclick:preventDefault="true" @onclick:stopPropagation="true"><Icon Name="IconName.Pause" /> Suspend selected</button></li>
                <li><button class="dropdown-item @(selectedInstanceNames.Count() == 0 ? "text-mute" : "")" disabled="@(selectedInstanceNames.Count() == 0)" @onclick="OnResumeSelectedClickedAsync" @onclick:preventDefault="true" @onclick:stopPropagation="true"><Icon Name="IconName.Play" /> Resume selected</button></li>
                <li><button class="dropdown-item @(selectedInstanceNames.Count() == 0 ? "text-mute" : "")" disabled="@(selectedInstanceNames.Count() == 0)" @onclick="OnCancelSelectedClickedAsync" @onclick:preventDefault="true" @onclick:stopPropagation="true"><Icon Name="IconName.X" /> Cancel selected</button></li>
                <li><button class="dropdown-item @(selectedInstanceNames.Count() == 0 ? "text-mute" : "text-danger")" disabled="@(selectedInstanceNames.Count() == 0)" @onclick="OnDeleteSelected" @onclick:preventDefault="true" @onclick:stopPropagation="true"><Icon Name="IconName.Trash" /> Delete selected</button></li>
            </ul>
        </div>
    </div>
</div>
<div class="table-container @ClassNames">
    @if (Loading)
    {
        <Loader />
    }
    <table class="table table-hover">
        <thead>
            <tr>
                @foreach (var column in knownColumns)
                {
                    if ((Columns.Count() == 0 && !DirectActions.Contains(column)) || Columns.Contains(column))
                    {
                        <th class="sticky-header text-@GetColumnAlignment(column)">@(column != "Actions" && !DirectActions.Contains(column) ? column : "")</th>
                    }
                }
                <th class="sticky-header text-center align-middle">
                    <input @ref="checkboxAll" type="checkbox" @onclick="async (_) => await OnToggleSelected.InvokeAsync(null)" @onclick:preventDefault="true" @onclick:stopPropagation="true" />
                </th>
            </tr>
        </thead>
        <tbody>
            <Virtualize @ref="Virtualize" Context="instance" ItemsProvider="ProvideWorkflowInstances" ItemSize="61">
                <ItemContent>
                <tr @onclick="async _ => await OnShowClickedAsync(instance)" class="cursor-pointer @(ActiveRow == instance.GetName() ? "table-active" : "")">
                    @foreach (var column in knownColumns)
                    {
                        if ((Columns.Count() == 0 && !DirectActions.Contains(column)) || Columns.Contains(column))
                        {
                            <td class="text-@GetColumnAlignment(column) text-truncate">
                                @switch(column)
                                {
                                    case "Name":
                                        @instance.Metadata.Name
                                        break;
                                    case "Namespace":
                                        <a href="#" @onclick="async (_) => { if (OnNamespaceChanged.HasDelegate) await OnNamespaceChanged.InvokeAsync(instance.Metadata.Namespace); }" @onclick:preventDefault="true" @onclick:stopPropagation="true">@instance.Metadata.Namespace</a>
                                        <a href="/namespaces/@instance.Metadata.Namespace" @onclick:stopPropagation="true"><Icon Name="IconName.BoxArrowUpRight" Class="small" /></a>
                                        break;
                                    case "Definition":
                                        {
                                            var definitionSegments = instance.Spec.Definition.ToString().Split(':');
                                            var version = definitionSegments.Last();
                                            var nameNs = definitionSegments.First();
                                            var segments = nameNs.Split('.');
                                            var ns = segments.Last();
                                            var name = segments.Take(segments.Count() - 1).Join('.');
                                            <a href="#" @onclick="async (_) => { if (OnWorkflowChanged.HasDelegate) await OnWorkflowChanged.InvokeAsync(nameNs); }" @onclick:preventDefault="true" @onclick:stopPropagation="true">@instance.Spec.Definition.ToString()</a>
                                            <a href="/workflows/details/@ns/@name/@version" @onclick:stopPropagation="true"><Icon Name="IconName.BoxArrowUpRight" Class="small" /></a>
                                            break;
                                        }
                                    case "Status":
                                        <span class="badge rounded-pill badge rounded-pill border @((instance.Status?.Phase ?? WorkflowInstanceStatusPhase.Pending).GetColorClass())">@(instance.Status?.Phase ?? WorkflowInstanceStatusPhase.Pending)</span>
                                        break;
                                    case "Creation Time":
                                        @instance.Metadata.CreationTimestamp?.RelativeFormat()
                                        break;
                                    case "Start Time":
                                        @(instance.Status?.StartedAt?.RelativeFormat() ?? "-")
                                        break;
                                    case "End Time":
                                        @(instance.Status?.EndedAt?.RelativeFormat() ?? "-")
                                        break;
                                    case "Duration":
                                        @(instance.Status?.StartedAt.HasValue == true && instance.Status?.EndedAt.HasValue == true ? instance.Status.EndedAt.Value.Subtract(instance.Status.StartedAt.Value).ToString("hh\\:mm\\:ss\\.fff") : "-")
                                        break;
                                    case "Operator":
                                        {
                                            @if (instance.Metadata.Labels?.TryGetValue(SynapseDefaults.Resources.Labels.Operator, out var operatorName) == true && !string.IsNullOrWhiteSpace(operatorName))
                                            {
                                                    var operatorSegments = operatorName.Split(".");
                                                var ns = operatorSegments.Last();
                                                var name = operatorSegments.Take(operatorSegments.Count() - 1).Join('.');
                                                <a href="#" @onclick="async (_) => { if(OnOperatorChanged.HasDelegate) await OnOperatorChanged.InvokeAsync(operatorName); }" @onclick:preventDefault="true" @onclick:stopPropagation="true">@operatorName</a>
                                                <a href="/operators/@ns/@name" @onclick:stopPropagation="true"><Icon Name="IconName.BoxArrowUpRight" Class="small" /></a>
                                            }
                                            else
                                            {
                                                <span>-</span>
                                            }
                                            break;
                                        }
                                    case "Actions":
                                        <div class="dropdown">
                                            <button class="btn btn-sm" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false" title="" @onclick:stopPropagation="true"><i class="bi bi-three-dots-vertical"></i></button>
                                            <ul class="dropdown-menu">
                                                @if (instance.Status?.Phase == WorkflowInstanceStatusPhase.Running)
                                                {
                                                    <li><button class="dropdown-item" @onclick="async _ => await OnSuspendClickedAsync(instance)" @onclick:stopPropagation="true"><Icon Name="IconName.Pause" /> Suspend</button></li>
                                                }
                                                @if (instance.Status?.Phase == WorkflowInstanceStatusPhase.Suspended)
                                                {
                                                    <li><button class="dropdown-item" @onclick="async _ => await OnResumeClickedAsync(instance)" @onclick:stopPropagation="true"><Icon Name="IconName.Play" /> Resume</button></li>
                                                }
                                                @if (instance.IsOperative)
                                                {
                                                    <li><button class="dropdown-item" @onclick="async _ => await OnCancelClickedAsync(instance)" @onclick:stopPropagation="true"><Icon Name="IconName.X" /> Cancel</button></li>
                                                }
                                                <li><button class="dropdown-item" @onclick="async _ => await OnReplayClickedAsync(instance)" @onclick:stopPropagation="true"><Icon Name="IconName.ArrowClockwise" /> Replay</button></li>
                                                <li><button class="dropdown-item text-danger" @onclick="async _ => await OnDeleteClickedAsync(instance)" @onclick:stopPropagation="true"><Icon Name="IconName.Trash" /> Delete</button></li>
                                            </ul>
                                        </div>
                                        break;
                                    case "Resume":
                                        @if (instance.Status?.Phase == WorkflowInstanceStatusPhase.Running)
                                        {
                                            <button class="btn btn-sm text-primary" @onclick="async _ => await OnSuspendClickedAsync(instance)" @onclick:stopPropagation="true" title="Suspend"><Icon Name="IconName.Pause" /></button>
                                        }
                                        @if (instance.Status?.Phase == WorkflowInstanceStatusPhase.Suspended)
                                        {
                                            <button class="btn btn-sm text-primary" @onclick="async _ => await OnResumeClickedAsync(instance)" @onclick:stopPropagation="true" title="Resume"><Icon Name="IconName.Play" /></button>
                                        }
                                        break;
                                    case "Cancel":
                                        @if (instance.IsOperative)
                                        {
                                            <button class="btn btn-sm text-warning" @onclick="async _ => await OnCancelClickedAsync(instance)" @onclick:stopPropagation="true" title="Cancel"><Icon Name="IconName.X" /></button>
                                        }
                                        break;
                                    case "Replay":
                                        <button class="btn btn-sm text-primary" @onclick="async _ => await OnReplayClickedAsync(instance)" @onclick:stopPropagation="true" title="Replay"><Icon Name="IconName.ArrowClockwise" /></button>
                                        break;
                                    case "Delete":
                                        <button class="btn btn-sm text-danger" @onclick="async _ => await OnDeleteClickedAsync(instance)" @onclick:stopPropagation="true" title="Delete"><Icon Name="IconName.Trash" /></button>
                                        break;
                                    default:
                                        break;
                                }
                            </td>
                        }
                    }
                    <td class="text-center align-middle text-truncate">
                        <input type="checkbox" checked="@selectedInstanceNames.Contains(instance.GetName())" @onclick="async (_) => await OnToggleSelected.InvokeAsync(instance.GetName())" @onclick:preventDefault="true" @onclick:stopPropagation="true" />
                    </td>
                </tr>
                </ItemContent>
                <Placeholder>
                    <tr>
                        @foreach (var column in knownColumns)
                        {
                            if ((Columns.Count() == 0 && !DirectActions.Contains(column)) || Columns.Contains(column))
                            {
                                <td></td>
                            }
                        }
                        <td></td>
                    </tr>
                </Placeholder>
            </Virtualize>
        </tbody>
    </table>
</div>

@code {

    protected string? ClassNames => cssClass;

    string? cssClass;
    [Parameter] public string? Class { get; set; }
    RenderFragment? title;
    [Parameter] public RenderFragment? Title { get; set; }
    bool loading = true;
    [Parameter] public bool Loading { get; set; } = true;
    IEnumerable<string> columns = [];
    [Parameter] public IEnumerable<string> Columns { get; set; } = [];
    IEnumerable<WorkflowInstance>? workflowInstances;
    [Parameter] public IEnumerable<WorkflowInstance>? WorkflowInstances { get; set; }
    ItemsProviderDelegate<WorkflowInstance>? provideWorkflowInstances;
    [Parameter] public ItemsProviderDelegate<WorkflowInstance>? ProvideWorkflowInstances { get; set; }
    IEnumerable<string> selectedInstanceNames = [];
    [Parameter] public IEnumerable<string> SelectedInstanceNames { get; set; } = [];
    IEnumerable<Workflow>? workflows { get; set; }
    [Parameter] public IEnumerable<Workflow>? Workflows { get; set; }
    IEnumerable<Namespace>? namespaces { get; set; }
    [Parameter] public IEnumerable<Namespace>? Namespaces { get; set; }
    string? @namespace { get; set; }
    [Parameter] public string? Namespace { get; set; }
    IEnumerable<Operator>? operators { get; set; }
    [Parameter] public IEnumerable<Operator>? Operators { get; set; }
    string? operatorName { get; set; }
    [Parameter] public string? OperatorName { get; set; }
    string? activeRow { get; set; }
    [Parameter] public string? ActiveRow { get; set; }

    [Parameter] public EventCallback<string?> OnWorkflowChanged { get; set; }
    [Parameter] public EventCallback<string?> OnNamespaceChanged { get; set; }
    [Parameter] public EventCallback<string?> OnOperatorChanged { get; set; }
    [Parameter] public EventCallback<string?> OnSearchInput { get; set; }
    [Parameter] public EventCallback<WorkflowInstance> OnShowDetails { get; set; }
    [Parameter] public EventCallback<string?> OnToggleSelected { get; set; }
    [Parameter] public EventCallback<WorkflowInstance> OnDelete { get; set; }
    [Parameter] public EventCallback<WorkflowInstance> OnReplay { get; set; }
    [Parameter] public EventCallback<WorkflowInstance> OnSuspend { get; set; }
    [Parameter] public EventCallback<WorkflowInstance> OnResume { get; set; }
    [Parameter] public EventCallback<WorkflowInstance> OnCancel { get; set; }
    [Parameter] public EventCallback OnDeleteSelected { get; set; }
    [Parameter] public EventCallback OnSuspendSelected { get; set; }
    [Parameter] public EventCallback OnResumeSelected { get; set; }
    [Parameter] public EventCallback OnCancelSelected { get; set; }

    public Virtualize<WorkflowInstance>? Virtualize;

    public static IEnumerable<string> DirectActions = [
        "Resume",
        "Cancel",
        "Replay",
        "Delete"
    ];
    static IEnumerable<string> knownColumns = [
        "Name",
        "Namespace",
        "Definition",
        "Status",
        "Creation Time",
        "Start Time",
        "End Time",
        "Duration",
        "Operator",
        "Actions",
        ..DirectActions
    ];

    ElementReference checkboxAll = default!;

    bool shouldRender = true;

    /// <inheritdoc />
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (cssClass != Class)
        {
            cssClass = Class;
            shouldRender = true;
        }
        if (title != Title)
        {
            title = Title;
            shouldRender = true;
        }
        if (loading != Loading)
        {
            loading = Loading;
            shouldRender = true;
        }
        if (columns != Columns)
        {
            columns = Columns;
            shouldRender = true;
        }
        if (provideWorkflowInstances != ProvideWorkflowInstances)
        {
            provideWorkflowInstances = ProvideWorkflowInstances;
            shouldRender = true;
        }
        if (workflowInstances != WorkflowInstances)
        {
            workflowInstances = WorkflowInstances;
            shouldRender = true;
        }
        if (workflows != Workflows)
        {
            workflows = Workflows;
            shouldRender = true;
        }
        if (namespaces != Namespaces)
        {
            namespaces = Namespaces;
            shouldRender = true;
        }
        if (@namespace != Namespace)
        {
            this.@namespace = Namespace;
            shouldRender = true;
        }
        if (operators != Operators)
        {
            operators = Operators;
            shouldRender = true;
        }
        if (operatorName != OperatorName)
        {
            operatorName = OperatorName;
            shouldRender = true;
        }
        if (selectedInstanceNames != SelectedInstanceNames)
        {
            selectedInstanceNames = SelectedInstanceNames;

            if (selectedInstanceNames.Count() == 0)
            {
                await this.jsInterop.SetCheckboxStateAsync(checkboxAll, Dashboard.CheckboxState.Unchecked);
            }
            else if (selectedInstanceNames.Count() == (workflowInstances?.Count() ?? 0))
            {
                await this.jsInterop.SetCheckboxStateAsync(checkboxAll, Dashboard.CheckboxState.Checked);
            }
            else
            {
                await this.jsInterop.SetCheckboxStateAsync(checkboxAll, Dashboard.CheckboxState.Indeterminate);
            }
            shouldRender = true;
        }
        if (activeRow != ActiveRow)
        {
            activeRow = ActiveRow;
            await Task.Delay(1);
            shouldRender = true;
        }
    }

    /// <inheritdoc />
    protected override bool ShouldRender()
    {
        if (!shouldRender) return false;
        shouldRender = false;
        return true;
    }

    /// <summary>
    /// Gets the text alignment of the provided column
    /// </summary>
    /// <param name="column">The column to get the alignment for</param>
    /// <returns></returns>
    string GetColumnAlignment(string column)
    {
        return (
            column == "Name" || column == "Namespace" 
                ? "start"
                : column == "Action"
                    ? "end"
                    : "center"
            ) 
            + (DirectActions.Contains(column) ? " p-0": "");
    }

    /// <summary>
    /// Handles workflow selection changes
    /// </summary>
    /// <param name="e">the <see cref="ChangeEventArgs"/> to handle</param>
    /// <returns></returns>
    private async Task OnSelectWorkflowChangedAsync(ChangeEventArgs e)
    {
        if (this.OnWorkflowChanged.HasDelegate)
        {
            await this.OnWorkflowChanged.InvokeAsync(e.Value?.ToString());
        }
    }

    /// <summary>
    /// Handles namespace selection changes
    /// </summary>
    /// <param name="e">the <see cref="ChangeEventArgs"/> to handle</param>
    /// <returns></returns>
    private async Task OnSelectNamespaceChangedAsync(ChangeEventArgs e)
    {
        if (this.OnNamespaceChanged.HasDelegate)
        {
            await this.OnNamespaceChanged.InvokeAsync(e.Value?.ToString());
        }
    }

    /// <summary>
    /// Handles operator selection changes
    /// </summary>
    /// <param name="e">the <see cref="ChangeEventArgs"/> to handle</param>
    /// <returns></returns>
    private async Task OnSelectOperatorChangedAsync(ChangeEventArgs e)
    {
        if (this.OnOperatorChanged.HasDelegate)
        {
            await this.OnOperatorChanged.InvokeAsync(e.Value?.ToString());
        }
    }

    /// <summary>
    /// Handles search input value changes
    /// </summary>
    /// <param name="e">the <see cref="ChangeEventArgs"/> to handle</param>
    protected async Task OnSearchInputAsync(ChangeEventArgs e)
    {
        if (this.OnSearchInput.HasDelegate)
        {
            await this.OnSearchInput.InvokeAsync(e.Value?.ToString());
        }
    }

    /// <summary>
    /// Handles the click on the show button
    /// </summary>
    /// <param name="instance">The instance to show</param>
    /// <returns></returns>
    protected async Task OnShowClickedAsync(WorkflowInstance instance)
    {
        if (this.OnShowDetails.HasDelegate)
        {
            await this.OnShowDetails.InvokeAsync(instance);
        }
    }

    /// <summary>
    /// Handles the click on the delete button
    /// </summary>
    /// <param name="instance">The instance to delete</param>
    /// <returns></returns>
    protected async Task OnDeleteClickedAsync(WorkflowInstance instance)
    {
        if (this.OnDelete.HasDelegate)
        {
            await this.OnDelete.InvokeAsync(instance);
        }
    }

    /// <summary>
    /// Handles the click on the replay button
    /// </summary>
    /// <param name="instance">The instance to replay</param>
    /// <returns></returns>
    protected async Task OnReplayClickedAsync(WorkflowInstance instance)
    {
        if (this.OnReplay.HasDelegate)
        {
            await this.OnReplay.InvokeAsync(instance);
        }
    }

    /// <summary>
    /// Handles the click on the suspend button
    /// </summary>
    /// <param name="instance">The instance to suspend</param>
    /// <returns></returns>
    protected async Task OnSuspendClickedAsync(WorkflowInstance instance)
    {
        if (this.OnSuspend.HasDelegate)
        {
            await this.OnSuspend.InvokeAsync(instance);
        }
    }

    /// <summary>
    /// Handles the click on the resume button
    /// </summary>
    /// <param name="instance">The instance to resume</param>
    /// <returns></returns>
    protected async Task OnResumeClickedAsync(WorkflowInstance instance)
    {
        if (this.OnResume.HasDelegate)
        {
            await this.OnResume.InvokeAsync(instance);
        }
    }

    /// <summary>
    /// Handles the click on the cancel button
    /// </summary>
    /// <param name="instance">The instance to cancel</param>
    /// <returns></returns>
    protected async Task OnCancelClickedAsync(WorkflowInstance instance)
    {
        if (this.OnCancel.HasDelegate)
        {
            await this.OnCancel.InvokeAsync(instance);
        }
    }

    protected async Task OnSuspendSelectedClickedAsync()
    {
        var selected = selectedInstanceNames.ToList();
        var nonRuningInstances = (WorkflowInstances??[]).Where(instance => selected.Contains(instance.GetName()) && instance.Status?.Phase != WorkflowInstanceStatusPhase.Running);
        foreach(var instance in nonRuningInstances)
        {
            if (this.OnToggleSelected.HasDelegate)
            {
                await OnToggleSelected.InvokeAsync(instance.GetName());
            }
        }
        if (this.OnSuspendSelected.HasDelegate)
        {
            await OnSuspendSelected.InvokeAsync();
        }
    }

    protected async Task OnResumeSelectedClickedAsync()
    {
        var selected = selectedInstanceNames.ToList();
        var nonSuspendedInstances = (WorkflowInstances ?? []).Where(instance => selected.Contains(instance.GetName()) && instance.Status?.Phase != WorkflowInstanceStatusPhase.Suspended);
        foreach (var instance in nonSuspendedInstances)
        {
            if (this.OnToggleSelected.HasDelegate)
            {
                await OnToggleSelected.InvokeAsync(instance.GetName());
            }
        }
        if (this.OnResumeSelected.HasDelegate)
        {
            await OnResumeSelected.InvokeAsync();
        } 
    }

    protected async Task OnCancelSelectedClickedAsync()
    {
        var selected = selectedInstanceNames.ToList();
        var nonOperativeInstances = (WorkflowInstances ?? []).Where(instance => selected.Contains(instance.GetName()) && !instance.IsOperative);
        foreach (var instance in nonOperativeInstances)
        {
            if (this.OnToggleSelected.HasDelegate)
            {
                await OnToggleSelected.InvokeAsync(instance.GetName());
            }
        }
        if (this.OnCancelSelected.HasDelegate)
        {
            await OnCancelSelected.InvokeAsync();
        }
    }
}