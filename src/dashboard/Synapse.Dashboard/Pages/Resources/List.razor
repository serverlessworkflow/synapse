@* 
    Copyright © 2022-Present The Synapse Authors
    <p>
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    <p>
    http://www.apache.org/licenses/LICENSE-2.0
    <p>
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@page "/resources"
@page "/resources/collections/{definitionType}"
@using Semver
@using Synapse.Dashboard.Pages.Resources.Collections
@using Synapse.Dashboard.Pages.Resources.Collections.Functions
@inherits StatefulComponent<ResourceListState>
@inject IBreadcrumbService BreadcrumbService
@inject NavigationManager NavigationManager

<PageTitle>Resources</PageTitle>

<AppRightSidebar>
    <Toolbar>
        @switch (selectedDefinitionType)
        {
            case "events":
                <button @onclick="OnCreateEventDefinitionCollection" class="btn btn-outline-dark" title="Create a new collection"><small class="bi bi-plus"></small><span class="btn-label"> New collection</span></button>
                break;
            case "authentications":
                <button @onclick="OnCreateAuthenticationDefinitionCollection" class="btn btn-outline-dark" title="Create a new collection"><small class="bi bi-plus"></small><span class="btn-label"> New collection</span></button>
                break;
            default:
                <button @onclick="OnCreateFunctionDefinitionCollection" class="btn btn-outline-dark" title="Create a new collection"><small class="bi bi-plus"></small><span class="btn-label"> New collection</span></button>
                break;
        }
    </Toolbar>
</AppRightSidebar>

<TabControl ContainerCssClass="d-flex flex-column w-100 h-100" OnTabPageChange="OnTabPageChanged">
    <TabPage Header="Functions" IsActive="@(selectedDefinitionType == "functions")">
        <div class="p-5">
            <div class="row">
                <div class="col-6">
                    <SearchBox PlaceHolder="Search collections..." OnSearch="OnSearchFunctionDefinitionCollection" OnClear="OnClearFunctionDefinitionCollectionSearch" />
                </div>
            </div>
            <Table Items="functionDefinitionCollections" AutoGenerateColumns="false">
                <RowTemplate Context="RenderContext">
                    <ExpandableDataRow>
                        <Header>
                            <CellCollectionPresenter Item="@RenderContext.Item" />
                        </Header>
                        <Body>
                            <td colspan="100">
                                <Table Items="RenderContext.Item.Value" AutoGenerateColumns="false">
                                    <RowTemplate Context="SubRenderContext">
                                        <tr>
                                            <CellCollectionPresenter Item="@SubRenderContext.Item" />
                                        </tr>
                                    </RowTemplate>
                                    <Columns>                        
                                        <Column T="V1FunctionDefinitionCollection" 
                                        Name="Version"
                                        ValueProvider="collection => collection.Version" />
                                        <Column T="V1FunctionDefinitionCollection" 
                                        Name="CreatedAt"
                                        ValueProvider="collection => collection.CreatedAt" />
                                        <Column T="V1FunctionDefinitionCollection"
                                        Name="Uri"
                                        ValueProvider="@(c => $"/api/v1/resources/collections/functions/{c.Id}")">
                                            <CellTemplate Context="context">
                                                <a href="@context.Value" target="_blank">@context.Value</a>
                                            </CellTemplate>
                                        </Column>
                                        <ViewDetailsColumn T="V1FunctionDefinitionCollection" OnViewDetails="collection => OnViewFunctionDefinitionCollection(collection)" />
                                    </Columns>
                                </Table>
                            </td>
                        </Body>
                    </ExpandableDataRow>
                </RowTemplate>
                <Columns>
                    <Column T="KeyValuePair<string, List<V1FunctionDefinitionCollection>>"
                    Name="Name"
                    ValueProvider="c => c.Key" />
                    <Column T="KeyValuePair<string, List<V1FunctionDefinitionCollection>>"
                    Name="Versions"
                    ValueProvider="c => c.Value.Count" />
                    <Column T="KeyValuePair<string, List<V1FunctionDefinitionCollection>>"
                    Name="Latest version"
                    ValueProvider="c => c.Value.Max(c => SemVersion.Parse(c.Version, SemVersionStyles.Any, 1024))" />
                    <Column T="KeyValuePair<string, List<V1FunctionDefinitionCollection>>"
                    Name="Resource Uri"
                    ValueProvider="@(c => $"/api/v1/resources/collections/functions/{c.Key.ToLowerInvariant().Slugify("-", false, null)}:latest/raw")">
                        <CellTemplate Context="context">
                            <a href="@context.Value" target="_blank">@context.Value</a>
                        </CellTemplate>
                    </Column>
                    <ViewDetailsColumn T="KeyValuePair<string, List<V1FunctionDefinitionCollection>>" OnViewDetails="kvp => OnViewFunctionDefinitionCollection(kvp.Value.First())" />
                </Columns>
            </Table>
        </div>     
    </TabPage>
    <TabPage Header="Events" IsActive="@(selectedDefinitionType == "events")">

    </TabPage>
    <TabPage Header="Authentications" IsActive="@(selectedDefinitionType == "authentications")">

    </TabPage>
</TabControl>

@code {
    private Dictionary<string, List<V1FunctionDefinitionCollection>> functionDefinitionCollections = null!;
    private IDisposable functionDefinitionCollectionSubscription = null!;
    private TabPage? activeTabPage;
    private string selectedDefinitionType = "functions";

    private string? definitionType;
    [Parameter]
    public string? DefinitionType { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.functionDefinitionCollectionSubscription = this.Feature
            .Subscribe(state =>
            {
                this.functionDefinitionCollections = state.FunctionDefinitionCollections
                    .GroupBy(c => c.Name)
                    .ToDictionary(g => g.Key, g => g.OrderByDescending(c => SemVersion.Parse(c.Version, SemVersionStyles.Any)).ToList())!;
                this.StateHasChanged();
            });
        this.Dispatcher.Dispatch(new QueryV1FunctionDefinitionCollections());
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (this.definitionType != this.DefinitionType)
        {
            this.definitionType = this.DefinitionType;
            this.selectedDefinitionType = this.definitionType?.ToLower()!;
            await this.UpdateBreadcrumbAsync();
            this.StateHasChanged();
        }  
    }

    protected virtual async Task UpdateBreadcrumbAsync()
    {
        IEnumerable<IBreadcrumbItem> breadcrumb;
        switch (this.selectedDefinitionType)
        {
            case "events":
                breadcrumb = KnownBreadcrumbs.EventDefinitionCollections;
                break;
            case "authentications":
                breadcrumb = KnownBreadcrumbs.AuthenticationDefinitionCollections;
                break;
            default:
                breadcrumb = KnownBreadcrumbs.FunctionDefinitionCollections;
                break;
        }
        await this.BreadcrumbService.Use(breadcrumb);
    }

    protected virtual void OnSearchFunctionDefinitionCollection(string searchTerm)
    {
        this.Dispatcher.Dispatch(new QueryV1FunctionDefinitionCollections(searchTerm));
    }

    protected virtual void OnClearFunctionDefinitionCollectionSearch()
    {
        this.Dispatcher.Dispatch(new QueryV1FunctionDefinitionCollections());
    }

    protected virtual void OnViewFunctionDefinitionCollection(V1FunctionDefinitionCollection collection)
    {
        this.NavigationManager.NavigateTo($"/resources/collections/functions/{collection.Id}");
    }

    protected virtual async Task OnTabPageChanged(TabPage page)
    {
        this.activeTabPage = page;
        this.selectedDefinitionType = page.Header?.ToLower()!;
        await this.UpdateBreadcrumbAsync();
        this.StateHasChanged();
    }

    protected virtual void OnCreateFunctionDefinitionCollection()
    {
        this.NavigationManager.NavigateTo("/resources/collections/functions/new");
    }

    protected virtual void OnCreateEventDefinitionCollection()
    {
        this.NavigationManager.NavigateTo("/resources/collections/events/new");
    }

    protected virtual void OnCreateAuthenticationDefinitionCollection()
    {
        this.NavigationManager.NavigateTo("/resources/collections/authentications/new");
    }

}
