@*
    Copyright © 2022-Present The Synapse Authors
    <p>
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    <p>
    http://www.apache.org/licenses/LICENSE-2.0
    <p>
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@page "/resources/collections/authentications/new"
@page "/resources/collections/authentications/edit/{collectionId}"
@using System.Reactive.Subjects
@using System.Reactive.Linq
@inherits StatefulComponent<AuthenticationDefinitionCollectionEditorState>
@inject IBreadcrumbService BreadcrumbService
@inject IMonacoEditorHelper MonacoEditorHelper
@inject NavigationManager NavigationManager

<PageTitle>New authentication definition collection</PageTitle>

<AppHeader>
    <span class="h5 m-0 p-0">New authentication definition collection</span>
</AppHeader>

<AppRightSidebar>
    <Toolbar>
        <button @onclick="OnSaveCollection" disabled="@State.Saving" class="btn btn-outline-dark" title="Save the current workflow"><small class="bi bi-cloud-upload"></small><span class="btn-label">Save</span></button>
        <button @onclick="OnResetCollection" disabled="@State.Saving" class="btn btn-outline-dark" title="Reset the current workflow"><small class="bi bi-x-circle"></small><span class="btn-label">Reset</span></button>
    </Toolbar>
</AppRightSidebar>

@if(collection != null)
{
    <div class="row">
        <div class="col-6">
            <div class="border border-secondary rounded-2 p-3 mb-3">
                <Expander IsExpanded="@(State.ExpanderStates!["general"])" OnToggleExpand="@(isExpanded => OnToggleExpand("general", isExpanded))">
                    <Header>
                       <h5><span class="bi bi-info-circle me-2"></span>General</h5>
                    </Header>
                    <Body>
                        <table class="table">
                            <tbody>
                                <tr><td>Name</td><td><input type="text" placeholder="Name" required value="@collection.Name" @onchange="async e => await OnNameChanged((string?)e.Value)" class="form-control" /></td></tr>
                                <tr>
                                    <td>Id</td>
                                    <td>
                                        <div class="input-group mb-3">
                                            <input type="text" placeholder="Id" readonly="@autoGenerateId" required value="@collection.Id" @onchange="async e => await OnPropertyChanged(nameof(collection.Id), d => d.Id = (string)e.Value!)" class="form-control" />
                                            <div class="input-group-text">
                                                <input class="form-check-input mt-0" type="checkbox" checked="@autoGenerateId" @onchange="async e => await OnAutoGenerateIdChanged((bool)e.Value)">
                                                <label class="ms-1" title="Auto-generate the workflow id based on its sluggified, kebab-cased name">Auto-generate</label>
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                                <tr><td>Description</td><td><textarea type="text" placeholder="Description" value="@collection.Description" @onchange="async e => await OnPropertyChanged(nameof(collection.Description), d => d.Description = (string)e.Value!)" class="form-control"></textarea></td></tr>
                                <tr><td>Version</td><td><input type="text" placeholder="Version" required value="@collection.Version" @onchange="async e => await OnPropertyChanged(nameof(collection.Version), d => d.Version = (string)e.Value!)" class="form-control" /></td></tr>
                            </tbody>
                        </table>
                    </Body>
                </Expander>
            </div>
            <div class="border border-secondary rounded-2 p-3 mb-3">
                <Expander IsExpanded="@(State.ExpanderStates!["authentications"])" OnToggleExpand="@(isExpanded => OnToggleExpand("authentications", isExpanded))">
                    <Header>
                        <h5><span class="bi bi-code-square me-2"></span>Authentications</h5>
                    </Header>
                    <Body>
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Kind</th>
                                    <th>Source</th>
                                    <th>Type</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (collection.Authentications != null)
                                {
                                    @foreach (var authentication in collection.Authentications)
                                    {
                                        <ExpandableDataRow>
                                            <Header>
                                            <td>@authentication.Name</td>
                                            <td><span class="badge bg-secondary">@EnumHelper.Stringify(authentication.Scheme)</span></td>
                                            <td class="d-flex justify-content-end"><button @onclick="async () => await OnPropertyChanged(nameof(collection.Authentications), d => d.Authentications?.Remove(authentication))" @onclick:stopPropagation="true" class="btn btn-outline-dark"><small class="bi bi-trash"></small></button></td>
                                            </Header>
                                            <Body>
                                                <td colspan="5">
                                                    <AuthenticationEditor Authentication="@authentication" OnChange="OnAuthenticationChanged" />
                                                </td>
                                            </Body>
                                        </ExpandableDataRow>
                                    }
                                }
                            </tbody>
                        </table>
                        <button class="btn btn-block btn-warning text-white w-100" @onclick="OnCreateAuthentication">Create new e</button>
                    </Body>
                </Expander>
            </div>
        </div>
        <div class="col-6">
            <MonacoEditor @ref="textBasedEditor"
            CssClass="vh-85"
            ConstructionOptions="MonacoEditorHelper.GetStandaloneEditorConstructionOptions()"
            OnDidInit="OnTextBasedEditorInit"
            OnDidChangeModelContent="OnSerializedCollectionChanged" />
        </div>
    </div>
}

@code 
{

    private bool autoGenerateId = true;
    private string? collectionId;
    [Parameter] public string? CollectionId { get; set; }

    private MonacoEditor? textBasedEditor;
    private Subject<string>? editorValue;
    private Subject<bool>? disposeNotifier;
    private V1AuthenticationDefinitionCollection? collection;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await this.BreadcrumbService.Use(KnownBreadcrumbs.CreateAuthenticationDefinitionCollection);
        this.disposeNotifier = new Subject<bool>();
        this.editorValue = new Subject<string>();
        this.editorValue
            .Throttle(TimeSpan.FromMilliseconds(300))
            .DistinctUntilChanged()
            .TakeUntil(this.disposeNotifier)
            .Subscribe(text => this.Dispatcher.Dispatch(new HandleTextBasedEditorChange(text)));
        AuthenticationDefinitionCollectionEditorSelectors.SelectSerializedAuthenticationDefinitionCollection(this.Store)
            .TakeUntil(this.disposeNotifier)
            .Subscribe(async (text) =>
            {
                if (text != null && this.textBasedEditor != null)
                {
                    var currentText = await this.textBasedEditor!.GetValue();
                    if (currentText != text)
                        await this.textBasedEditor.SetValue(text);
                }
            });
        AuthenticationDefinitionCollectionEditorSelectors.SelectAuthenticationDefinitionCollection(this.Store)
            .TakeUntil(this.disposeNotifier)
            .Subscribe(async (definition) =>
            {
                if (this.collection != definition)
                {
                    this.collection = definition;
                    this.StateHasChanged();
                }
            });
        if (string.IsNullOrWhiteSpace(this.collectionId))
            this.Dispatcher.Dispatch(new InitializeState());
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (this.collectionId != this.CollectionId)
        {
            this.collectionId = this.CollectionId;
            if (!string.IsNullOrWhiteSpace(this.collectionId))
                this.Dispatcher.Dispatch(new InitializeState(this.collectionId));
        }
    }

    protected async Task OnTextBasedEditorInit(MonacoEditorBase editor)
    {
        await this.OnSetTextBasedEditorLanguage();
        await this.textBasedEditor!.SetValue(this.State.SerializedCollection);
    }

    protected async Task OnSetTextBasedEditorLanguage()
    {
        var model = await this.textBasedEditor!.GetModel();
        await MonacoEditorBase.SetModelLanguage(model, this.MonacoEditorHelper.PreferedLanguage);
    }

    protected virtual void OnToggleExpand(string sectionName, bool isExpanded)
    {
        this.Dispatcher.Dispatch(new ToggleExpand(sectionName, isExpanded));
        this.StateHasChanged();
    }

    protected virtual async Task OnAutoGenerateIdChanged(bool autoGenerate)
    {
        this.autoGenerateId = autoGenerate;
        if (this.autoGenerateId)
            await this.OnPropertyChanged(nameof(collection.Name), w => w.Id = w.Name.Slugify("-").ToLowerInvariant());
    }

    protected virtual async Task OnNameChanged(string? name)
    {
        if (this.collection == null)
            return;
        await this.OnPropertyChanged(nameof(collection.Name), w =>
        {
            w.Name = name;
            if (autoGenerateId && !string.IsNullOrWhiteSpace(name))
                w.Id = name.Slugify("-").ToLowerInvariant();
        });
    }

    protected virtual async Task OnCreateAuthentication()
    {
        if (this.collection == null)
            return;
        if (this.collection.Authentications == null)
            this.collection.Authentications = new List<AuthenticationDefinition>();
        var e = new AuthenticationDefinition() { Name = $"authentication-{collection.Authentications.Count + 1}", Scheme = AuthenticationScheme.Basic, Properties = new BasicAuthenticationProperties() { Username = "username", Password = "password" } };
        await this.OnPropertyChanged(nameof(collection.Authentications), d =>
        {
            d.Authentications!.Add(e);
        });
    }

    protected virtual async Task OnAuthenticationChanged(AuthenticationDefinition? e)
    {
        await this.OnPropertyChanged(nameof(collection.Authentications));
    }

    protected virtual async Task OnPropertyChanged(string property, Action<V1AuthenticationDefinitionCollection>? patch = null)
    {
        if (this.collection == null)
            return;
        if (patch != null)
            patch(this.collection);
        this.Dispatcher.Dispatch(new HandleFormBasedEditorChange(collection));
        await Task.CompletedTask;
    }

    protected async Task OnSerializedCollectionChanged(ModelContentChangedEvent e)
    {
        if (!this.State.Updating && this.editorValue != null)
        {
            var text = await this.textBasedEditor!.GetValue();
            this.editorValue.OnNext(text);
        }
    }

    protected virtual void OnResetCollection()
    {
        this.Dispatcher.Dispatch(new InitializeState(false));
    }

    protected virtual void OnSaveCollection()
    {
        if (this.collection == null)
            return;
        this.Dispatcher.Dispatch(new SaveCollection(this.collection));
        this.StateHasChanged();
    }

}
