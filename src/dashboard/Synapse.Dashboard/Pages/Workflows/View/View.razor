@*
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@page "/workflows/{workflowId}"
@page "/workflows/{workflowId}/instance/{workflowInstanceId}"
@using Microsoft.AspNetCore.SignalR.Client
@using Neuroglia.Data.Flux
@using Neuroglia.Serialization
@using Newtonsoft.Json
@using System.Text
@using Synapse.Dashboard.Pages.Workflows.View.Actions
@using Synapse.Dashboard.Pages.Workflows.View.State
@using Synapse.Integration.Events.WorkflowInstances
@using Newtonsoft.Json.Serialization
@using System.Reactive.Subjects
@using System.Reactive.Linq
@inherits StatefulComponent<WorkflowViewState>
@inject ISynapseManagementApi SynapseApi
@inject IMonacoEditorHelper MonacoEditorHelper
@inject IBreadcrumbService BreadcrumbService
@inject IJsonSerializer Serializer
@inject IJSRuntime JS
@inject IYamlConverter YamlConverter
@inject HubConnection HubConnection
@inject NavigationManager NavigationManager

<PageTitle>@workflow?.Id</PageTitle>
<AppRightSidebar>
    @if (workflow != null && activeInstance == null)
    {
        <WorkflowToolbar @ref="workflowToolbar" Workflow="workflow" />
    }
    else if (workflow != null && activeInstance != null)
    {
        <WorkflowInstanceToolbar WorkflowInstance="activeInstance" />
    }
</AppRightSidebar>
<AppLeftSidebar>
    @if (workflow != null && activeInstance == null)
    {
        <WorkflowDetails Workflow="workflow" />
    }
    else if (workflow != null && activeInstance != null)
    {
        <WorkflowInstanceDetails WorkflowInstance="activeInstance" Workflow="workflow" />
    }
</AppLeftSidebar>

@if (workflow != null)
{
    <div class="container-fluid h-100 d-flex flex-column">
        <div class="row h-50 position-relative">
            <WorkflowDiagram @ref="workflowDiagram" WorkflowDefinition="workflow.Definition" OnMouseUp="async (e) => await HandleNodeClick(e)" />
        </div>
        <div class="row h-50 mh-50">
            @if (activeInstance == null)
            {
                <TabControl ContainerCssClass="container d-flex flex-column mh-100">
                    <TabPage Header="Instances">
                        <Table Items="instances" AutoGenerateColumns="false">
                            <Columns>
                                <Column T="V1WorkflowInstance"
                                Name="Key"
                                ValueProvider="source => source.Key"
                                PropertyPath="@PropertyPath.Parse(nameof(V1WorkflowInstance.Key))" />
                                <Column T="V1WorkflowInstance"
                                Name="Status"
                                ValueProvider="source => source.Status"
                                PropertyPath="@PropertyPath.Parse(nameof(V1WorkflowInstance.Status))">
                                    <CellTemplate Context="context">
                                        <span class="badge rounded-pill @GetCssClassFor((V1WorkflowInstanceStatus)context.Value!)">@(EnumHelper.Stringify((V1WorkflowInstanceStatus)context.Value))</span>
                                    </CellTemplate>
                                </Column>
                                <Column T="V1WorkflowInstance"
                                Name="Started at"
                                ValueProvider="source => source.StartedAt"
                                PropertyPath="@PropertyPath.Parse(nameof(V1WorkflowInstance.StartedAt))"
                                Format="MM/dd/yyyy, HH:mm" />
                                <Column T="V1WorkflowInstance"
                                Name="Executed at"
                                ValueProvider="source => source.ExecutedAt"
                                PropertyPath="@PropertyPath.Parse(nameof(V1WorkflowInstance.ExecutedAt))"
                                Format="MM/dd/yyyy, HH:mm" />
                                <Column T="V1WorkflowInstance"
                                Name="Duration"
                                ValueProvider="source => ((V1WorkflowInstance)source).Duration"
                                IsSorteable="false"
                                IsFilterable="false" />
                                <Column T="V1WorkflowInstance"
                                ValueProvider="source => source"
                                IsSorteable="false"
                                IsFilterable="false"
                                CssClass="d-flex justify-content-end gap-1">
                                    <CellTemplate Context="context">
                                        @if (((V1WorkflowInstance)context.Value!).Status == V1WorkflowInstanceStatus.Running)
                                        {
                                            <button @onclick="() => Dispatcher.Dispatch(new SuspendV1WorkflowInstance(((V1WorkflowInstance)context.Value!).Id))" @onclick:stopPropagation="true" class="btn btn-outline-dark"><small class="bi bi-pause"></small><span class="btn-label"> Suspend</span></button>
                                        }
                                        @if (((V1WorkflowInstance)context.Value!).Status == V1WorkflowInstanceStatus.Suspended)
                                        {
                                            <button @onclick="() => Dispatcher.Dispatch(new ResumeV1WorkflowInstance(((V1WorkflowInstance)context.Value!).Id))" @onclick:stopPropagation="true" class="btn btn-outline-dark"><small class="bi bi-play"></small><span class="btn-label"> Resume</span></button>
                                        }
                                        @if (((V1WorkflowInstance)context.Value!).Status <= V1WorkflowInstanceStatus.Resuming)
                                        {
                                            <button @onclick="() => Dispatcher.Dispatch(new CancelV1WorkflowInstance(((V1WorkflowInstance)context.Value!).Id))" @onclick:stopPropagation="true" class="btn btn-outline-dark"><small class="bi bi-stop"></small><span class="btn-label"> Cancel</span></button>
                                        }
                                        <button @onclick="async () => await StartWith(((V1WorkflowInstance?)context.Value)?.Input)" @onclick:stopPropagation="true" class="btn btn-outline-dark"><small class="bi bi-arrow-clockwise"></small><span class="btn-label">&nbsp; Start new</span></button><button @onclick="async () => await ViewWorkflowInstance(context.Item)" @onclick:stopPropagation="true" class="btn btn-outline-dark mx-1"><small class="oi oi-info"></small><span class="btn-label"> Details</span></button>
                                        @if (((V1WorkflowInstance)context.Value!).Status == V1WorkflowInstanceStatus.Faulted
                                        || ((V1WorkflowInstance)context.Value!).Status == V1WorkflowInstanceStatus.Cancelled
                                        || ((V1WorkflowInstance)context.Value!).Status == V1WorkflowInstanceStatus.Completed)
                                        {
                                            <button @onclick="() => OnDeleteWorkflowInstanceAsync(((V1WorkflowInstance)context.Value!).Id)" @onclick:stopPropagation="true" class="btn btn-outline-dark"><small class="bi bi-trash"></small><span class="btn-label"> Delete</span></button>
                                        }
                                    </CellTemplate>
                                </Column>
                            </Columns>
                        </Table>
                    </TabPage>
                    <TabPage Header="Definition">
                        @if (workflow?.Definition != null)
                        {
                            <div class="h-100 mh-100 d-flex flex-column justify-content-between align-items-start">
                                <PreferedLanguageSelector PreferedLanguageChange="ToggleLanguage" />
                                <div class="flex-grow d-flex flex-row w-100">
                                    <div class="w-100 h-100 mh-100">
                                        <MonacoEditor @ref="editor"
                                          CssClass="h-100"
                                          ConstructionOptions="MonacoEditorHelper.GetStandaloneEditorConstructionOptions(string.Empty, true, MonacoEditorHelper.PreferedLanguage)"
                                          OnDidInit="OnMonacoEditorDidInit" />
                                    </div>
                                </div>
                            </div>
                        }
                    </TabPage>
                    <TabPage Header="Metrics">
                        <WorkflowsMetrics Workflow="workflow" />
                    </TabPage>
                </TabControl>
            }
            else if (activeInstance != null)
            {
                <TabControl ContainerCssClass="mh-100 d-flex flex-column">
                    <TabPage Header="Input/Output">
                        <WorkflowInstanceIO WorkflowInstance="activeInstance" />
                    </TabPage>
                    <TabPage Header="Activities">
                        <WorkflowInstanceActivitiesList Activities="activities" />
                    </TabPage>
                    <TabPage Header="Logs">
                        <WorkflowInstanceLogs WorkflowInstance="activeInstance" />
                    </TabPage>
                </TabControl>
            }
        </div>
    </div>
    <Modal @ref="deleteWorkflowDialog">
        <Title>Confirm workflow instance deletion</Title>
        <Body>
            <p>Are you sure you want to delete the workflow instance <a href="@($"/workflows/{workflowId}/instance/{selectedWorkflowInstanceId}")" target="_blank">@selectedWorkflowInstanceId</a>?</p>
            <p class="text-warning">Because <strong>deletion cannot be reversed</strong>, make sure to <a href="@($"/api/v1/workflow-instances/{selectedWorkflowInstanceId}/archive")" target="_blank">download the instance artifacts</a> before proceeding</p>
        </Body>
        <Footer>
            <button @onclick="deleteWorkflowDialog!.HideAsync" class="btn btn-secondary">No</button>
            <button @onclick="OnConfirmDeleteWorkflowInstanceAsync" class="btn btn-warning">Yes</button>
        </Footer>
    </Modal>
}
else
{
    <Loader />
}
@code
{

    [Parameter] public string WorkflowId { get; set; } = null!;
    protected string workflowId = null!;
    [Parameter] public string? WorkflowInstanceId { get; set; } = null!;
    protected string? workflowInstanceId = null!;

    private Modal? deleteWorkflowDialog = null!;
    private string? selectedWorkflowInstanceId;

    protected MonacoEditor? editor = null;
    protected Subject<bool>? disposeNotifier;
    protected WorkflowDiagram? workflowDiagram = null;
    protected V1Workflow? workflow = null;
    protected V1WorkflowInstance? activeInstance = null;
    protected IEnumerable<V1WorkflowInstance> instances = new List<V1WorkflowInstance>();
    protected List<V1WorkflowActivity> activities = new List<V1WorkflowActivity>();
    protected WorkflowToolbar? workflowToolbar = null;

    protected override async Task OnInitializedAsync()
    {
        this.disposeNotifier = new Subject<bool>();
        WorkflowViewSelectors.SelectWorkflow(this.Store)
            .TakeUntil(this.disposeNotifier)
            .Subscribe(async workflow =>
            {
                this.workflow = workflow;
                await this.Refresh();
            });
        WorkflowViewSelectors.SelectWorkflowInstances(this.Store)
            .TakeUntil(this.disposeNotifier)
            .Subscribe(async instances =>
            {
                this.instances = instances?.Values.AsEnumerable() ?? new List<V1WorkflowInstance>();
                await this.Refresh();
            });
        WorkflowViewSelectors.SelectActiveInstance(this.Store)
            .TakeUntil(this.disposeNotifier)
            .Subscribe(async instance =>
            {
                this.activeInstance = instance;
                await this.Refresh();
            });
        WorkflowViewSelectors.SelectActivities(this.Store)
            .Throttle(TimeSpan.FromMilliseconds(20))
            .TakeUntil(this.disposeNotifier)
            .Subscribe(async activities =>
            {
                this.activities = activities.ToList() ?? new List<V1WorkflowActivity>();
                await this.Refresh();
            });
        this.Dispatcher.Dispatch(new InitializeState());
        await this.BreadcrumbService.Use(KnownBreadcrumbs.Workflows);
        await this.BreadcrumbService.AddItem(new BreadcrumbItem(this.WorkflowId.ToString(), $"/workflows/{this.WorkflowId}"));
    }

    protected override async Task OnParametersSetAsync()
    {
        if (this.WorkflowId != this.workflowId)
        {
            this.workflowId = this.WorkflowId;
            this.Dispatcher.Dispatch(new GetWorkflowById(this.workflowId));
            await this.UpdateActivities();
        }
        if (this.WorkflowInstanceId != this.workflowInstanceId)
        {
            this.workflowInstanceId = this.WorkflowInstanceId;
            if (this.WorkflowInstanceId == null)
            {
                this.Dispatcher.Dispatch(new SetActiveInstance(null));
                this.activeInstance = null!;
            }
            else
            {
                this.Dispatcher.Dispatch(new SetActiveInstance(this.instances.FirstOrDefault(i => i.Id == this.WorkflowInstanceId)));
                if (!this.BreadcrumbService.Items.Any(i => i.Link == new Uri(this.NavigationManager.Uri).PathAndQuery))
                {
                    await this.BreadcrumbService.AddCurrentUri($"Instance {this.WorkflowInstanceId}");
                }
            }
            await this.UpdateActivities();
        }
    }

    protected async Task Refresh()
    {
        await this.UpdateActivities();
        this.UpdateMetrics();
        this.StateHasChanged();
    }

    protected async Task UpdateActivities()
    {
        if (this.workflowDiagram != null)
        {
            if (this.activeInstance == null)
            {
                await this.workflowDiagram.DisplayActivityStatusFor(this.instances, this.activities);
            }
            else
            {
                await this.workflowDiagram.DisplayActivityStatusFor(this.activeInstance, this.activities, true);
            }
        }
    }

    protected void UpdateMetrics()
    {
        if (this.workflow != null && this.instances != null)
        {
            var durations = this.instances.Where(instances => instances.Duration.HasValue).Select(instance => instance.Duration!.Value);
            this.workflow.TotalInstanceCount = this.instances.Count();
            this.workflow.RunningInstanceCount = this.instances.Where(instance => instance.Status <= V1WorkflowInstanceStatus.Resuming).Count();
            this.workflow.ExecutedInstanceCount = this.instances.Where(instance => instance.Status > V1WorkflowInstanceStatus.Resuming).Count();
            this.workflow.CompletedInstanceCount = this.instances.Where(instance => instance.Status == V1WorkflowInstanceStatus.Completed).Count();
            this.workflow.FaultedInstanceCount = this.instances.Where(instance => instance.Status == V1WorkflowInstanceStatus.Faulted).Count();
            this.workflow.CancelledInstanceCount = this.instances.Where(instance => instance.Status == V1WorkflowInstanceStatus.Cancelled || instance.Status == V1WorkflowInstanceStatus.Cancelling).Count();
            this.workflow.TotalInstanceExecutionTime = TimeSpan.FromMilliseconds(this.instances.Sum(instance => instance.Duration.HasValue ? instance.Duration.Value.TotalMilliseconds : 0));
            this.workflow.ShortestInstanceDuration = durations.Any() ? durations.Min() : null;
            this.workflow.LongestInstanceDuration = durations.Any() ? durations.Max() : null;
        }
    }

    protected async Task StartWith(Neuroglia.Serialization.Dynamic? input)
    {
        if (this.workflowToolbar == null || input == null)
            return;
        var serializedInput = await this.Serializer.SerializeAsync(input);
        await this.workflowToolbar.OnShowWorkflowInputModal(serializedInput);
    }

    protected string GetCssClassFor(V1WorkflowInstanceStatus workflowInstanceStatus)
    {
        return workflowInstanceStatus switch
        {
            V1WorkflowInstanceStatus.Pending => "bg-secondary",
            V1WorkflowInstanceStatus.Scheduling => "border-primary",
            V1WorkflowInstanceStatus.Scheduled => "bg-primary",
            V1WorkflowInstanceStatus.Starting or V1WorkflowInstanceStatus.Resuming => "border-primary text-primary",
            V1WorkflowInstanceStatus.Running => "bg-primary",
            V1WorkflowInstanceStatus.Suspended => "bg-warning",
            V1WorkflowInstanceStatus.Faulted => "bg-danger",
            V1WorkflowInstanceStatus.Cancelling => "border-danger text-primary",
            V1WorkflowInstanceStatus.Cancelled => "bg-danger",
            V1WorkflowInstanceStatus.Completed => "bg-success",
            _ => string.Empty
        };
    }

    protected async Task OnDeleteWorkflowInstanceAsync(string workflowInstanceId)
    {
        this.selectedWorkflowInstanceId = workflowInstanceId;
        await this.deleteWorkflowDialog!.ShowAsync();
    }

    protected async Task OnConfirmDeleteWorkflowInstanceAsync()
    {
        await this.deleteWorkflowDialog!.HideAsync();
        await this.SynapseApi.DeleteWorkflowInstanceAsync(this.selectedWorkflowInstanceId!);
        this.Dispatcher.Dispatch(new DeleteV1WorkflowInstance(this.selectedWorkflowInstanceId!));
    }

    protected async Task ViewWorkflowInstance(V1WorkflowInstance workflowInstance)
    {
        var destination = $"/workflows/{this.WorkflowId}/instance/{workflowInstance.Id}";
        await this.BreadcrumbService.AddItem(new BreadcrumbItem($"Instance {workflowInstance.Id}", destination));
        this.NavigationManager.NavigateTo(destination);
    }

    protected async Task HandleNodeClick(GraphEventArgs<MouseEventArgs> e)
    {
        if (e.GraphElement != null)
        {
            switch (e.GraphElement)
            {
                case SubflowRefNodeViewModel:
                    var subFlowNode = (SubflowRefNodeViewModel)e.GraphElement;
                    var subFlowId = $"{subFlowNode.Subflow.WorkflowId}:{subFlowNode.Subflow.Version ?? "latest"}";
                    if (this.WorkflowInstanceId == null)
                    {
                        var destination = $"/workflows/{subFlowId}";
                        await this.BreadcrumbService.AddItem(new BreadcrumbItem($"Subflow {subFlowId}", destination));
                        this.NavigationManager.NavigateTo(destination);
                    }
                    else
                    {
                        var destination = $"/workflows/{subFlowId}";
                        await this.BreadcrumbService.AddItem(new BreadcrumbItem($"Subflow {subFlowId}", destination));
                        var stateNode = this.workflowDiagram!.Graph?.AllClusters[subFlowNode.ParentId!.Value] as StateNodeViewModel;
                        if (stateNode != null)
                        {
                            var activity = this.activities?.FirstOrDefault(activity =>
                                activity.Type == V1WorkflowActivityType.Action
                                && activity.Metadata["state"] == stateNode.State.Name
                                && activity.Metadata["action"] == subFlowNode.Action.Name
                            );
                            if (activity?.Output != null)
                            {
                                var output = activity.Output.ToObject<V1WorkflowInstanceExecutedIntegrationEvent>();
                                var instanceId = output?.AggregateId;
                                if (instanceId != null)
                                {
                                    destination += $"/instance/{instanceId}";
                                    await this.BreadcrumbService.AddItem(new BreadcrumbItem($"Instance {instanceId}", destination));
                                }
                            }
                        }
                        this.NavigationManager.NavigateTo(destination);
                    }
                    this.StateHasChanged();
                    break;
                case InjectNodeViewModel:
                    Console.WriteLine("inject clicked");
                    break;
            }
        }
        //await Task.CompletedTask;
    }

    protected virtual async Task ToggleLanguage(string language)
    {
        await this.OnMonacoEditorDidInit(this.editor! as MonacoEditorBase);
        this.StateHasChanged();
    }

    protected async Task OnMonacoEditorDidInit(MonacoEditorBase editor)
    {
        var model = await (editor as MonacoEditor)!.GetModel();
        await MonacoEditorBase.SetModelLanguage(model, this.MonacoEditorHelper.PreferedLanguage);
        var text = JsonConvert.SerializeObject(this.workflow!.Definition, Formatting.Indented, new JsonSerializerSettings() { ContractResolver = new NonPublicSetterContractResolver() });
        if (this.MonacoEditorHelper.PreferedLanguage == PreferedLanguage.YAML)
        {
            text = await this.YamlConverter.JsonToYaml(text);
        }
        await (editor as MonacoEditor)!.SetValue(text);
    }

    private bool disposed;
    protected override void Dispose(bool disposing)
    {
        if (!this.disposed)
        {
            if (this.disposeNotifier != null)
            {
                this.disposeNotifier.OnNext(true);
                this.disposeNotifier.OnCompleted();
                this.disposeNotifier.Dispose();
                this.disposeNotifier = null;
            }
            this.disposed = true;
        }
        base.Dispose(disposing);
    }

}