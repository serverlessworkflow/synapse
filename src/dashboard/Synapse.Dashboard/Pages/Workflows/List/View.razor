@*
    Copyright © 2024-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@page "/"
@page "/workflows"
@attribute [Authorize]
@namespace Synapse.Dashboard.Pages.Workflows.List
@using BlazorBootstrap
@inherits NamespacedResourceManagementComponent<View, WorkflowListComponentStore, WorkflowListState, Workflow>
@inject IBreadcrumbManager BreadcrumbManager
@inject NavigationManager NavigationManager

<ApplicationTitle>Workflows</ApplicationTitle>

<div class="d-flex flex-row justify-content-between align-items-center">
    <h4>Workflows</h4>
    <span><!--@(Resources?.Count ?? 0) items--></span>
    <div class="d-flex">
        <select class="form-select m-2" @onchange="OnNamespaceChanged">
            <option value="">All namespaces</option>
            @if (Namespaces != null && Namespaces.Count > 0)
            {
                foreach (var namespaceResource in Namespaces)
                {
                    <option value="@namespaceResource.GetName()" selected="@(@namespaceResource.GetName() == @namespace)">@namespaceResource.GetName()</option>
                }
            }
        </select>
        <select class="form-select m-2" @onchange="(e) => Store.SetOperator(e.Value?.ToString())">
            <option value="">All operators</option>
            @if (Operators != null && Operators.Count > 0)
            {
                foreach (var operatorResource in Operators)
                {
                    var operatorName = operatorResource.GetName() + "." + operatorResource.GetNamespace();
                    <option value="@operatorName" selected="@(@operatorName == Operator)">@operatorName</option>
                }
            }
        </select>
        <input type="search" class="form-control rounded my-2 me-2" placeholder="Search" value="@SearchTerm" @oninput="OnSearchInput" />
        <div class="dropdown d-flex align-content-center">
            <button class="btn btn-sm" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false" title="" @onclick:stopPropagation="true"><i class="bi bi-three-dots-vertical"></i></button>
            <ul class="dropdown-menu">
                <li><a class="dropdown-item @(SelectedResourceNames.Count == 0 ? "text-mute" : "text-danger")" href="#" @onclick="async _ => await(SelectedResourceNames.Count == 0 ? Task.CompletedTask : OnDeleteSelectedResourcesAsync())" @onclick:preventDefault="true" @onclick:stopPropagation="true"><Icon Name="IconName.Trash" /> Delete selected</a></li>
            </ul>
        </div>
    </div>
</div>
<div class="table-container">
    @if (Loading)
    {
        <Loader />
    }
    <table class="table table-hover">
        <thead>
            <tr>
                <th class="sticky-header text-start">Name</th>
                <th class="sticky-header text-start">Namespace</th>
                <th class="sticky-header text-center">Creation Time</th>
                <th class="sticky-header text-center">Last Start Time</th>
                <th class="sticky-header text-center">Last End Time</th>
                <th class="sticky-header text-center">Versions</th>
                <th class="sticky-header text-center">Latest</th>
                <th class="sticky-header text-center">Instances</th>
                <th class="sticky-header text-center">Schedule</th>
                <th class="sticky-header text-center">Operator</th>
                <th class="sticky-header text-end"></th>
                <th class="sticky-header text-center align-middle">
                    <input @ref="CheckboxAll" type="checkbox" @onclick="(_) => Store.ToggleResourceSelection()" @onclick:preventDefault="true" @onclick:stopPropagation="true" />
                </th>
            </tr>
        </thead>
        <tbody>
            <Virtualize @ref="Store.Virtualize" Context="resource" ItemsProvider="Store.ProvideResources" ItemSize="61">
                <ItemContent>
                    <tr @onclick="_ => OnViewWorkflow(resource)" class="cursor-pointer">
                        <td class="text-start">@resource.Metadata.Name</td>
                        <td class="text-start">
                            <a href="#" @onclick="_ => Store.SetNamespace(resource.Metadata.Namespace)" @onclick:preventDefault="true" @onclick:stopPropagation="true">@resource.Metadata.Namespace</a>
                            <a href="/namespaces/@resource.Metadata.Namespace" @onclick:stopPropagation="true"><Icon Name="IconName.BoxArrowUpRight" Class="small" /></a>
                        </td>
                        <td class="text-center">@resource.Metadata.CreationTimestamp?.RelativeFormat()</td>
                        <td class="text-center">@(resource.Status?.Versions.Where(v => v.Value.LastStartedAt.HasValue).Select(v => v.Value.LastStartedAt).Order().LastOrDefault()?.RelativeFormat() ?? "-")</td>
                        <td class="text-center">@(resource.Status?.Versions.Where(v => v.Value.LastEndedAt.HasValue).Select(v => v.Value.LastEndedAt).Order().LastOrDefault()?.RelativeFormat() ?? "-")</td>
                        <td class="text-center">@resource.Spec.Versions.Count</td>
                        <td class="text-center">@resource.Spec.Versions.GetLatest().Document.Version</td>
                        <td class="text-center">@resource.Status?.Versions.Values.Sum(s => s.TotalInstances)</td>
                        <td class="text-center">
                            @if (resource.Spec.Versions.GetLatest().Schedule == null)
                            {
                                <span>-</span>
                            }
                            else
                            {
                                <span class="badge rounded-pill border border-secondary text-secondary">@GetScheduleType(resource)</span>
                            }
                        </td>
                        <td class="text-center">
                            @if (resource.Metadata.Labels?.TryGetValue(SynapseDefaults.Resources.Labels.Operator, out var operatorName) == true && !string.IsNullOrWhiteSpace(operatorName))
                            {
                                var segments = operatorName.Split(".");
                                var ns = segments.Last();
                                var name = segments.Take(segments.Count() - 1).Join('.');
                                <a href="#" @onclick="_ => Store.SetOperator(operatorName)" @onclick:preventDefault="true" @onclick:stopPropagation="true">@operatorName</a>
                                <a href="/operators/@ns/@name" @onclick:stopPropagation="true"><Icon Name="IconName.BoxArrowUpRight" Class="small" /></a>
                            }
                            else
                            {
                                <span>-</span>
                            }
                        </td>
                        <td class="text-end">
                            <div class="dropdown">
                                <button class="btn btn-sm" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false" title="" @onclick:stopPropagation="true"><i class="bi bi-three-dots-vertical"></i></button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" href="#" @onclick="_ => OnCreateWorkflowVersion(resource.GetNamespace()!, resource.GetName())" @onclick:preventDefault="true" @onclick:stopPropagation="true"><Icon Name="IconName.Copy" /> New version</a></li>
                                    <li><a class="dropdown-item text-danger" href="#" @onclick="async _ => await OnDeleteResourceAsync(resource)" @onclick:preventDefault="true" @onclick:stopPropagation="true"><Icon Name="IconName.Trash" /> Delete</a></li>
                                </ul>
                            </div>
                        </td>
                        <td class="text-center align-middle">
                            <input type="checkbox" checked="@SelectedResourceNames.Contains(resource.GetName())" @onclick="(_) => Store.ToggleResourceSelection(resource.GetName())" @onclick:preventDefault="true" @onclick:stopPropagation="true" />
                        </td>
                    </tr>
                </ItemContent>
                <Placeholder>
                    <tr class="row-placeholder">
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                    </tr>
                </Placeholder>
            </Virtualize>
        </tbody>
    </table>
</div>

<Button Outline="true" Color="ButtonColor.Primary" @onclick="_ => OnCreateWorkflow()"><Icon Name="IconName.Plus" /></Button>

<ConfirmDialog @ref="Dialog" />

@code
{

    /// <summary>
    /// Gets the list of available <see cref="Synapse.Resources.Operator"/>s
    /// </summary>
    protected EquatableList<Operator>? Operators { get; set; }

    /// <summary>
    /// Gets selected <see cref="Synapse.Resources.Operator"/>
    /// </summary>
    protected string? Operator { get; set; }

    /// <inheritdoc/>
    protected override void OnInitialized()
    {
        base.OnInitialized();
        BreadcrumbManager.Use(Breadcrumbs.Workflows);
        Store.Operators.Subscribe(value => OnStateChanged(_ => Operators = value), token: CancellationTokenSource.Token);
        Store.Operator.Subscribe(value => OnStateChanged(_ => Operator = value), token: CancellationTokenSource.Token);
    }

    string GetScheduleType(Workflow workflow)
    {
        var latest = workflow.Spec.Versions.GetLatest();
        if (latest.Schedule == null) return "-";
        else if (latest.Schedule.After != null) return "after";
        else if (latest.Schedule.Cron != null) return "cron";
        else if (latest.Schedule.Every != null) return "every";
        else if (latest.Schedule.On != null) return "on";
        else throw new NotSupportedException("The specified schedule type is not supported");
    }

    void OnViewWorkflow(Workflow workflow) => NavigationManager.NavigateTo($"workflows/details/{workflow.GetNamespace()}/{workflow.GetName()}/{workflow.Spec.Versions.GetLatest().Document.Version}");

    void OnCreateWorkflow() => NavigationManager.NavigateTo("/workflows/new");

    void OnCreateWorkflowVersion(string ns, string name) => NavigationManager.NavigateTo($"/workflows/new/{ns}/{name}");

}