@* 
    Copyright © 2022-Present The Synapse Authors
    <p>
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    <p>
    http://www.apache.org/licenses/LICENSE-2.0
    <p>
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@page "/workflows"
@using Neuroglia.Data
@using Neuroglia.Data.Flux
@using Semver
@using Synapse.Integration.Models
@using System.Reactive.Linq
@inherits StatefulComponent<V1WorkflowCollectionState>
@inject IServiceProvider ServiceProvider
@inject IBreadcrumbService BreadcrumbService
@inject NavigationManager NavigationManager

<PageTitle>Workflows</PageTitle>
<AppRightSidebar>
    <Toolbar>
        <button @onclick="OnNewWorkflow" class="btn btn-outline-dark" title="New workflow"><small class="bi bi-plus"></small><span class="btn-label"> New workflow</span></button>
    </Toolbar>
</AppRightSidebar>
<div class="row">
    <div class="col-6">
        <SearchBox PlaceHolder="Search workflows..." OnSearch="OnSearchWorkflows" OnClear="OnClearWorkflowSearch" />
    </div>
</div>

<Table Items="workflows" AutoGenerateColumns="false">
    <RowTemplate Context="RenderContext">
        <ExpandableDataRow>
            <Header>
                <CellCollectionPresenter Item="@RenderContext.Item" />
            </Header>
            <Body>
                <td colspan="100">
                    <Table Items="RenderContext.Item.Value" AutoGenerateColumns="false">
                        <RowTemplate Context="SubRenderContext">
                            <tr>
                                <CellCollectionPresenter Item="@SubRenderContext.Item" />
                            </tr>
                        </RowTemplate>
                        <Columns>                        
                            <Column T="V1Workflow" 
                                Name="Version"
                                ValueProvider="workflow => workflow.Definition.Version" />
                            <Column T="V1Workflow" 
                                Name="CreatedAt"
                                ValueProvider="workflow => workflow.CreatedAt" />
                            <!--
                            <Column T="V1Workflow" 
                                Name="Instances"
                                ValueProvider="workflow => workflow.TotalInstanceCount" />
                            -->
                            <ViewDetailsColumn T="V1Workflow" OnViewDetails="workflow => OnViewWorkflow(workflow)" />
                        </Columns>
                    </Table>
                </td>
            </Body>
        </ExpandableDataRow>
    </RowTemplate>
    <Columns>
        <Column T="KeyValuePair<string, List<V1Workflow>>" 
            Name="Name"
            ValueProvider="g => g.Key" />
        <Column T="KeyValuePair<string, List<V1Workflow>>" 
            Name="Versions"
            ValueProvider="g => g.Value.Count()" />
        <!--
        <Column T="KeyValuePair<string, List<V1Workflow>>" 
            Name="Instances"
            ValueProvider="g => g.Value.Sum(w => w.TotalInstanceCount)" />
        -->
        <Column T="KeyValuePair<string, List<V1Workflow>>" 
            Name="Latest version"
            ValueProvider="g => g.Value.Max(w => SemVersion.Parse(w.Definition.Version, SemVersionStyles.Any, 1024))" />
        <ViewDetailsColumn T="KeyValuePair<string, List<V1Workflow>>" OnViewDetails="kvp => OnViewWorkflow(kvp.Value.OrderBy(w => new Version(w.Definition.Version)).Last())" />
    </Columns>
</Table>

@code {

    private IDisposable? _Subscription;
    private Dictionary<string, List<V1Workflow>> workflows = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await this.BreadcrumbService.Use(KnownBreadcrumbs.Workflows);
        this._Subscription = this.Feature
            .Subscribe(workflows =>
            {
                this.workflows = workflows
                    .GroupBy(w => w.Definition.Id!)
                    .ToDictionary(g => g.Key, g => g.ToList())!;
                this.StateHasChanged();
            });
        this.Dispatcher.Dispatch(new ListV1Workflows());
    }

    void OnSearchWorkflows(string term)
    {
        this.Dispatcher.Dispatch(new SearchV1Workflows(term));
    }

    void OnClearWorkflowSearch()
    {
        this.Dispatcher.Dispatch(new ListV1Workflows());
    }

    void OnNewWorkflow()
    {
        this.NavigationManager.NavigateTo("/workflows/new");
    }

    void OnUploadWorkflow()
    {
        this.NavigationManager.NavigateTo("/workflows/upload");
    }

    void OnViewWorkflow(V1Workflow workflow)
    {
        this.NavigationManager.NavigateTo($"/workflows/{workflow.Id}");

    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        if (disposing)
        {
            this._Subscription?.Dispose();
            this._Subscription = null;
        }
    }

}
