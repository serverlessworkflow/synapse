@* 
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@page "/workflows/editor"
@page "/workflows/editor/{workflowId}"
@using System.Reactive.Subjects
@using System.Reactive.Linq
@using Synapse.Dashboard.Pages.Workflows.Editor.Actions
@using Synapse.Dashboard.Pages.Workflows.Editor.State
@inject IBreadcrumbService BreadcrumbService
@inject IMonacoEditorHelper MonacoEditorHelper
@inject IStore Store
@inject IDispatcher Dispatcher
@inherits StatefulComponent<WorkflowEditorState>

<PageTitle>Workflow editor</PageTitle>
<AppRightSidebar>
    <Toolbar>
        <button @onclick="OnSaveWorkflow" disabled="@State.Saving" class="btn btn-outline-dark" title="Save the current workflow"><small class="bi bi-cloud-upload"></small><span class="btn-label">Save</span></button>
        <button @onclick="OnResetWorkflow" disabled="@State.Saving" class="btn btn-outline-dark" title="Reset the current workflow"><small class="bi bi-x-circle"></small><span class="btn-label">Reset</span></button>
        <hr class="m-0" />
        <a target="_blank" href="https://github.com/serverlessworkflow/specification/blob/main/specification.md#abstract" class="btn btn-outline-dark" title="View the Serverless Workflow Specification documentation"><small class="bi bi-book"></small><span class="btn-label">Documentation</span></a>
    </Toolbar>
</AppRightSidebar>

@if (State.Saving)
{
    <div class="position-relative w-100 h-100">
          <Loader />
    </div>
}
else if (workflowDefinition != null)
{
    <div class="row align-items-start">
        <div class="@colClass">
            <WorkflowEditor
                Workflow="workflowDefinition" 
                OnPropertyChanged="OnWorkflowDefinitionChanged" 
            />
        </div>
        <div class="@colClass">
            <div class="row">
                <div class="col">
                    <PreferedLanguageSelector PreferedLanguageChange="ToggletextBasedEditorLanguage" />
                </div>
                <div class="col">
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" role="switch" id="toggle-language" checked="@State.IsDiagramVisible" @onchange="(() => Dispatcher.Dispatch(new ToggleDiagramVisibility()))">
                        <label class="form-check-label" for="toggle-language">Show diagram</label>
                    </div>
                </div>
            </div>
            <MonacoEditor @ref="textBasedEditor"
                CssClass="vh-85"
                ConstructionOptions="MonacoEditorHelper.GetStandaloneEditorConstructionOptions()"
                OnDidInit="OnTextBasedEditorInit"
                OnDidChangeModelContent="OnTextBasedDefinitionChanged"
            />
        </div>
        @if (isDiagramVisible) {
            <div class="@colClass vh-85">
                <WorkflowDiagram @ref="workflowDiagram" WorkflowDefinition="workflowDefinition" Orientation="WorkflowDiagramOrientation.TopToBottom" />
            </div>
        }
    </div>
}
else if(!string.IsNullOrWhiteSpace(this.workflowId))
{
    <Loader />
}
<Modal @ref="validationMessagesDialog">
    <Title>
        Validation messages
    </Title>
    <Body>
        <div>
            @if (State.ValidationMessages != null && State.ValidationMessages.Any())
            {
                <div class="validation-errors alert alert-danger">
                    <ul>
                        @foreach (var error in State.ValidationMessages)
                        {
                            <li>@error.ToString()</li>
                        }
                    </ul>
                </div>
            }
        </div>
    </Body>
</Modal>

@code{
    private string? workflowId;
    [Parameter] public string? WorkflowId { get; set; }

    private IFeature<V1WorkflowCollectionState> workflowsFeature; 
    private MonacoEditor? textBasedEditor;
    private Subject<string>? editorValue;
    private Subject<bool>? disposeNotifier;
    private WorkflowDefinition? workflowDefinition;
    private WorkflowDiagram? workflowDiagram;
    private Modal? validationMessagesDialog;
    private bool isDiagramVisible = false;
    private string colClass = "col-6";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await this.BreadcrumbService.Use(KnownBreadcrumbs.WorkflowEditor);
        this.disposeNotifier = new Subject<bool>();
        this.editorValue = new Subject<string>();
        this.editorValue
            .Throttle(TimeSpan.FromMilliseconds(300))
            .DistinctUntilChanged()
            .TakeUntil(this.disposeNotifier)
            .Subscribe(text => this.Dispatcher.Dispatch(new HandleTextBasedEditorChange(text)));
        WorkflowEditorSelectors.SelectWorkflowDefinitionText(this.Store)
            .TakeUntil(this.disposeNotifier)
            .Subscribe(async (text) =>
            {
                if (text != null && this.textBasedEditor != null)
                {
                    var currentText = await this.textBasedEditor!.GetValue();
                    if (currentText != text) {
                        await this.textBasedEditor.SetValue(text);
                    }
                }
            });
        WorkflowEditorSelectors.SelectWorkflowDefinition(this.Store)
            .TakeUntil(this.disposeNotifier)
            .Subscribe(async (definition) =>
            {
                if (this.workflowDefinition != definition) 
                {
                    this.workflowDefinition = definition;
                    this.StateHasChanged();
                    if (this.workflowDiagram != null) {
                        await this.workflowDiagram!.RefreshAsync();
                    }
                }
            });
        WorkflowEditorSelectors.SelectValidationMessages(this.Store)
            .TakeUntil(this.disposeNotifier)
            .Subscribe(async (messages) =>
            {
                if (messages != null && messages.Any())
                {
                    await this.validationMessagesDialog!.ShowAsync();
                    this.StateHasChanged();
                }
            });
        WorkflowEditorSelectors.SelectIsDiagramVisible(this.Store)
            .TakeUntil(this.disposeNotifier)
            .Subscribe((isVisible) =>
            {
                this.isDiagramVisible = isVisible;
                this.colClass = isVisible ? "col-4" : "col-6";
                this.StateHasChanged();
            });
        if (string.IsNullOrWhiteSpace(this.workflowId))
            this.Dispatcher.Dispatch(new InitializeState());
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (this.workflowId != this.WorkflowId)
        {
            this.workflowId = this.WorkflowId;
            if(!string.IsNullOrWhiteSpace(this.workflowId))
                this.Dispatcher.Dispatch(new InitializeState(this.workflowId));
        }  
    }

    protected async Task OnWorkflowDefinitionChanged(WorkflowDefinition workflowDefinition)
    {
        this.Dispatcher.Dispatch(new HandleFormBasedEditorChange(workflowDefinition!));
        await Task.CompletedTask;
    }

    protected async Task SetTextBasedEditorLanguageAsync()
    {
        var model = await this.textBasedEditor!.GetModel();
        await MonacoEditorBase.SetModelLanguage(model, this.MonacoEditorHelper.PreferedLanguage);
        if (this.MonacoEditorHelper.PreferedLanguage == PreferedLanguage.JSON)
            await model.jsRuntime.InvokeVoidAsync("enableJsonValidation08", model.Uri);
    }

    protected virtual async Task ToggletextBasedEditorLanguage(string language)
    {
        await this.SetTextBasedEditorLanguageAsync();
        var text = await this.textBasedEditor!.GetValue();
        this.Dispatcher.Dispatch(new ChangeTextLanguage(language, text));
    }

    protected async Task OnTextBasedEditorInit(MonacoEditorBase editor)
    {
        await this.SetTextBasedEditorLanguageAsync();
        await this.textBasedEditor!.SetValue(this.State.WorkflowDefinitionText);
    }

    protected async Task OnTextBasedDefinitionChanged(ModelContentChangedEvent e)
    {
        if (!this.State.Updating && this.editorValue != null)
        {
            var text = await this.textBasedEditor!.GetValue();
            this.editorValue.OnNext(text);
        }
    }

    protected virtual void OnResetWorkflow()
    {
        this.Dispatcher.Dispatch(new InitializeState(false));
    }

    protected virtual void OnSaveWorkflow()
    {
        if (this.workflowDefinition == null)
            return;
        this.Dispatcher.Dispatch(new ValidateWorkflowDefinition(this.workflowDefinition, true));
        this.StateHasChanged();
    }

    private bool disposed;
    protected override void Dispose(bool disposing)
    {
        if (!this.disposed)
        {
            if (this.disposeNotifier != null)
            {
                this.disposeNotifier.OnNext(true);
                this.disposeNotifier.OnCompleted();
                this.disposeNotifier.Dispose();
                this.disposeNotifier = null;
            }
            this.disposed = true;
        }
        base.Dispose(disposing);
    }

}