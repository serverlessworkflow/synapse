@* 
    Copyright © 2022-Present The Synapse Authors
    <p>
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    <p>
    http://www.apache.org/licenses/LICENSE-2.0
    <p>
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@page "/workflows/upload"
@using Microsoft.AspNetCore.Http
@using Microsoft.Extensions.Primitives
@using Synapse.Apis.Management
@using Synapse.Integration.Commands.Workflows
@using System.Net.Http.Headers
@implements IDisposable
@inject IBreadcrumbService BreadcrumbService
@inject ISynapseManagementApi SynapseManagementApi
@inject NavigationManager NavigationManager

<PageTitle>Upload workflow</PageTitle>
<AppHeader>
    <span class="h5 m-0 p-0">Upload workflow</span>
</AppHeader>
<div class="h-100 mh-100 flex-grow d-flex flex-column justify-content-center align-items-center g-3 upload-page">
    <div class="row">
        <div class="col">
            <label class="form-label" for="definitionInput">Definition file</label>
            <InputFile id="definitionInput" OnChange="@OnInputDefinitionFileChange" class="form-control" />
            @if (!string.IsNullOrWhiteSpace(definitionError)) {
                <div class="invalid-feedback">@definitionError</div>
            }
        </div>
        <div class="col">
            <label class="form-label" for="resourcesInput">Resources files</label>
            <InputFile id="resourcesInput" OnChange="@OnInputResourcesFilesChange" multiple class="form-control"/>
            @if (!string.IsNullOrWhiteSpace(resourcesError)) {
                <div class="invalid-feedback">@resourcesError</div>
            }
        </div>
    </div>
    <div class="row">
        <div class="col">
            <button disabled="@uploadDisabled" @onclick="OnUploadWorkflowAsync" type="button" class="btn btn-blockquote btn-dark">Upload Workflow</button>
        </div>
    </div>
</div>

@code {
    private UploadableFile? definition = null;
    private List<UploadableFile>? resources = null;
    private bool shouldRender = true;
    private string definitionError = "";
    private string resourcesError = "";
    private bool uploadDisabled { 
        get
        {
            return this.definition == null;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await this.BreadcrumbService.Use(KnownBreadcrumbs.UploadWorkflow);
    }

    protected override bool ShouldRender() => this.shouldRender;

    private async Task OnInputDefinitionFileChange(InputFileChangeEventArgs e)
    {
        this.shouldRender = false;
        this.definitionError = "";
        try
        {
            this.definition = new (e.File);
        }
        catch (Exception ex)
        {
            this.definitionError = "An error occured while processing your file.";
        }
        this.shouldRender = true;
        await Task.CompletedTask;
    }

    private async Task OnInputResourcesFilesChange(InputFileChangeEventArgs e)
    {
        this.shouldRender = false;
        this.resourcesError = "";
        try
        {
            this.resources = null;
            if (e.FileCount > 0) {
                this.resources = new List<UploadableFile>();
                foreach (var file in e.GetMultipleFiles(25))
                {
                    this.resources.Add(new(file));
                }
            }
        }
        catch (Exception ex)
        {
            this.resourcesError = "An error occured while processing one of your files.";
        }
        this.shouldRender = true;
        await Task.CompletedTask;
    }

    private async Task OnUploadWorkflowAsync()
    {
        var command = new V1UploadWorkflowCommand();
        command.DefinitionFile = this.definition;
        var resourceFiles = new List<IFormFile>();
        if (this.resources != null)
        {
            foreach(var data in this.resources)
            {
                resourceFiles.Add(data);
            }
        }
        command.ResourceFiles = resourceFiles.AsEnumerable();
        var workflow = await this.SynapseManagementApi.UploadWorkflowAsync(command);
        this.NavigationManager.NavigateTo($"/workflows");
    }

    public void Dispose()
    {
        if (this.definition != null)
        {
            this.definition?.Dispose();
            this.definition = null;
        }
        if (this.resources != null)
        {
            this.resources.ForEach(resource =>
            {
                resource.Dispose();
            });
            this.resources = null;
        }
    }

}
