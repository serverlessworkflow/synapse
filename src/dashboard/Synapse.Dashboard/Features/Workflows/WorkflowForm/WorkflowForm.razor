@* 
    Copyright © 2022-Present The Synapse Authors
    <p>
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    <p>
    http://www.apache.org/licenses/LICENSE-2.0
    <p>
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@using ServerlessWorkflow.Sdk.Models
@using ServerlessWorkflow.Sdk.Services.IO
@using ServerlessWorkflow.Sdk.Services.Validation
@using System.Text
@namespace Synapse.Dashboard
@inject IMonacoEditorHelper MonacoEditorHelper
@inject IWorkflowReader WorkflowReader
@inject IWorkflowValidator WorkflowValidator
@inject IDispatcher Dispatcher


<label class="form-form-label">Definition</label>     
<div class="form-check form-switch">
    <input class="form-check-input" type="checkbox" role="switch" id="toggle-language" checked='language == "json"' @onchange="ToggleLanguage">
    <label class="form-check-label" for="toggle-language">Language: @this.language</label>
</div>
<div class="flex-grow d-flex flex-row w-100 h-100">
    <div class="w-75 h-100 mh-100">   
        @if (language == "json")
        {            
            <MonacoEditor
                @ref="jsonEditor"
                Id="json-definition-editor"
                CssClass="h-100"
                ConstructionOptions='MonacoEditorHelper.GetStandaloneEditorConstructionOptions()'
                OnDidInit="OnMonacoEditorDidInit"
                OnDidChangeModelDecorations="OnMonacoEditorDidChangeModelDecorations"
            />
        }
        @if (language == "yaml")
        {            
            <MonacoEditor
                @ref="yamlEditor"
                Id="yaml-definition-editor"
                CssClass="h-100"
                ConstructionOptions='MonacoEditorHelper.GetStandaloneEditorConstructionOptions("", false, "yaml")'
                OnDidInit="OnMonacoEditorDidInit"
                OnDidChangeModelDecorations="OnMonacoEditorDidChangeModelDecorations"
            />
        }
    </div>
    <div class="w-25">            
        @if(validationErrors != null && validationErrors.Any())
        {
            <div class="validation-errors alert alert-danger">
                <ul>
                    @foreach (var error in validationErrors)
                    {
                        <li>@error.ToString()</li>
                    }
                </ul>
            </div>
        }
    </div>
</div>
<button disabled="@CreateDisabled" @onclick="OnCreateWorkflow" type="button" class="btn btn-blockquote btn-dark">Create Workflow</button>


@code {

    [Parameter] public EventCallback<WorkflowDefinition> OnSubmitWorkflowDefinition { get; set; }
    [Parameter] public bool CreateDisabled { get; set; }
    protected IList<string> validationErrors = new List<string>();
    protected MonacoEditor jsonEditor = null!;
    protected MonacoEditor yamlEditor = null!;
    protected MonacoEditor editor { get => this.language == "json" ? this.jsonEditor : this.yamlEditor; }
    protected string language = "json";


    protected virtual void ToggleLanguage()
    {
        // TODO : convert editor value ?
        this.language = this.language == "json" ? "yaml" : "json";
    }

    async Task OnCreateWorkflow()
    {
        await this.Validate();
        var rawDefinition = await this.editor.GetValue();
        if (string.IsNullOrWhiteSpace(rawDefinition))
        {
            return;
        }
        try
        {
            using var stream = new MemoryStream(Encoding.UTF8.GetBytes(rawDefinition));
            WorkflowDefinition definition = await this.WorkflowReader.ReadAsync(stream);
            var validationResult = await this.WorkflowValidator.ValidateAsync(definition, false, true);
            if (!validationResult.IsValid)
            {
                validationResult.SchemaValidationErrors.ToList().ForEach(error =>
                {
                    this.validationErrors.Add($"(Schema) ${error.Message}");
                });
                validationResult.DslValidationErrors.ToList().ForEach(error =>
                {
                    this.validationErrors.Add($"(DSL) ${error.ErrorMessage}");
                });
                return;
            }
            if (this.OnSubmitWorkflowDefinition.HasDelegate) {
                await this.OnSubmitWorkflowDefinition.InvokeAsync(definition);
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.ToString());
            //todo: warn the user via validationErrors
            return;
        }
    }

    protected async Task OnMonacoEditorDidInit(MonacoEditorBase editorBase)
    {
        var model = await this.editor.GetModel();
        await this.editor.SetValue("");
        if (this.language == "json") await model.jsRuntime.InvokeVoidAsync("enableJsonValidation08" , model.Uri);
    }

    protected async Task OnMonacoEditorDidChangeModelDecorations(ModelDecorationsChangedEvent modelDecorationsChangedEvent)
    {
        await this.Validate();
    }

    protected async Task Validate()
    {
        this.validationErrors.Clear();
        this.Dispatcher.Dispatch(new Pages.Workflows.Create.Actions.EnableCreateButton());
        var model = await this.editor.GetModel();
        var owner = await model.GetModeId();
        var markers = await model.jsRuntime.InvokeAsync<IEnumerable<MonacoEditorMarker>>("getModelMarkers" , owner);
        var severeMarkers = markers.Where(marker => marker.Severity >= (int)MonacoEditorMarkerSeverity.Warning);
        var rawDefinition = await this.editor.GetValue();
        if (severeMarkers.Any())
        {
            this.Dispatcher.Dispatch(new Pages.Workflows.Create.Actions.DisableCreateButton());
            severeMarkers.ToList().ForEach(marker =>
            {
                this.validationErrors.Add($"{marker.Message} ");
            });
        }
        else if (String.IsNullOrEmpty(rawDefinition))
        {
            this.validationErrors.Add("The definition cannot be empty");
            this.Dispatcher.Dispatch(new Pages.Workflows.Create.Actions.DisableCreateButton());
        }
    }

}
