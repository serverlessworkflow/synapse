@* 
    Copyright © 2022-Present The Synapse Authors
    <p>
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    <p>
    http://www.apache.org/licenses/LICENSE-2.0
    <p>
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard
@using Neuroglia.Serialization
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using Newtonsoft.Json.Schema
@using Synapse.Apis.Management
@inject ISynapseManagementApi SynapseApi
@inject IJsonSerializer JsonSerializer
@inject IMonacoEditorHelper MonacoEditorHelper
@inject IYamlService YamlService
@inject HttpClient HttpClient

@if (Workflow != null) 
{
    <Toolbar>
        <button @onclick="async () => await OnShowWorkflowInputModal()" class="btn btn-outline-dark" title="Start workflow"><small class="oi oi-media-play"></small><span class="btn-label">&nbsp; Start workflow</span></button>
    </Toolbar>
    
    <Modal @ref="errorModal">
        <Title>Error</Title>
        <Body>
            <p>An error occured:</p>
            <div class="border rounded bg-danger text-white text-break p-1">@((MarkupString)error)</div>
        </Body>
        <Footer>
            <button @onclick="errorModal.HideAsync" class="btn btn-secondary">Close</button>
        </Footer>
    </Modal>
    <Modal @ref="workflowInputModal">
        <Title>Start new instance</Title>
        <Body>
            @if (dataInputSchema != null)
            {
                <JsonForm @ref="jsonForm" Schema="dataInputSchema" />
            }
            else
            {
                <p>Input de JSON payload to start the workflow with:</p>
                <PreferedLanguageSelector PreferedLanguageChange="ToggleLanguage" />
                <MonacoEditor
                    @ref="workflowInputEditor"
                    CssClass="monaco-small"
                    ConstructionOptions="MonacoEditorHelper.GetStandaloneEditorConstructionOptions(string.Empty, false, MonacoEditorHelper.PreferedLanguage)"
                    OnDidInit="OnMonacoEditorDidInit"
                />
            }
            @if (inputValidationErrors != null)
            {
                <div class="alert alert-danger">
                    <ul>
                        @foreach (var error in inputValidationErrors)
                        {
                            <li>Line @error.LineNumber, Position @error.LinePosition: @error.Message</li>
                        }
                    </ul>
                </div>
            }
        </Body>
        <Footer>
            <button @onclick="workflowInputModal.HideAsync" class="btn btn-secondary">Cancel</button>
            <button @onclick="OnStartWorkflowAsync" class="btn btn-primary">Start</button>
        </Footer>
    </Modal>
}

@code {
    [Parameter] public V1Workflow Workflow { get; set; } = null!;
    protected V1Workflow workflow { get; set; } = null!;

    protected Modal errorModal = null!;
    protected Modal workflowInputModal = null!;
    protected MonacoEditor? workflowInputEditor;
    protected JsonForm? jsonForm;
    protected string error = null!;
    protected JSchema? dataInputSchema;
    protected IList<ValidationError>? inputValidationErrors;
    protected string editorValueBuffer = "";

    protected virtual async Task ToggleLanguage(string language)
    {
        string text = await this.workflowInputEditor!.GetValue();
        try
        {
            if (language == PreferedLanguage.YAML) {
                this.editorValueBuffer = await this.YamlService.JsonToYaml(text);
            }
            else
            {
                this.editorValueBuffer = await this.YamlService.YamlToJson(text);
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.ToString());
            await this.MonacoEditorHelper.ChangePreferedLanguage(language == PreferedLanguage.JSON ? PreferedLanguage.YAML : PreferedLanguage.JSON);
            this.editorValueBuffer = text;
        }
        await this.OnMonacoEditorDidInit(this.workflowInputEditor);
        this.StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (this.Workflow != null && this.workflow != this.Workflow)
        {
            this.workflow = this.Workflow;
            await this.LoadDataInputSchemaAsync();
        }
    }

    protected async Task LoadDataInputSchemaAsync()
    {
        var schema = this.Workflow.Definition.DataInputSchema?.Schema;
        if(schema == null
            && this.Workflow.Definition.DataInputSchemaUri != null)
        {
            var json = await this.HttpClient.GetStringAsync(this.Workflow.Definition.DataInputSchemaUri);
            schema = JSchema.Parse(json);
        }
        this.dataInputSchema = schema;
    }

    protected async Task OnMonacoEditorDidInit(MonacoEditorBase editor)
    {
        var model = await (editor as MonacoEditor)!.GetModel();
        await MonacoEditorBase.SetModelLanguage(model, this.MonacoEditorHelper.PreferedLanguage);
        await (editor as MonacoEditor)!.SetValue(this.editorValueBuffer);
    }

    public async Task OnShowWorkflowInputModal(string value = "{}")
    {
        this.inputValidationErrors = null;
        if(this.workflowInputEditor != null)
            await this.workflowInputEditor.SetValue(value);
        if(this.dataInputSchema != null
            && this.workflowInputEditor != null)
        {
            var example = this.dataInputSchema.GenerateExample();
            if(example != null)
            {
                var json = JObject.FromObject(example).ToString(Formatting.Indented);
                await this.workflowInputEditor.SetValue(json);
            }  
        }
        await this.workflowInputModal.ShowAsync();
    }

    protected async Task OnStartWorkflowAsync()
    {
        var json = string.Empty;
        if(this.workflowInputEditor != null)
        {
            json = await this.workflowInputEditor.GetValue();            
            if (this.MonacoEditorHelper.PreferedLanguage == PreferedLanguage.YAML) {
                json = await this.YamlService.YamlToJson(json);
            }
            if(this.dataInputSchema != null)
            {
                var jobj = null as JObject;
                if (string.IsNullOrWhiteSpace(json))
                    jobj = new();
                else
                    jobj = JObject.Parse(json);
                if(!jobj.IsValid(this.dataInputSchema, out IList<ValidationError> errors))
                {
                    this.inputValidationErrors = errors;
                    return;
                }
            }
        }
        else
        {
            var value = await this.jsonForm.GetValueAsync();
            if(this.dataInputSchema != null)
            {
                var jobj = JObject.FromObject(value);
                if(!jobj.IsValid(this.dataInputSchema, out IList<ValidationError> errors))
                {
                    this.inputValidationErrors = errors;
                    return;
                }
            }
            json = await this.JsonSerializer.SerializeAsync(value);
        }
        await this.workflowInputModal.HideAsync();
        this.inputValidationErrors = null;
        this.StateHasChanged();
        if(this.workflowInputEditor != null)
            await this.workflowInputEditor.SetValue("{}");
        var inputData = await this.JsonSerializer.DeserializeAsync<DynamicObject>(json);
        try
        {
            var workflowInstance = await this.SynapseApi.CreateWorkflowInstanceAsync(new()
            {
                WorkflowId = this.Workflow.Id,
                ActivationType = V1WorkflowInstanceActivationType.Manual,
                InputData = inputData,
                AutoStart = true
            });
        }
        catch(Exception ex)
        {
            this.error = ex.ToString();
            await this.errorModal.ShowAsync();
        } 
    }
}
