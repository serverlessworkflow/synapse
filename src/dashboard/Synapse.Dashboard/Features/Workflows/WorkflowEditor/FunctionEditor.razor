@* 
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard
@using Microsoft.OpenApi.Readers
@using Neuroglia.Data.Services
@inject HttpClient HttpClient
@inject ILogger<FunctionEditor> Logger
@inject ISchemaRegistry SchemaRegistry

@if(function != null)
{
    <table class="table table-striped">
    <tbody>
        <tr>
            <td>Name</td>
            <td><input name="@nameof(function.Name)" type="text" required placeholder="Function name" class="form-control" value="@function.Name"
                @onchange="async e => await OnPropertyChanged(nameof(function.Name), f => f.Name = (string)e.Value!)" /></td>
        </tr>
        <tr>
            <td>Type</td>
            <td>
                <select name="@nameof(function.Type)" required class="form-control bg-secondary text-white" 
                @onchange="async e => await OnPropertyChanged(nameof( function.Type), f => { f.Type = EnumHelper.Parse<FunctionType>((string)e.Value!); f.Operation = null!; })">
                    @foreach (FunctionType functionType in Enum.GetValues(typeof(FunctionType)))
                    {
                        var functionTypeStr = @EnumHelper.Stringify(functionType);
                        if(function.Type == functionType)
                        {
                            <option value="@functionTypeStr" selected>@functionTypeStr</option>
                        }
                        else
                        {
                            <option value="@functionTypeStr">@functionTypeStr</option>
                        }
                    }
                </select>
           </td>
        </tr>
        <tr>
            <td>Operation</td>
            <td>
                <div class="input-group">
                    @{
                        string[] operationComponents = null!;
                        Uri? resourceUri = null;
                        var operationId = string.Empty;
                        if (!string.IsNullOrWhiteSpace(function.Operation))
                        {
                            operationComponents = function.Operation.Split('#', StringSplitOptions.RemoveEmptyEntries);
                            resourceUri = new(operationComponents[0]);
                            if(operationComponents.Length == 2)
                                operationId = operationComponents[1];
                        }    
                    }
                    <input name="@nameof(function.Operation)" type="url" required placeholder="Resource URI (ex: https://petstore.swagger.io/v2/swagger.json)" class="form-control" value="@function.Operation"
                    @onchange="async e => await OnResourceUriChangedAsync((string)e.Value!)"/>
                    @switch (function.Type)
                    {
                        case FunctionType.OData:
                            <ODataEntitySetSelector DocumentUri="resourceUri" OperationId="@operationId" OnChange="async operation => await OnOperationChangedAsync(resourceUri, operation)" />
                            break;
                        case FunctionType.Rest:
                            <OpenApiOperationSelector DocumentUri="resourceUri" OperationId="@operationId" OnChange="async operation => await OnOperationChangedAsync(resourceUri, operation)" />
                            break;
                        case FunctionType.Rpc:
                            <GrpcOperationSelector DocumentUri="resourceUri" OperationId="@operationId" OnChange="async operation => await OnOperationChangedAsync(resourceUri, operation)" />
                            break;
                    }
                </div>
            </td>
        </tr>
        <tr>
            <td>Authentication</td>
            <td>
                @if(Workflow != null)
                {
                    <AuthenticationSelector 
                    Authentications="Workflow.Auth"
                    Selected="string.IsNullOrWhiteSpace(function.AuthRef) ? null : Workflow.GetAuthentication(function.AuthRef)"
                    OnChange="async e => await OnPropertyChanged(nameof(function.AuthRef), f => f.AuthRef = e.Name)"/>
                }
                else
                {
                    <input type="text" value="@function.AuthRef" placeholder="Authentication definition reference" class="form-control"
                    @onchange="async e => await OnPropertyChanged(nameof(function.AuthRef), f => f.AuthRef = (string?)e.Value)"/>
                }
            </td>
        </tr>
        <tr>
            <td colspan="2">Metadata</td>
        </tr>
        <tr>
            <td colspan="2">
                <MetadataEditor
                Metadata="function.Metadata"
                OnChange="async e => await OnPropertyChanged(nameof(function.Metadata), f => f.Metadata = e)"/>
            </td>
        </tr>
    </tbody>
</table>
}

@code {

    [CascadingParameter] public WorkflowDefinition? Workflow { get; set; }

    private FunctionDefinition? function { get; set; }
    [Parameter] public FunctionDefinition? Function { get; set; }

    [Parameter] public EventCallback<FunctionDefinition?> OnChange { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (this.function != this.Function) {
            this.function = this.Function;
        } 
    }

    protected virtual async Task OnResourceUriChangedAsync(string resourceUri)
    {
        if (this.function == null)
            return;
        await this.OnPropertyChanged(nameof(function.Operation), f => f.Operation = resourceUri);
    }

    protected virtual async Task OnOperationChangedAsync(Uri? resourceUri,string operationId)
    {
        await this.OnPropertyChanged(nameof(function.Operation), f => f.Operation = $"{resourceUri}#{operationId}");
    }

    protected virtual async Task OnPropertyChanged(string property, Action<FunctionDefinition> patch)
    {
        if (this.function == null)
            return;
        patch(this.function);
        await this.OnChange.InvokeAsync(this.function);
        this.StateHasChanged();
    }

}
