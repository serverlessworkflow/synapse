@*
 * Copyright © 2022-Present The Synapse Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
*@
@namespace Synapse.Dashboard
@using Neuroglia.Serialization
@using System.Linq.Expressions
@inject IJsonSerializer Serializer

<CascadingValue Value="CascadedEditContext ">
    <div id="@Id">
        @if (!string.IsNullOrWhiteSpace(Label))
        {
            <label class="form-label">@Label</label>
        }
        <div>
            <InputJqExpression
                Id="@inputId"
                Label="Input data filter"
                Value="@input"
                ValueChanged="OnInputValueChanged"
                ValueExpression="@(() => input)"
                ValidationFor="@(() => input)"
                class="@fieldCssClasses" 
            />
        </div>
        <div>
            <InputJqExpression
                Id="s@outputId"
                Label="Output data filter"
                Value="@output"
                ValueChanged="OnOutputValueChanged"
                ValueExpression="@(() => output)"
                ValidationFor="@(() => output)"
                class="@fieldCssClasses" 
            />
        </div>
    </div>
</CascadingValue>

@code {

    [Parameter] public StateDataFilterDefinition? Value { get; set; }
    protected StateDataFilterDefinition? value { get; set; }
    [Parameter] public EventCallback<StateDataFilterDefinition?> ValueChanged { get; set; }

    [Parameter] public Expression<Func<StateDataFilterDefinition?>> ValueExpression { get; set; } = null!;
    [Parameter, EditorRequired] public Expression<Func<StateDataFilterDefinition?>> ValidationFor { get; set; } = default!;
    [Parameter] public string? Id { get; set; }
    [Parameter] public string? Label { get; set; }
    [CascadingParameter] protected EditContext CascadedEditContext  { get; set; } = null!;

    protected bool _hasInitializedParameters;
    protected FieldIdentifier fieldIdentifier;
    protected string fieldCssClasses => "form-control valid " + this.CascadedEditContext ?.FieldCssClass(this.fieldIdentifier) ?? "";
    protected string? inputId => this.Id + "-input";
    protected string? outputId => this.Id + "-input";
    protected string? input = null;
    protected string? output = null;

    protected override void OnInitialized()
    {
        this.fieldIdentifier = FieldIdentifier.Create(ValueExpression);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (this.Value != this.value)
        {
            this.value = this.Value;
            this.input = this.Value?.Input;
            this.output = this.Value?.Output;
        }
    }

    protected virtual async Task OnInputValueChanged(string? input) {
        this.input = input;
        await this.OnValueChanged();
    }

    protected virtual async Task OnOutputValueChanged(string? output)
    {
        this.output = output;
        await this.OnValueChanged();
    }

    protected virtual async Task OnValueChanged()
    {
        Console.WriteLine("changed");
        Console.WriteLine(this.input);
        Console.WriteLine(this.output);
        if (string.IsNullOrWhiteSpace(this.input) && string.IsNullOrWhiteSpace(this.output))
        {
            this.Value = null;
        }
        else
        {
            var stateDataFilter = new StateDataFilterDefinition();
            if (!string.IsNullOrWhiteSpace(this.input))
            {
                stateDataFilter.Input = this.input;
            }
            if (!string.IsNullOrWhiteSpace(this.output))
            {
                stateDataFilter.Output = this.output;
            }
            this.Value = stateDataFilter;
        }
        if (this.ValueChanged.HasDelegate)
        {
            await this.ValueChanged.InvokeAsync(this.Value);
        }
        this.CascadedEditContext?.NotifyFieldChanged(this.fieldIdentifier);
        Console.WriteLine(this.Serializer.Serialize(this.Value));
    }

}