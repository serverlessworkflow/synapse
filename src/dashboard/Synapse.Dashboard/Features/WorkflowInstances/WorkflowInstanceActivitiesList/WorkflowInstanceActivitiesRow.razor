@* 
    Copyright © 2022-Present The Synapse Authors
    <p>
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    <p>
    http://www.apache.org/licenses/LICENSE-2.0
    <p>
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard
@using Newtonsoft.Json
@using System.Text
@inject IMonacoEditorHelper MonacoEditorHelper
@inject IYamlService YamlService

<td colspan="7">
@if(Activity != null)
{
    <div class="row">
        @if (Activity.Type == V1WorkflowActivityType.State)
        {
            <div class="col">
                <PreferedLanguageSelector PreferedLanguageChange="ToggleLanguage" />
                <MonacoDiffEditor
                    @ref="diffEditor"
                    CssClass="monaco-small"
                    ConstructionOptions="MonacoEditorHelper.GetDiffEditorConstructionOptions()"
                    OnDidInit="OnActivityDiffEditorDidInit"
                />
            </div>
        } 
        else {
                <div class="col-6">
                <p class="font-weight-bold">Input</p>
                @if(Activity.Input != null)
                {
                    <PreferedLanguageSelector PreferedLanguageChange="ToggleLanguage" />
                    <MonacoEditor
                        @ref="inputEditor"
                        CssClass="monaco-small"
                        ConstructionOptions="MonacoEditorHelper.GetStandaloneEditorConstructionOptions(String.Empty, true, MonacoEditorHelper.PreferedLanguage)" 
                        OnDidInit="OnActivityStandaloneEditorDidInit(Activity.Input)"
                    />
                }
            </div>
            <div class="col-6">
                <p class="font-weight-bold">Output</p>
                @if(Activity.Output != null)
                {
                    <PreferedLanguageSelector PreferedLanguageChange="ToggleLanguage" />
                    <MonacoEditor 
                        @ref="outputEditor"
                        CssClass="monaco-small"
                        ConstructionOptions="MonacoEditorHelper.GetStandaloneEditorConstructionOptions(String.Empty, true, MonacoEditorHelper.PreferedLanguage)"  
                        OnDidInit="OnActivityStandaloneEditorDidInit(Activity.Output)"
                    />
                }
                @if(Activity.Error != null)
                {
                    <PreferedLanguageSelector PreferedLanguageChange="ToggleLanguage" />
                    <MonacoEditor                 
                        @ref="errorEditor"                                
                        CssClass="monaco-small"
                        ConstructionOptions="MonacoEditorHelper.GetStandaloneEditorConstructionOptions(String.Empty, true, MonacoEditorHelper.PreferedLanguage)"  
                        OnDidInit="OnActivityStandaloneEditorDidInit(Activity.Error)"
                    />
                }
            </div>
        }
    </div>
}
 </td>

@code {
    [Parameter] public V1WorkflowActivity Activity { get; set; } = null!;

    protected MonacoDiffEditor diffEditor = null!;
    protected MonacoEditor inputEditor = null!;
    protected MonacoEditor outputEditor = null!;
    protected MonacoEditor errorEditor = null!;

    protected virtual async Task ToggleLanguage(string language)
    {
        if (Activity.Type == V1WorkflowActivityType.State)
        {
            await this.OnActivityDiffEditorDidInit();
        }
        else {
            if(Activity.Input != null)
            {
                await this.InitEditor(this.inputEditor as MonacoEditorBase, Activity.Input);
            }
            if(Activity.Output != null)
            {
                await this.InitEditor(this.outputEditor as MonacoEditorBase, Activity.Output);
            }
            if(Activity.Error != null)
            {
                await this.InitEditor(this.errorEditor as MonacoEditorBase, Activity.Error);
            }
        }
        this.StateHasChanged();
    }

    protected async Task OnActivityDiffEditorDidInit()
    {
        var original = JsonConvert.SerializeObject(this.Activity.Input, Formatting.Indented);
        var modified = JsonConvert.SerializeObject(this.Activity.Output != null ? this.Activity.Output : this.Activity.Error, Formatting.Indented);
        TextModel inputModel = await MonacoEditorBase.CreateModel("", this.MonacoEditorHelper.PreferedLanguage);
        TextModel outputModel = await MonacoEditorBase.CreateModel("", this.MonacoEditorHelper.PreferedLanguage);
        if (!string.IsNullOrWhiteSpace(original))
        {
            if (this.MonacoEditorHelper.PreferedLanguage == PreferedLanguage.YAML)
            {
                original = await this.YamlService.JsonToYaml(original);
            }
            inputModel = await MonacoEditorBase.CreateModel(original, this.MonacoEditorHelper.PreferedLanguage);
        }
        if (!string.IsNullOrWhiteSpace(modified))
        {
            if (this.MonacoEditorHelper.PreferedLanguage == PreferedLanguage.YAML)
            {
                modified = await this.YamlService.JsonToYaml(modified);
            }
            outputModel = await MonacoEditorBase.CreateModel(modified, this.MonacoEditorHelper.PreferedLanguage);
        }
        await this.diffEditor.SetModel(new DiffEditorModel
        {
            Original = inputModel,
            Modified = outputModel
        });
    }

    protected Func<MonacoEditorBase, Task> OnActivityStandaloneEditorDidInit(object data)
    {
        return async (MonacoEditorBase editor) =>
        {
            await this.InitEditor(editor, data);
        };
    }

    protected async Task InitEditor(MonacoEditorBase editor, object data)
    {
        var model = await (editor as MonacoEditor).GetModel();
        await MonacoEditorBase.SetModelLanguage(model, this.MonacoEditorHelper.PreferedLanguage);
        var text = JsonConvert.SerializeObject(data, Formatting.Indented);
        if (this.MonacoEditorHelper.PreferedLanguage == PreferedLanguage.YAML)
        {
            text = await this.YamlService.JsonToYaml(text);
        }
        await (editor as MonacoEditor)!.SetValue(text);
    }
    
}
