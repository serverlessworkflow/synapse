@* 
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@
@namespace Synapse.Dashboard
@using Neuroglia.Serialization
@using System.Linq.Expressions
@using System.Diagnostics.CodeAnalysis
@inherits InputBase<DynamicObject>
@inject IMonacoEditorHelper MonacoEditorHelper
@inject IJsonSerializer Serializer
@inject IYamlService YamlService

@if (!string.IsNullOrWhiteSpace(Label))
{
    <label for="@Id" class="form-label">@Label</label>
}
<PreferedLanguageSelector PreferedLanguageChange="ToggleLanguage" />
<MonacoEditor
    @ref="editor"
    Id="@editorId"
    CssClass="@ComputedCssClass"
    ConstructionOptions='MonacoEditorHelper.GetStandaloneEditorConstructionOptions()'
    OnDidInit="OnEditorInit"
    OnDidChangeModelContent="OnEditorChange"
/>
<ValidationMessage For="@ValidationFor" class="form-text" />

@code {

    [Parameter, EditorRequired] public Expression<Func<DynamicObject>> ValidationFor { get; set; } = default!;
    [Parameter] public string? Id { get; set; }
    [Parameter] public string? Label { get; set; }

    protected string ComputedCssClass => "monaco-small " + this.CssClass;
    protected DynamicObject lastParsed = null!;
    protected string editorId => this.Id + "-json";
    protected MonacoEditor editor = null!;

    protected virtual async Task ToggleLanguage(string language)
    {
        string text = await this.editor!.GetValue();
        try
        {
            if (language == PreferedLanguage.YAML) {
                await this.YamlService.JsonToYaml(text);
            }
            else
            {
                await this.YamlService.YamlToJson(text);
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.ToString());
            await this.MonacoEditorHelper.ChangePreferedLanguage(language == PreferedLanguage.JSON ? PreferedLanguage.YAML : PreferedLanguage.JSON);
        }
        await this.OnEditorInit(this.editor);
        this.StateHasChanged();
    }

    protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out DynamicObject result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        if (this.editor == null)
        {
            result = this.Serializer.Deserialize<DynamicObject>("{}");
            this.lastParsed = result;
            validationErrorMessage = "Editor isn't initialized";
        }
        try
        {
            result = this.Serializer.Deserialize<DynamicObject>(string.IsNullOrWhiteSpace(value) ? "{}" : value);
            this.lastParsed = result;
            validationErrorMessage = "";
        }
        catch(Exception ex)
        {
            result = this.lastParsed;
            validationErrorMessage = "Enabled to parse JSON";
        }
        return true;
    }

    protected override string? FormatValueAsString(DynamicObject? value) => value != null ? this.Serializer.Serialize(value) : "";

    protected async Task OnEditorInit(MonacoEditorBase editorBase)
    {
        var model = await (editor as MonacoEditor)!.GetModel();
        await MonacoEditorBase.SetModelLanguage(model, this.MonacoEditorHelper.PreferedLanguage);
        string value = "{}";
        if (!string.IsNullOrWhiteSpace(this.CurrentValueAsString))
        {
            value = this.CurrentValueAsString;
        }
        if (this.MonacoEditorHelper.PreferedLanguage == PreferedLanguage.YAML)
        {
            value = await this.YamlService.JsonToYaml(value);
        }
        await this.editor.SetValue(value);
    }

    protected async Task OnEditorChange(ModelContentChangedEvent e)
    {
        string value = await this.editor.GetValue();
        if (this.MonacoEditorHelper.PreferedLanguage == PreferedLanguage.YAML)
        {
            value = await this.YamlService.YamlToJson(value);
        }
        if (this.CurrentValueAsString != value) 
        {
            this.CurrentValueAsString = value;
        }
    }

}
