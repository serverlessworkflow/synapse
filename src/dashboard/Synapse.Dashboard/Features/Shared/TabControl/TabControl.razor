@* 
    Copyright © 2022-Present The Synapse Authors
    <p>
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    <p>
    http://www.apache.org/licenses/LICENSE-2.0
    <p>
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard

<div class="@ContainerCssClass">    
    <div class="row">
        <ul class="nav nav-tabs @NavCssClass">
            @foreach (TabPage tabPage in Pages)
            {
                <li class="nav-item cursor-pointer">
                    <a class="nav-link @GetButtonClass(tabPage)" @onclick=@( async () => await ActivatePageAsync(tabPage) )>@tabPage.Header</a>
                </li>
            }
        </ul>
    </div>
    <div class="row flex-grow-1 position-relative @PageCssClass">
        <div class="tab-content overflow-y-scroll">
            <CascadingValue Value="this">
                @ChildContent
            </CascadingValue>
        </div>
    </div>
</div>

@code 
{

    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string? ContainerCssClass { get; set; }
    [Parameter] public string? NavCssClass { get; set; }
    [Parameter] public string? PageCssClass { get; set; }
    [Parameter] public EventCallback<TabPage> OnTabPageChange { get; set; }

    public TabPage? ActivePage { get; set; }

    List<TabPage> Pages = new List<TabPage>();

    internal void AddPage(TabPage tabPage)
    {
        this.Pages.Add(tabPage);
        if (this.Pages.Count == 1)
            this.ActivePage = tabPage;
        this.StateHasChanged();
    }

    string GetButtonClass(TabPage page)
    {
        return page == this.ActivePage ? "active" : "";
    }

    public async Task ActivatePageAsync(TabPage page)
    {
        this.ActivePage = page;
        await this.OnTabPageChange.InvokeAsync(page);
        this.StateHasChanged();
    }

}
