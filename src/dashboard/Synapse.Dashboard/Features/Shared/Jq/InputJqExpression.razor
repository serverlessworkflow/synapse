@* 
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@
@namespace Synapse.Dashboard
@using System.Linq.Expressions
@using System.Diagnostics.CodeAnalysis
@inherits InputBase<string?>
@inject IMonacoEditorHelper MonacoEditorHelper
@inject IJSRuntime JsRuntime
@inject IYamlService YamlService

@if (!string.IsNullOrWhiteSpace(Label))
{
    <label for="@Id" class="form-label">@Label</label>
}
<input type="text" @bind="@CurrentValue" @attributes="@AdditionalAttributes" class="@CssClass" />
<ValidationMessage For="@ValidationFor" class="form-text" />
<Accordion>
    <Header>
        Test bench
    </Header>
    <Body>
        <div class="row">
            <PreferedLanguageSelector PreferedLanguageChange="ToggleLanguage" />
            <MonacoEditor
                @ref="editor"
                Id="@editorId"
                CssClass="monaco-small col-6"
                ConstructionOptions='MonacoEditorHelper.GetStandaloneEditorConstructionOptions("{}")'
                OnDidInit="OnMonacoEditorDidInit"
            />
            <div class="col-6 flex-grow-1">
                @output
            </div>
        </div>
        <div class="d-grid">
            <button type="button" class="btn btn-outline-dark" @onclick="ProcessExpression">Test</button>
        </div>
    </Body>
</Accordion>

@code {

    [Parameter, EditorRequired] public Expression<Func<string?>> ValidationFor { get; set; } = default!;
    [Parameter] public string? Id { get; set; }
    [Parameter] public string? Label { get; set; }

    protected string uid = Guid.NewGuid().ToString();
    protected string editorId => this.Id + "-json-" + this.uid;
    protected string editorValueBuffer = "";
    protected MonacoEditor editor = null!;
    protected string output = "";

    protected virtual async Task ToggleLanguage(string language)
    {
        string text = await this.editor!.GetValue();
        try
        {
            if (language == PreferedLanguage.YAML) {
                this.editorValueBuffer = await this.YamlService.JsonToYaml(text);
            }
            else
            {
                this.editorValueBuffer = await this.YamlService.YamlToJson(text);
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.ToString());
            await this.MonacoEditorHelper.ChangePreferedLanguage(language == PreferedLanguage.JSON ? PreferedLanguage.YAML : PreferedLanguage.JSON);
            this.editorValueBuffer = text;
        }
        await this.OnMonacoEditorDidInit(this.editor);
        this.StateHasChanged();
    }


    protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out string? result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        result = value;
        validationErrorMessage = null;
        return true;
    }

    protected async Task OnMonacoEditorDidInit(MonacoEditorBase editorBase)
    {
        var model = await (editor as MonacoEditor)!.GetModel();
        await MonacoEditorBase.SetModelLanguage(model, this.MonacoEditorHelper.PreferedLanguage);
        await (editor as MonacoEditor)!.SetValue(this.editorValueBuffer);
    }

    protected virtual async Task ProcessExpression()
    {
        if (string.IsNullOrWhiteSpace(this.CurrentValue))
            return;
        var json = await this.editor.GetValue();
        if (this.MonacoEditorHelper.PreferedLanguage == PreferedLanguage.YAML)
        {
            json = await this.YamlService.YamlToJson(json);
        }
        this.output = await this.JsRuntime.InvokeAsync<string>("jq.raw", json, this.CurrentValue);
        // todo: try/catch, display error ?
    }

}
