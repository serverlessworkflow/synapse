@* 
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard
@using System.Collections.ObjectModel

@if (ActiveInstances > 0) 
{
    <g class="badge activity-badge activity-badge--active" transform="translate(@ActiveX, @ActiveY)">
        <circle cx="0" cy="0" r="@ActivityRadius" />
        <foreignObject  class="activity-badge__label"
            x="@CountXY"
            y="@CountXY" 
            width="@CountSize" 
            height="@CountSize"
        >
            <div style="width: @(CountSize)px;height: @(CountSize)px;">
                <span>@ActiveInstances</span>
            </div>
        </foreignObject>
    </g>
}
@if (CompensatedInstances > 0) 
{
    <g class="badge activity-badge activity-badge--compensated" transform="translate(@CompensatedX, @CompensatedY)">>
        <circle cx="0" cy="0" r="@ActivityRadius" />
        <foreignObject class="activity-badge__label"
            x="@CountXY"
            y="@CountXY" 
            width="@CountSize" 
            height="@CountSize"
        >
            <div style="width: @(CountSize)px;height: @(CountSize)px;">
                <span>@CompensatedInstances</span>
            </div>
        </foreignObject>
    </g>
}
@if (FaultedInstances > 0) 
{
    <g class="badge activity-badge activity-badge--faulted" transform="translate(@FaultedX, @FaultedY)">>
        <circle cx="0" cy="0" r="@ActivityRadius" />
        <foreignObject class="activity-badge__label"
            x="@CountXY"
            y="@CountXY" 
            width="@CountSize" 
            height="@CountSize"
        >
            <div style="width: @(CountSize)px;height: @(CountSize)px;">
                <span>@FaultedInstances</span>
            </div>
        </foreignObject>
    </g>
}

@code {
    [CascadingParameter(Name = "ActiveInstances")] public int ActiveInstances { get; set; } = new();

    [CascadingParameter(Name = "FaultedInstances")] public int FaultedInstances { get; set; } = new();

    [CascadingParameter(Name = "CompensatedInstances")] public int CompensatedInstances { get; set; } = new();

    [CascadingParameter(Name = "Node")] public INodeViewModel Node { get; set; } = null!;

    protected virtual string ActivityRadius { get; set; } = "";
    protected virtual string ActiveX { get; set; } = "";
    protected virtual string ActiveY { get; set; } = "";
    protected virtual string FaultedX { get; set; } = "";
    protected virtual string FaultedY { get; set; } = "";
    protected virtual string CompensatedX { get; set; } = "";
    protected virtual string CompensatedY { get; set; } = "";
    protected virtual string CountSize { get; set; } = "";
    protected virtual string CountXY { get; set; } = "";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        double radius = Constants.GraphBagdesRadius;
        this.ActivityRadius = radius.ToInvariantString();
        this.CountSize = (radius * 2).ToInvariantString();
        this.CountXY = (0 - radius).ToInvariantString();
    }

    protected override void OnParametersSet()
    {
        double divider = this.Node.Shape == NodeShape.Circle || this.Node.Shape == NodeShape.Ellipse ? 1 : 2;
        double offset = Constants.GraphBagdesRadius * 4;
        double activeOffset = 0;
        double compensatedOffset = 0;
        double faultedOffset = 0;
        if (this.ActiveInstances > 0)
        {
            compensatedOffset += 1;
            faultedOffset += 1;
            if (this.CompensatedInstances > 0)
            {
                faultedOffset += 1;
            }
        }
        else if (this.CompensatedInstances > 0)
        {
            faultedOffset += 1;
        }        
        this.ActiveX =      (((this.Node.BBox?.Width ?? Neuroglia.Blazor.Dagre.Constants.ClusterWidth) - (offset * activeOffset))/ divider).ToInvariantString();
        this.CompensatedX = (((this.Node.BBox?.Width ?? Neuroglia.Blazor.Dagre.Constants.ClusterWidth) - (offset * compensatedOffset)) / divider).ToInvariantString();
        this.FaultedX =     (((this.Node.BBox?.Width ?? Neuroglia.Blazor.Dagre.Constants.ClusterWidth) - (offset * faultedOffset)) / divider).ToInvariantString();
        this.ActiveY =      ((this.Node.BBox?.Height ?? Neuroglia.Blazor.Dagre.Constants.ClusterHeight) / divider).ToInvariantString();
        this.CompensatedY = ((this.Node.BBox?.Height ?? Neuroglia.Blazor.Dagre.Constants.ClusterHeight) / divider).ToInvariantString();
        this.FaultedY =     ((this.Node.BBox?.Height ?? Neuroglia.Blazor.Dagre.Constants.ClusterHeight) / divider).ToInvariantString();
    }
}
